"id";"extension";"name";"proto";"des";"return";"params"
"1";"Apache";"apache_child_terminate";"bool apache_child_terminate()";"Terminate apache process after this request";"bool";
"2";"Apache";"apache_get_modules";"array apache_get_modules()";"Get a list of loaded Apache modules";"array";
"3";"Apache";"apache_get_version";"string apache_get_version()";"Fetch Apache version";"string";
"4";"Apache";"apache_getenv";"string apache_getenv(string variable[, bool walk_to_top])";"Get an Apache subprocess_env variable";"string";
"5";"Apache";"apache_lookup_uri";"object apache_lookup_uri(string filename)";"Perform a partial request for the specified URI and return all info about it";"object";
"6";"Apache";"apache_note";"string apache_note(string note_name[, string note_value])";"Get and set apache request notes";"string";
"7";"Apache";"apache_request_headers";"array apache_request_headers()";"Fetch all HTTP request headers";"array";
"8";"Apache";"apache_response_headers";"array apache_response_headers()";"Fetch all HTTP response headers";"array";
"9";"Apache";"apache_setenv";"int apache_setenv(string variable, string value[, bool walk_to_top])";"Set an Apache subprocess_env variable";"int";
"10";"Apache";"ascii2ebcdic";"int ascii2ebcdic(string ascii_str)";"Translate string from ASCII to EBCDIC";"int";
"11";"Apache";"ebcdic2ascii";"int ebcdic2ascii(string ebcdic_str)";"Translate string from EBCDIC to ASCII";"int";
"12";"Apache";"getallheaders";"array getallheaders()";"Fetch all HTTP request headers";"array";
"13";"Apache";"virtual";"int virtual(string filename)";"Perform an Apache sub-request";"int";
"14";"Arrays";"array_change_key_case";"array array_change_key_case(array input[, int case])";"Returns an array with all string keys lowercased or uppercased";"array";
"15";"Arrays";"array_chunk";"array array_chunk(array input, int size[, bool preserve_keys])";"Split an array into chunks";"array";
"16";"Arrays";"array_combine";"array array_combine(array keys, array values)";"Creates an array by using one array for keys and another for its values";"array";
"17";"Arrays";"array_count_values";"array array_count_values(array input)";"Counts all the values of an array";"array";
"18";"Arrays";"array_diff_assoc";"array array_diff_assoc(array array1, array array2[, array  ...])";"Computes the difference of arrays with additional index check";"array";
"19";"Arrays";"array_diff_uassoc";"array array_diff_uassoc(array array1, array array2[, array ..., callback key_compare_func])";"Computes the difference of arrays with additional index check which is performed by a user supplied callback function";"array";
"20";"Arrays";"array_diff";"array array_diff(array array1, array array2[, array  ...])";"Computes the difference of arrays";"array";
"21";"Arrays";"array_fill";"array array_fill(int start_index, int num, mixed value)";"Fill an array with values";"array";
"22";"Arrays";"array_filter";"array array_filter(array input[, callback callback])";"Filters elements of an array using a callback function";"array";
"23";"Arrays";"array_flip";"array array_flip(array trans)";"Exchanges all keys with their associated values in an array";"array";
"24";"Arrays";"array_intersect_assoc";"array array_intersect_assoc(array array1, array array2[, array  ...])";"Computes the intersection of arrays with additional index check";"array";
"25";"Arrays";"array_intersect";"array array_intersect(array array1, array array2[, array  ...])";"Computes the intersection of arrays";"array";
"26";"Arrays";"array_key_exists";"bool array_key_exists(mixed key, array search)";"Checks if the given key or index exists in the array";"bool";
"27";"Arrays";"array_keys";"array array_keys(array input[, mixed search_value])";"Return all the keys of an array";"array";
"28";"Arrays";"array_map";"array array_map(mixed callback, array arr1[, array ...])";"Applies the callback to the elements of the given arrays";"array";
"29";"Arrays";"array_merge_recursive";"array array_merge_recursive(array array1, array array2[, array ...])";"Merge two or more arrays recursively";"array";
"30";"Arrays";"array_merge";"array array_merge(array array1[, array array2[, array ...]])";"Merge one or more arrays";"array";
"31";"Arrays";"array_multisort";"bool array_multisort(array ar1[, mixed arg[, mixed ...[, array ...]]])";"Sort multiple or multi-dimensional arrays";"bool";
"32";"Arrays";"array_pad";"array array_pad(array input, int pad_size, mixed pad_value)";"Pad array to the specified length with a value";"array";
"33";"Arrays";"array_pop";"mixed array_pop(array array)";"Pop the element off the end of array";"mixed";
"34";"Arrays";"array_push";"int array_push(array array, mixed var[, mixed ...])";"Push one or more elements onto the end of array";"int";
"35";"Arrays";"array_rand";"mixed array_rand(array input[, int num_req])";"Pick one or more random entries out of an array";"mixed";
"36";"Arrays";"array_reduce";"mixed array_reduce(array input, callback function[, int initial])";"Iteratively reduce the array to a single value using a callback function";"mixed";
"37";"Arrays";"array_reverse";"array array_reverse(array array[, bool preserve_keys])";"Return an array with elements in reverse order";"array";
"38";"Arrays";"array_search";"mixed array_search(mixed needle, array haystack[, bool strict])";"Searches the array for a given value and returns the corresponding key if successful";"mixed";
"39";"Arrays";"array_shift";"mixed array_shift(array array)";"Shift an element off the beginning of array";"mixed";
"40";"Arrays";"array_slice";"array array_slice(array array, int offset[, int length])";"Extract a slice of the array";"array";
"41";"Arrays";"array_splice";"array array_splice(array input, int offset[, int length[, array replacement]])";"Remove a portion of the array and replace it with something else";"array";
"42";"Arrays";"array_sum";"mixed array_sum(array array)";"Calculate the sum of values in an array.";"mixed";
"43";"Arrays";"array_udiff_assoc";"array array_udiff_assoc(array array1, array array2[, array  ..., callback data_compare_func])";"Computes the difference of arrays with additional index check. The data is compared by using a callback function.";"array";
"44";"Arrays";"array_udiff_uassoc";"array array_udiff_uassoc(array array1, array array2[, array  ..., callback data_compare_func, callback key_compare_func])";"Computes the difference of arrays with additional index check. The data is compared by using a callback function. The index check is done by a callback function also";"array";
"45";"Arrays";"array_udiff";"array array_udiff(array array1, array array2[, array  ..., callback data_compare_func])";"Computes the difference of arrays by using a callback function for data comparison.";"array";
"46";"Arrays";"array_unique";"array array_unique(array array)";"Removes duplicate values from an array";"array";
"47";"Arrays";"array_unshift";"int array_unshift(array array, mixed var[, mixed])";"Prepend one or more elements to the beginning of an array";"int";
"48";"Arrays";"array_values";"array array_values(array input)";"Return all the values of an array";"array";
"49";"Arrays";"array_walk_recursive";"bool array_walk_recursive(array input, string funcname[, mixed userdata])";"Apply a user function recursively to every member of an array";"bool";
"50";"Arrays";"array_walk";"bool array_walk(array array, callback function[, mixed userdata])";"Apply a user function to every member of an array";"bool";
"51";"Arrays";"array";"array array([mixed ...])";"Create an array";"array";
"52";"Arrays";"arsort";"bool arsort(array array[, int sort_flags])";"Sort an array in reverse order and maintain index association";"bool";
"53";"Arrays";"asort";"bool asort(array array[, int sort_flags])";"Sort an array and maintain index association";"bool";
"54";"Arrays";"compact";"array compact(mixed varname[, mixed ...])";"Create array containing variables and their values";"array";
"55";"Arrays";"count";"int count(mixed var[, int mode])";"Count elements in a variable";"int";
"56";"Arrays";"current";"mixed current(array array)";"Return the current element in an array";"mixed";
"57";"Arrays";"each";"array each(array array)";"Return the current key and value pair from an array and advance the array cursor";"array";
"58";"Arrays";"end";"mixed end(array array)";"Set the internal pointer of an array to its last element";"mixed";
"59";"Arrays";"extract";"int extract(array var_array[, int extract_type[, string prefix]])";"Import variables into the current symbol table from an array";"int";
"60";"Arrays";"in_array";"bool in_array(mixed needle, array haystack[, bool strict])";"Checks if a value exists in an array";"bool";
"61";"Arrays";"key";"mixed key(array array)";"Fetch a key from an associative array";"mixed";
"62";"Arrays";"krsort";"bool krsort(array array[, int sort_flags])";"Sort an array by key in reverse order";"bool";
"63";"Arrays";"ksort";"bool ksort(array array[, int sort_flags])";"Sort an array by key";"bool";
"64";"Arrays";"list";"void list(mixed varname, mixed ...)";"Assign variables as if they were an array";"void";
"65";"Arrays";"natcasesort";"void natcasesort(array array)";"Sort an array using a case insensitive natural order algorithm";"void";
"66";"Arrays";"natsort";"void natsort(array array)";"Sort an array using a natural order algorithm";"void";
"67";"Arrays";"next";"mixed next(array array)";"Advance the internal array pointer of an array";"mixed";
"68";"Arrays";"pos";;"Alias of current";;
"69";"Arrays";"prev";"mixed prev(array array)";"Rewind the internal array pointer";"mixed";
"70";"Arrays";"range";"array range(int low, int high[, int step])";"Create an array containing a range of elements";"array";
"71";"Arrays";"reset";"mixed reset(array array)";"Set the internal pointer of an array to its first element";"mixed";
"72";"Arrays";"rsort";"bool rsort(array array[, int sort_flags])";"Sort an array in reverse order";"bool";
"73";"Arrays";"shuffle";"bool shuffle(array array)";"Shuffle an array";"bool";
"74";"Arrays";"sizeof";;"Alias of count";;
"75";"Arrays";"sort";"bool sort(array array[, int sort_flags])";"Sort an array";"bool";
"76";"Arrays";"uasort";"bool uasort(array array, callback cmp_function)";"Sort an array with a user-defined comparison function and maintain index association";"bool";
"77";"Arrays";"uksort";"bool uksort(array array, callback cmp_function)";"Sort an array by keys using a user-defined comparison function";"bool";
"78";"Arrays";"usort";"bool usort(array array, callback cmp_function)";"Sort an array by values using a user-defined comparison function";"bool";
"79";"Aspell";"aspell_check_raw";"bool aspell_check_raw(int dictionary_link, string word)";"Check a word without changing its case or trying to trim it [deprecated]";"bool";
"80";"Aspell";"aspell_check";"bool aspell_check(int dictionary_link, string word)";"Check a word [deprecated]";"bool";
"81";"Aspell";"aspell_new";"int aspell_new(string master[, string personal])";"Load a new dictionary [deprecated]";"int";
"82";"Aspell";"aspell_suggest";"array aspell_suggest(int dictionary_link, string word)";"Suggest spellings of a word [deprecated]";"array";
"83";"BC math";"bcadd";"string bcadd(string left_operand, string right_operand[, int scale])";"Add two arbitrary precision numbers";"string";
"84";"BC math";"bccomp";"int bccomp(string left_operand, string right_operand[, int scale])";"Compare two arbitrary precision numbers";"int";
"85";"BC math";"bcdiv";"string bcdiv(string left_operand, string right_operand[, int scale])";"Divide two arbitrary precision numbers";"string";
"86";"BC math";"bcmod";"string bcmod(string left_operand, string modulus)";"Get modulus of an arbitrary precision number";"string";
"87";"BC math";"bcmul";"string bcmul(string left_operand, string right_operand[, int scale])";"Multiply two arbitrary precision number";"string";
"88";"BC math";"bcpow";"string bcpow(string x, string y[, int scale])";"Raise an arbitrary precision number to another";"string";
"89";"BC math";"bcpowmod";"string bcpowmod(string x, string y, string modulus[, int scale])";"Raise an arbitrary precision number to another, reduced by a specified modulus.";"string";
"90";"BC math";"bcscale";"bool bcscale(int scale)";"Set default scale parameter for all bc math functions";"bool";
"91";"BC math";"bcsqrt";"string bcsqrt(string operand[, int scale])";"Get the square root of an arbitrary precision number";"string";
"92";"BC math";"bcsub";"string bcsub(string left_operand, string right_operand[, int scale])";"Subtract one arbitrary precision number from another";"string";
"93";"Bzip2";"bzclose";"int bzclose(resource bz)";"Close a bzip2 file pointer";"int";
"94";"Bzip2";"bzcompress";"string bzcompress(string source[, int blocksize[, int workfactor]])";"Compress a string into bzip2 encoded data";"string";
"95";"Bzip2";"bzdecompress";"string bzdecompress(string source[, int small])";"Decompresses bzip2 encoded data";"string";
"96";"Bzip2";"bzerrno";"int bzerrno(resource bz)";"Returns a bzip2 error number";"int";
"97";"Bzip2";"bzerror";"array bzerror(resource bz)";"Returns the bzip2 error number and error string in an array";"array";
"98";"Bzip2";"bzerrstr";"string bzerrstr(resource bz)";"Returns a bzip2 error string";"string";
"99";"Bzip2";"bzflush";"int bzflush(resource bz)";"Force a write of all buffered data";"int";
"100";"Bzip2";"bzopen";"resource bzopen(string filename, string mode)";"Opens a bzip2 compressed file";"resource";
"101";"Bzip2";"bzread";"string bzread(resource bz[, int length])";"Binary safe bzip2 file read";"string";
"102";"Bzip2";"bzwrite";"int bzwrite(resource bz, string data[, int length])";"Binary safe bzip2 file write";"int";
"103";"Calendar";"cal_days_in_month";"int cal_days_in_month(int calendar, int month, int year)";"Return the number of days in a month for a given year and calendar";"int";
"104";"Calendar";"cal_from_jd";"array cal_from_jd(int jd, int calendar)";"Converts from Julian Day Count to a supported calendar";"array";
"105";"Calendar";"cal_info";"array cal_info([int calendar])";"Returns information about a particular calendar";"array";
"106";"Calendar";"cal_to_jd";"int cal_to_jd(int calendar, int month, int day, int year)";"Converts from a supported calendar to Julian Day Count";"int";
"107";"Calendar";"easter_date";"int easter_date([int year])";"Get Unix timestamp for midnight on Easter of a given year";"int";
"108";"Calendar";"easter_days";"int easter_days([int year[, int method]])";"Get number of days after March 21 on which Easter falls for a given year";"int";
"109";"Calendar";"FrenchToJD";"int frenchtojd(int month, int day, int year)";"Converts a date from the French Republican Calendar to a Julian Day Count";"int";
"110";"Calendar";"GregorianToJD";"int gregoriantojd(int month, int day, int year)";"Converts a Gregorian date to Julian Day Count";"int";
"111";"Calendar";"JDDayOfWeek";"mixed jddayofweek(int julianday, int mode)";"Returns the day of the week";"mixed";
"112";"Calendar";"JDMonthName";"string jdmonthname(int julianday, int mode)";"Returns a month name";"string";
"113";"Calendar";"JDToFrench";"string jdtofrench(int juliandaycount)";"Converts a Julian Day Count to the French Republican Calendar";"string";
"114";"Calendar";"JDToGregorian";"string jdtogregorian(int julianday)";"Converts Julian Day Count to Gregorian date";"string";
"115";"Calendar";"jdtojewish";"string jdtojewish(int juliandaycount[, bool hebrew[, int fl]])";"Converts a Julian day count to a Jewish calendar date";"string";
"116";"Calendar";"JDToJulian";"string jdtojulian(int julianday)";"Converts a Julian Day Count to a Julian Calendar Date";"string";
"117";"Calendar";"jdtounix";"int jdtounix(int jday)";"Convert Julian Day to Unix timestamp";"int";
"118";"Calendar";"JewishToJD";"int jewishtojd(int month, int day, int year)";"Converts a date in the Jewish Calendar to Julian Day Count";"int";
"119";"Calendar";"JulianToJD";"int juliantojd(int month, int day, int year)";"Converts a Julian Calendar date to Julian Day Count";"int";
"120";"Calendar";"unixtojd";"int unixtojd([int timestamp])";"Convert Unix timestamp to Julian Day";"int";
"121";"CCVS";"ccvs_add";"string ccvs_add(string session, string invoice, string argtype, string argval)";"Add data to a transaction";"string";
"122";"CCVS";"ccvs_auth";"string ccvs_auth(string session, string invoice)";"Perform credit authorization test on a transaction";"string";
"123";"CCVS";"ccvs_command";"string ccvs_command(string session, string type, string argval)";"Performs a command which is peculiar to a single protocol, and thus is not available in the general CCVS API";"string";
"124";"CCVS";"ccvs_count";"int ccvs_count(string session, string type)";"Find out how many transactions of a given type are stored in the system";"int";
"125";"CCVS";"ccvs_delete";"string ccvs_delete(string session, string invoice)";"Delete a transaction";"string";
"126";"CCVS";"ccvs_done";"string ccvs_done(string sess)";"Terminate CCVS engine and do cleanup work";"string";
"127";"CCVS";"ccvs_init";"string ccvs_init(string name)";"Initialize CCVS for use";"string";
"128";"CCVS";"ccvs_lookup";"string ccvs_lookup(string session, string invoice, int inum)";"Look up an item of a particular type in the database #";"string";
"129";"CCVS";"ccvs_new";"string ccvs_new(string session, string invoice)";"Create a new, blank transaction";"string";
"130";"CCVS";"ccvs_report";"string ccvs_report(string session, string type)";"Return the status of the background communication process";"string";
"131";"CCVS";"ccvs_return";"string ccvs_return(string session, string invoice)";"Transfer funds from the merchant to the credit card holder";"string";
"132";"CCVS";"ccvs_reverse";"string ccvs_reverse(string session, string invoice)";"Perform a full reversal on an already-processed authorization";"string";
"133";"CCVS";"ccvs_sale";"string ccvs_sale(string session, string invoice)";"Transfer funds from the credit card holder to the merchant";"string";
"134";"CCVS";"ccvs_status";"string ccvs_status(string session, string invoice)";"Check the status of an invoice";"string";
"135";"CCVS";"ccvs_textvalue";"string ccvs_textvalue(string session)";"Get text return value for previous function call";"string";
"136";"CCVS";"ccvs_void";"string ccvs_void(string session, string invoice)";"Perform a full reversal on a completed transaction";"string";
"137";"COM";"COM";"object COM::COM(string module_name[, mixed server_name[, int codepage[, string typelib]]])void COM::AddRef()void COM::Release()object COM::All()object COM::Next()object COM::Prev()void COM::Reset()";"COM class";"object";
"138";"COM";"DOTNET";"string DOTNET::DOTNET(string assembly name, string class_name[, int codepage])";"DOTNET class";"string";
"139";"COM";"VARIANT";"object VARIANT::VARIANT([mixed value[, int type[, int codepage]]])";"VARIANT class";"object";
"140";"COM";"com_addref";"void com_addref()";"Increases the components reference counter [deprecated]";"void";
"141";"COM";"com_create_guid";"string com_create_guid()";"Generate a globally unique identifier (GUID)";"string";
"142";"COM";"com_event_sink";"bool com_event_sink(object comobject, object sinkobject[, mixed sinkinterface])";"Connect events from a COM object to a PHP object";"bool";
"143";"COM";"com_get_active_object";"object com_get_active_object(string progid[, int code_page])";"Returns a handle to an already running instance of a COM object";"object";
"144";"COM";"com_isenum";"boolean com_isenum(object com_module)";"Indicates if a COM object has an IEnumVariant interface for iteration [deprecated]";"boolean";
"145";"COM";"com_load_typelib";"bool com_load_typelib(string typelib_name[, int case_insensitive])";"Loads a Typelib";"bool";
"146";"COM";"com_load";"resource com_load(string module_name[, string server_name [, int codepage]])";"Creates a new reference to a COM component [deprecated]";"resource";
"147";"COM";"com_message_pump";"bool com_message_pump([int timeoutms])";"Process COM messages, sleeping for up to timeoutms milliseconds";"bool";
"148";"COM";"com_print_typeinfo";"bool com_print_typeinfo(object comobject, string dispinterface, bool wantsink)";"Print out a PHP class definition for a dispatchable interface";"bool";
"149";"COM";"com_propget";;"Alias of com_get";;
"150";"COM";"com_propput";;"Alias of com_set";;
"151";"COM";"com_propset";;"Alias of com_set";;
"152";"COM";"com_release";"void com_release()";"Decreases the components reference counter [deprecated]";"void";
"153";"COM";"variant_abs";"mixed variant_abs(mixed val)";"Returns the absolute value of a variant";"mixed";
"154";"COM";"variant_add";"mixed variant_add(mixed left, mixed right)";"Adds two variant values together and returns the result";"mixed";
"155";"COM";"variant_and";"mixed variant_and(mixed left, mixed right)";"performs a bitwise AND operation between two variants and returns the result";"mixed";
"156";"COM";"variant_cast";"object variant_cast(object variant, int type)";"Convert a variant into a new variant object of another type";"object";
"157";"COM";"variant_cat";"mixed variant_cat(mixed left, mixed right)";"concatenates two variant values together and returns the result";"mixed";
"158";"COM";"variant_cmp";"int variant_cmp(mixed left, mixed right[, int lcid[, int flags]])";"Compares two variants";"int";
"159";"COM";"variant_date_from_timestamp";"object variant_date_from_timestamp(int timestamp)";"Returns a variant date representation of a unix timestamp";"object";
"160";"COM";"variant_date_to_timestamp";"int variant_date_to_timestamp(object variant)";"Converts a variant date/time value to unix timestamp";"int";
"161";"COM";"variant_div";"mixed variant_div(mixed left, mixed right)";"Returns the result from dividing two variants";"mixed";
"162";"COM";"variant_eqv";"mixed variant_eqv(mixed left, mixed right)";"Performs a bitwise equivalence on two variants";"mixed";
"163";"COM";"variant_fix";"mixed variant_fix(mixed variant)";"Returns the integer portion ? of a variant";"mixed";
"164";"COM";"variant_get_type";"int variant_get_type(object variant)";"Returns the type of a variant object";"int";
"165";"COM";"variant_idiv";"mixed variant_idiv(mixed left, mixed right)";"Converts variants to integers and then returns the result from dividing them";"mixed";
"166";"COM";"variant_imp";"mixed variant_imp(mixed left, mixed right)";"Performs a bitwise implication on two variants";"mixed";
"167";"COM";"variant_int";"mixed variant_int(mixed variant)";"Returns the integer portion of a variant";"mixed";
"168";"COM";"variant_mod";"mixed variant_mod(mixed left, mixed right)";"Divides two variants and returns only the remainder";"mixed";
"169";"COM";"variant_mul";"mixed variant_mul(mixed left, mixed right)";"multiplies the values of the two variants and returns the result";"mixed";
"170";"COM";"variant_neg";"mixed variant_neg(mixed variant)";"Performs logical negation on a variant";"mixed";
"171";"COM";"variant_not";"mixed variant_not(mixed variant)";"Performs bitwise not negation on a variant";"mixed";
"172";"COM";"variant_or";"mixed variant_or(mixed left, mixed right)";"Performs a logical disjunction on two variants";"mixed";
"173";"COM";"variant_pow";"mixed variant_pow(mixed left, mixed right)";"Returns the result of performing the power function with two variants";"mixed";
"174";"COM";"variant_round";"mixed variant_round(mixed variant, int decimals)";"Rounds a variant to the specified number of decimal places";"mixed";
"175";"COM";"variant_set_type";"void variant_set_type(object variant, int type)";"Convert a variant into another type. Variant is modified in-place";"void";
"176";"COM";"variant_set";"void variant_set(object variant, mixed value)";"Assigns a new value for a variant object";"void";
"177";"COM";"variant_sub";"mixed variant_sub(mixed left, mixed right)";"subtracts the value of the right variant from the left variant value and returns the result";"mixed";
"178";"COM";"variant_xor";"mixed variant_xor(mixed left, mixed right)";"Performs a logical exclusion on two variants";"mixed";
"179";"Classes/Objects";"call_user_method_array";"mixed call_user_method_array(string method_name, object obj[, array paramarr])";"Call a user method given with an array of parameters [deprecated]";"mixed";
"180";"Classes/Objects";"call_user_method";"mixed call_user_method(string method_name, object obj[, mixed parameter[, mixed ...]])";"Call a user method on an specific object [deprecated]";"mixed";
"181";"Classes/Objects";"class_exists";"bool class_exists(string class_name)";"Checks if the class has been defined";"bool";
"182";"Classes/Objects";"get_class_vars";"array get_class_vars(string class_name)";"Returns an array of default properties of the class";"array";
"183";"Classes/Objects";"get_class";"string get_class(object obj)";"Returns the name of the class of an object";"string";
"184";"Classes/Objects";"get_declared_classes";"array get_declared_classes()";"Returns an array with the name of the defined classes";"array";
"185";"Classes/Objects";"get_declared_interfaces";"array get_declared_interfaces()";"Returns an array of all declared interfaces.";"array";
"186";"Classes/Objects";"get_object_vars";"array get_object_vars(object obj)";"Returns an associative array of object properties";"array";
"187";"Classes/Objects";"get_parent_class";"string get_parent_class(mixed obj)";"Retrieves the parent class name for object or class";"string";
"188";"Classes/Objects";"is_a";"bool is_a(object object, string class_name)";"Returns TRUE if the object is of this class or has this class as one of its parents";"bool";
"189";"Classes/Objects";"is_subclass_of";"bool is_subclass_of(object object, string class_name)";"Returns TRUE if the object has this class as one of its parents";"bool";
"190";"Classes/Objects";"method_exists";"bool method_exists(object object, string method_name)";"Checks if the class method exists";"bool";
"191";"ClibPDF";"cpdf_add_annotation";"bool cpdf_add_annotation(int pdf_document, float llx, float lly, float urx, float ury, string title, string content[, int mode])";"Adds annotation";"bool";
"192";"ClibPDF";"cpdf_add_outline";"int cpdf_add_outline(int pdf_document, int lastoutline, int sublevel, int open, int pagenr, string text)";"Adds bookmark for current page";"int";
"193";"ClibPDF";"cpdf_arc";"bool cpdf_arc(int pdf_document, float x-coor, float y-coor, float radius, float start, float end[, int mode])";"Draws an arc";"bool";
"194";"ClibPDF";"cpdf_begin_text";"bool cpdf_begin_text(int pdf_document)";"Starts text section";"bool";
"195";"ClibPDF";"cpdf_circle";"bool cpdf_circle(int pdf_document, float x-coor, float y-coor, float radius[, int mode])";"Draw a circle";"bool";
"196";"ClibPDF";"cpdf_clip";"bool cpdf_clip(int pdf_document)";"Clips to current path";"bool";
"197";"ClibPDF";"cpdf_close";"bool cpdf_close(int pdf_document)";"Closes the pdf document";"bool";
"198";"ClibPDF";"cpdf_closepath_fill_stroke";"bool cpdf_closepath_fill_stroke(int pdf_document)";"Close, fill and stroke current path";"bool";
"199";"ClibPDF";"cpdf_closepath_stroke";"bool cpdf_closepath_stroke(int pdf_document)";"Close path and draw line along path";"bool";
"200";"ClibPDF";"cpdf_closepath";"bool cpdf_closepath(int pdf_document)";"Close path";"bool";
"201";"ClibPDF";"cpdf_continue_text";"bool cpdf_continue_text(int pdf_document, string text)";"Output text in next line";"bool";
"202";"ClibPDF";"cpdf_curveto";"bool cpdf_curveto(int pdf_document, float x1, float y1, float x2, float y2, float x3, float y3[, int mode])";"Draws a curve";"bool";
"203";"ClibPDF";"cpdf_end_text";"bool cpdf_end_text(int pdf_document)";"Ends text section";"bool";
"204";"ClibPDF";"cpdf_fill_stroke";"bool cpdf_fill_stroke(int pdf_document)";"Fill and stroke current path";"bool";
"205";"ClibPDF";"cpdf_fill";"bool cpdf_fill(int pdf_document)";"Fill current path";"bool";
"206";"ClibPDF";"cpdf_finalize_page";"bool cpdf_finalize_page(int pdf_document, int page_number)";"Ends page";"bool";
"207";"ClibPDF";"cpdf_finalize";"bool cpdf_finalize(int pdf_document)";"Ends document";"bool";
"208";"ClibPDF";"cpdf_global_set_document_limits";"bool cpdf_global_set_document_limits(int maxpages, int maxfonts, int maximages, int maxannotations, int maxobjects)";"Sets document limits for any pdf document";"bool";
"209";"ClibPDF";"cpdf_import_jpeg";"int cpdf_import_jpeg(int pdf_document, string file_name, float x-coor, float y-coor, float angle, float width, float height, float x-scale, float y-scale, int gsave[, int mode])";"Opens a JPEG image";"int";
"210";"ClibPDF";"cpdf_lineto";"bool cpdf_lineto(int pdf_document, float x-coor, float y-coor[, int mode])";"Draws a line";"bool";
"211";"ClibPDF";"cpdf_moveto";"bool cpdf_moveto(int pdf_document, float x-coor, float y-coor[, int mode])";"Sets current point";"bool";
"212";"ClibPDF";"cpdf_newpath";"bool cpdf_newpath(int pdf_document)";"Starts a new path";"bool";
"213";"ClibPDF";"cpdf_open";"int cpdf_open(int compression[, string filename])";"Opens a new pdf document";"int";
"214";"ClibPDF";"cpdf_output_buffer";"bool cpdf_output_buffer(int pdf_document)";"Outputs the pdf document in memory buffer";"bool";
"215";"ClibPDF";"cpdf_page_init";"bool cpdf_page_init(int pdf_document, int page_number, int orientation, float height, float width[, float unit])";"Starts new page";"bool";
"216";"ClibPDF";"cpdf_place_inline_image";"bool cpdf_place_inline_image(int pdf_document, int image, float x-coor, float y-coor, float angle, float width, float height[, int mode])";"Places an image on the page";"bool";
"217";"ClibPDF";"cpdf_rect";"bool cpdf_rect(int pdf_document, float x-coor, float y-coor, float width, float height[, int mode])";"Draw a rectangle";"bool";
"218";"ClibPDF";"cpdf_restore";"bool cpdf_restore(int pdf_document)";"Restores formerly saved environment";"bool";
"219";"ClibPDF";"cpdf_rlineto";"bool cpdf_rlineto(int pdf_document, float x-coor, float y-coor[, int mode])";"Draws a line";"bool";
"220";"ClibPDF";"cpdf_rmoveto";"bool cpdf_rmoveto(int pdf_document, float x-coor, float y-coor[, int mode])";"Sets current point";"bool";
"221";"ClibPDF";"cpdf_rotate_text";"bool cpdf_rotate_text(int pdfdoc, float angle)";"Sets text rotation angle";"bool";
"222";"ClibPDF";"cpdf_rotate";"bool cpdf_rotate(int pdf_document, float angle)";"Sets rotation";"bool";
"223";"ClibPDF";"cpdf_save_to_file";"bool cpdf_save_to_file(int pdf_document, string filename)";"Writes the pdf document into a file";"bool";
"224";"ClibPDF";"cpdf_save";"bool cpdf_save(int pdf_document)";"Saves current environment";"bool";
"225";"ClibPDF";"cpdf_scale";"bool cpdf_scale(int pdf_document, float x-scale, float y-scale)";"Sets scaling";"bool";
"226";"ClibPDF";"cpdf_set_action_url";"bool cpdf_set_action_url(int pdfdoc, float xll, float yll, float xur, float xur, string url[, int mode])";"Sets hyperlink";"bool";
"227";"ClibPDF";"cpdf_set_char_spacing";"bool cpdf_set_char_spacing(int pdf_document, float space)";"Sets character spacing";"bool";
"228";"ClibPDF";"cpdf_set_creator";"bool cpdf_set_creator(int pdf_document, string creator)";"Sets the creator field in the pdf document";"bool";
"229";"ClibPDF";"cpdf_set_current_page";"bool cpdf_set_current_page(int pdf_document, int page_number)";"Sets current page";"bool";
"230";"ClibPDF";"cpdf_set_font_directories";"bool cpdf_set_font_directories(int pdfdoc, string pfmdir, string pfbdir)";"Sets directories to search when using external fonts";"bool";
"231";"ClibPDF";"cpdf_set_font_map_file";"bool cpdf_set_font_map_file(int pdfdoc, string filename)";"Sets fontname to filename translation map when using external fonts";"bool";
"232";"ClibPDF";"cpdf_set_font";"bool cpdf_set_font(int pdf_document, string font_name, float size, string encoding)";"Select the current font face and size";"bool";
"233";"ClibPDF";"cpdf_set_horiz_scaling";"bool cpdf_set_horiz_scaling(int pdf_document, float scale)";"Sets horizontal scaling of text";"bool";
"234";"ClibPDF";"cpdf_set_keywords";"bool cpdf_set_keywords(int pdf_document, string keywords)";"Sets the keywords field of the pdf document";"bool";
"235";"ClibPDF";"cpdf_set_leading";"bool cpdf_set_leading(int pdf_document, float distance)";"Sets distance between text lines";"bool";
"236";"ClibPDF";"cpdf_set_page_animation";"bool cpdf_set_page_animation(int pdf_document, int transition, float duration)";"Sets duration between pages";"bool";
"237";"ClibPDF";"cpdf_set_subject";"bool cpdf_set_subject(int pdf_document, string subject)";"Sets the subject field of the pdf document";"bool";
"238";"ClibPDF";"cpdf_set_text_matrix";"bool cpdf_set_text_matrix(int pdf_document, array matrix)";"Sets the text matrix";"bool";
"239";"ClibPDF";"cpdf_set_text_pos";"bool cpdf_set_text_pos(int pdf_document, float x-coor, float y-coor[, int mode])";"Sets text position";"bool";
"240";"ClibPDF";"cpdf_set_text_rendering";"bool cpdf_set_text_rendering(int pdf_document, int rendermode)";"Determines how text is rendered";"bool";
"241";"ClibPDF";"cpdf_set_text_rise";"bool cpdf_set_text_rise(int pdf_document, float value)";"Sets the text rise";"bool";
"242";"ClibPDF";"cpdf_set_title";"bool cpdf_set_title(int pdf_document, string title)";"Sets the title field of the pdf document";"bool";
"243";"ClibPDF";"cpdf_set_viewer_preferences";"bool cpdf_set_viewer_preferences(int pdfdoc, array preferences)";"How to show the document in the viewer";"bool";
"244";"ClibPDF";"cpdf_set_word_spacing";"bool cpdf_set_word_spacing(int pdf_document, float space)";"Sets spacing between words";"bool";
"245";"ClibPDF";"cpdf_setdash";"bool cpdf_setdash(int pdf_document, float white, float black)";"Sets dash pattern";"bool";
"246";"ClibPDF";"cpdf_setflat";"bool cpdf_setflat(int pdf_document, float value)";"Sets flatness";"bool";
"247";"ClibPDF";"cpdf_setgray_fill";"bool cpdf_setgray_fill(int pdf_document, float value)";"Sets filling color to gray value";"bool";
"248";"ClibPDF";"cpdf_setgray_stroke";"bool cpdf_setgray_stroke(int pdf_document, float gray_value)";"Sets drawing color to gray value";"bool";
"249";"ClibPDF";"cpdf_setgray";"bool cpdf_setgray(int pdf_document, float gray_value)";"Sets drawing and filling color to gray value";"bool";
"250";"ClibPDF";"cpdf_setlinecap";"bool cpdf_setlinecap(int pdf_document, int value)";"Sets linecap parameter";"bool";
"251";"ClibPDF";"cpdf_setlinejoin";"bool cpdf_setlinejoin(int pdf_document, int value)";"Sets linejoin parameter";"bool";
"252";"ClibPDF";"cpdf_setlinewidth";"bool cpdf_setlinewidth(int pdf_document, float width)";"Sets line width";"bool";
"253";"ClibPDF";"cpdf_setmiterlimit";"bool cpdf_setmiterlimit(int pdf_document, float value)";"Sets miter limit";"bool";
"254";"ClibPDF";"cpdf_setrgbcolor_fill";"bool cpdf_setrgbcolor_fill(int pdf_document, float red_value, float green_value, float blue_value)";"Sets filling color to rgb color value";"bool";
"255";"ClibPDF";"cpdf_setrgbcolor_stroke";"bool cpdf_setrgbcolor_stroke(int pdf_document, float red_value, float green_value, float blue_value)";"Sets drawing color to rgb color value";"bool";
"256";"ClibPDF";"cpdf_setrgbcolor";"bool cpdf_setrgbcolor(int pdf_document, float red_value, float green_value, float blue_value)";"Sets drawing and filling color to rgb color value";"bool";
"257";"ClibPDF";"cpdf_show_xy";"bool cpdf_show_xy(int pdf_document, string text, float x-coor, float y-coor[, int mode])";"Output text at position";"bool";
"258";"ClibPDF";"cpdf_show";"bool cpdf_show(int pdf_document, string text)";"Output text at current position";"bool";
"259";"ClibPDF";"cpdf_stringwidth";"float cpdf_stringwidth(int pdf_document, string text)";"Returns width of text in current font";"float";
"260";"ClibPDF";"cpdf_stroke";"bool cpdf_stroke(int pdf_document)";"Draw line along path";"bool";
"261";"ClibPDF";"cpdf_text";"bool cpdf_text(int pdf_document, string text, float x-coor, float y-coor[, int mode[, float orientation[, int alignmode]]])";"Output text with parameters";"bool";
"262";"ClibPDF";"cpdf_translate";"bool cpdf_translate(int pdf_document, float x-coor, float y-coor[, int mode])";"Sets origin of coordinate system";"bool";
"263";"Crack";"crack_check";"bool crack_check([resource dictionary, string password])";"Performs an obscure check with the given password";"bool";
"264";"Crack";"crack_closedict";"bool crack_closedict([resource dictionary])";"Closes an open CrackLib dictionary";"bool";
"265";"Crack";"crack_getlastmessage";"string crack_getlastmessage()";"Returns the message from the last obscure check";"string";
"266";"Crack";"crack_opendict";"resource crack_opendict(string dictionary)";"Opens a new CrackLib dictionary";"resource";
"267";"CURL";"curl_close";"void curl_close(resource ch)";"Close a CURL session";"void";
"268";"CURL";"curl_errno";"int curl_errno(resource ch)";"Return the last error number";"int";
"269";"CURL";"curl_error";"string curl_error(resource ch)";"Return a string containing the last error for the current session";"string";
"270";"CURL";"curl_exec";"mixed curl_exec(resource ch)";"Perform a CURL session";"mixed";
"271";"CURL";"curl_getinfo";"string curl_getinfo(resource ch[, int opt])";"Get information regarding a specific transfer";"string";
"272";"CURL";"curl_init";"resource curl_init([string url])";"Initialize a CURL session";"resource";
"273";"CURL";"curl_multi_add_handle";"int curl_multi_add_handle(resource mh, resource ch)";"Add a normal cURL handle to a cURL multi handle";"int";
"274";"CURL";"curl_multi_close";"void curl_multi_close(resource mh)";"Close a set of cURL handles";"void";
"275";"CURL";"curl_multi_exec";"int curl_multi_exec(resource mh)";"Run the sub-connections of the current cURL handle";"int";
"276";"CURL";"curl_multi_getcontent";"string curl_multi_getcontent(resource ch)";"Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set";"string";
"277";"CURL";"curl_multi_info_read";"array curl_multi_info_read(resource mh)";"Get information about the current transfers";"array";
"278";"CURL";"curl_multi_init";"resource curl_multi_init()";"Returns a new cURL multi handle";"resource";
"279";"CURL";"curl_multi_remove_handle";"int curl_multi_remove_handle(resource mh, resource ch)";"Remove a multi handle from a set of cURL handles";"int";
"280";"CURL";"curl_multi_select";"int curl_multi_select(resource mh[, float timeout])";"Get all the sockets associated with the cURL extension, which can then be selected";"int";
"281";"CURL";"curl_setopt";"bool curl_setopt(resource ch, string option, mixed value)";"Set an option for a CURL transfer";"bool";
"282";"CURL";"curl_version";"string curl_version()";"Return the current CURL version";"string";
"283";"Cybercash";"cybercash_base64_decode";"string cybercash_base64_decode(string inbuff)";"base64 decode data for Cybercash";"string";
"284";"Cybercash";"cybercash_base64_encode";"string cybercash_base64_encode(string inbuff)";"base64 encode data for Cybercash";"string";
"285";"Cybercash";"cybercash_decr";"array cybercash_decr(string wmk, string sk, string inbuff)";"Cybercash decrypt";"array";
"286";"Cybercash";"cybercash_encr";"array cybercash_encr(string wmk, string sk, string inbuff)";"Cybercash encrypt";"array";
"287";"Cyrus IMAP";"cyrus_authenticate";"bool cyrus_authenticate(resource connection[, string mechlist[, string service[, string user[, int minssf[, int maxssf]]]]])";"Authenticate against a Cyrus IMAP server";"bool";
"288";"Cyrus IMAP";"cyrus_bind";"bool cyrus_bind(resource connection, array callbacks)";"Bind callbacks to a Cyrus IMAP connection";"bool";
"289";"Cyrus IMAP";"cyrus_close";"bool cyrus_close(resource connection)";"Close connection to a Cyrus IMAP server";"bool";
"290";"Cyrus IMAP";"cyrus_connect";"resource cyrus_connect([string host[, string port[, int flags]]])";"Connect to a Cyrus IMAP server";"resource";
"291";"Cyrus IMAP";"cyrus_query";"bool cyrus_query(resource connection, string query)";"Send a query to a Cyrus IMAP server";"bool";
"292";"Cyrus IMAP";"cyrus_unbind";"bool cyrus_unbind(resource connection, string trigger_name)";"Unbind ...";"bool";
"293";"ctype";"ctype_alnum";"bool ctype_alnum(string text)";"Check for alphanumeric character(s)";"bool";
"294";"ctype";"ctype_alpha";"bool ctype_alpha(string text)";"Check for alphabetic character(s)";"bool";
"295";"ctype";"ctype_cntrl";"bool ctype_cntrl(string text)";"Check for control character(s)";"bool";
"296";"ctype";"ctype_digit";"bool ctype_digit(string text)";"Check for numeric character(s)";"bool";
"297";"ctype";"ctype_graph";"bool ctype_graph(string text)";"Check for any printable character(s) except space";"bool";
"298";"ctype";"ctype_lower";"bool ctype_lower(string text)";"Check for lowercase character(s)";"bool";
"299";"ctype";"ctype_print";"bool ctype_print(string text)";"Check for printable character(s)";"bool";
"300";"ctype";"ctype_punct";"bool ctype_punct(string text)";"Check for any printable character which is not whitespace or an alphanumeric character";"bool";
"301";"ctype";"ctype_space";"bool ctype_space(string text)";"Check for whitespace character(s)";"bool";
"302";"ctype";"ctype_upper";"bool ctype_upper(string text)";"Check for uppercase character(s)";"bool";
"303";"ctype";"ctype_xdigit";"bool ctype_xdigit(string text)";"Check for character(s) representing a hexadecimal digit";"bool";
"304";"dba";"dba_close";"void dba_close(resource handle)";"Close a DBA database";"void";
"305";"dba";"dba_delete";"bool dba_delete(string key, resource handle)";"Delete DBA entry specified by key";"bool";
"306";"dba";"dba_exists";"bool dba_exists(string key, resource handle)";"Check whether key exists";"bool";
"307";"dba";"dba_fetch";"string dba_fetch(string key, resource handle)string dba_fetch(string key, int skip, resource handle)";"Fetch data specified by key";"string";
"308";"dba";"dba_firstkey";"string dba_firstkey(resource handle)";"Fetch first key";"string";
"309";"dba";"dba_handlers";"array dba_handlers()";"List handlers available";"array";
"310";"dba";"dba_insert";"bool dba_insert(string key, string value, resource handle)";"Insert entry";"bool";
"311";"dba";"dba_key_split";"mixed dba_key_split(mixed key)";"Splits a key in string representation into array representation";"mixed";
"312";"dba";"dba_list";"array dba_list()";"List all open database files";"array";
"313";"dba";"dba_nextkey";"string dba_nextkey(resource handle)";"Fetch next key";"string";
"314";"dba";"dba_open";"resource dba_open(string path, string mode, string handler[,  ...])";"Open database";"resource";
"315";"dba";"dba_optimize";"bool dba_optimize(resource handle)";"Optimize database";"bool";
"316";"dba";"dba_popen";"resource dba_popen(string path, string mode, string handler[,  ...])";"Open database persistently";"resource";
"317";"dba";"dba_replace";"bool dba_replace(string key, string value, resource handle)";"Replace or insert entry";"bool";
"318";"dba";"dba_sync";"bool dba_sync(resource handle)";"Synchronize database";"bool";
"319";"Date/Time";"checkdate";"bool checkdate(int month, int day, int year)";"Validate a Gregorian date";"bool";
"320";"Date/Time";"date";"string date(string format[, int timestamp])";"Format a local time/date";"string";
"321";"Date/Time";"getdate";"array getdate([int timestamp])";"Get date/time information";"array";
"322";"Date/Time";"gettimeofday";"array gettimeofday()";"Get current time";"array";
"323";"Date/Time";"gmdate";"string gmdate(string format[, int timestamp])";"Format a GMT/UTC date/time";"string";
"324";"Date/Time";"gmmktime";"int gmmktime([int hour[, int minute[, int second[, int month[, int day[, int year[, int is_dst]]]]]]])";"Get Unix timestamp for a GMT date";"int";
"325";"Date/Time";"gmstrftime";"string gmstrftime(string format[, int timestamp])";"Format a GMT/UTC time/date according to locale settings";"string";
"326";"Date/Time";"idate";"int idate(string format[, int timestamp])";"Format a local time/date as integer";"int";
"327";"Date/Time";"localtime";"array localtime([int timestamp[, bool is_associative]])";"Get the local time";"array";
"328";"Date/Time";"microtime";"mixed microtime([bool get_as_float])";"Return current Unix timestamp with microseconds";"mixed";
"329";"Date/Time";"mktime";"int mktime([int hour[, int minute[, int second[, int month[, int day[, int year[, int is_dst]]]]]]])";"Get Unix timestamp for a date";"int";
"330";"Date/Time";"strftime";"string strftime(string format[, int timestamp])";"Format a local time/date according to locale settings";"string";
"331";"Date/Time";"strtotime";"int strtotime(string time[, int now])";"Parse about any English textual datetime description into a Unix timestamp";"int";
"332";"Date/Time";"time";"int time()";"Return current Unix timestamp";"int";
"333";"dBase";"dbase_add_record";"bool dbase_add_record(int dbase_identifier, array record)";"Add a record to a dBase database";"bool";
"334";"dBase";"dbase_close";"bool dbase_close(int dbase_identifier)";"Close a dBase database";"bool";
"335";"dBase";"dbase_create";"int dbase_create(string filename, array fields)";"Creates a dBase database";"int";
"336";"dBase";"dbase_delete_record";"bool dbase_delete_record(int dbase_identifier, int record)";"Deletes a record from a dBase database";"bool";
"337";"dBase";"dbase_get_header_info";"array dbase_get_header_info(int dbase_identifier)";"Get the header info of a dBase database";"array";
"338";"dBase";"dbase_get_record_with_names";"array dbase_get_record_with_names(int dbase_identifier, int record)";"Gets a record from a dBase database as an associative array";"array";
"339";"dBase";"dbase_get_record";"array dbase_get_record(int dbase_identifier, int record)";"Gets a record from a dBase database";"array";
"340";"dBase";"dbase_numfields";"int dbase_numfields(int dbase_identifier)";"Find out how many fields are in a dBase database";"int";
"341";"dBase";"dbase_numrecords";"int dbase_numrecords(int dbase_identifier)";"Find out how many records are in a dBase database";"int";
"342";"dBase";"dbase_open";"int dbase_open(string filename, int flags)";"Opens a dBase database";"int";
"343";"dBase";"dbase_pack";"bool dbase_pack(int dbase_identifier)";"Packs a dBase database";"bool";
"344";"dBase";"dbase_replace_record";"bool dbase_replace_record(int dbase_identifier, array record, int dbase_record_number)";"Replace a record in a dBase database";"bool";
"345";"DBM";"dblist";"string dblist()";"Describes the DBM-compatible library being used";"string";
"346";"DBM";"dbmclose";"bool dbmclose(resource dbm_identifier)";"Closes a dbm database";"bool";
"347";"DBM";"dbmdelete";"bool dbmdelete(resource dbm_identifier, string key)";"Deletes the value for a key from a DBM database";"bool";
"348";"DBM";"dbmexists";"bool dbmexists(resource dbm_identifier, string key)";"Tells if a value exists for a key in a DBM database";"bool";
"349";"DBM";"dbmfetch";"string dbmfetch(resource dbm_identifier, string key)";"Fetches a value for a key from a DBM database";"string";
"350";"DBM";"dbmfirstkey";"string dbmfirstkey(resource dbm_identifier)";"Retrieves the first key from a DBM database";"string";
"351";"DBM";"dbminsert";"int dbminsert(resource dbm_identifier, string key, string value)";"Inserts a value for a key in a DBM database";"int";
"352";"DBM";"dbmnextkey";"string dbmnextkey(resource dbm_identifier, string key)";"Retrieves the next key from a DBM database";"string";
"353";"DBM";"dbmopen";"resource dbmopen(string filename, string flags)";"Opens a DBM database";"resource";
"354";"DBM";"dbmreplace";"int dbmreplace(resource dbm_identifier, string key, string value)";"Replaces the value for a key in a DBM database";"int";
"355";"dbx";"dbx_close";"bool dbx_close(object link_identifier)";"Close an open connection/database";"bool";
"356";"dbx";"dbx_compare";"int dbx_compare(array row_a, array row_b, string column_key[, int flags])";"Compare two rows for sorting purposes";"int";
"357";"dbx";"dbx_connect";"object dbx_connect(mixed module, string host, string database, string username, string password[, int persistent])";"Open a connection/database";"object";
"358";"dbx";"dbx_error";"string dbx_error(object link_identifier)";"Report the error message of the latest function call in the module (not just in the connection)";"string";
"359";"dbx";"dbx_escape_string";"string dbx_escape_string(object link_identifier, string text)";"Escape a string so it can safely be used in an sql-statement.";"string";
"360";"dbx";"dbx_fetch_row";"object dbx_fetch_row(object result_identifier)";"Fetches rows from a query-result that had the DBX_RESULT_UNBUFFERED flag set";"object";
"361";"dbx";"dbx_query";"object dbx_query(object link_identifier, string sql_statement[, int flags])";"Send a query and fetch all results (if any)";"object";
"362";"dbx";"dbx_sort";"bool dbx_sort(object result, string user_compare_function)";"Sort a result from a dbx_query by a custom sort function";"bool";
"363";"DB++";"dbplus_add";"int dbplus_add(resource relation, array tuple)";"Add a tuple to a relation";"int";
"364";"DB++";"dbplus_aql";"resource dbplus_aql(string query[, string server[, string dbpath]])";"Perform AQL query";"resource";
"365";"DB++";"dbplus_chdir";"string dbplus_chdir([string newdir])";"Get/Set database virtual current directory";"string";
"366";"DB++";"dbplus_close";"int dbplus_close(resource relation)";"Close a relation";"int";
"367";"DB++";"dbplus_curr";"int dbplus_curr(resource relation, array tuple)";"Get current tuple from relation";"int";
"368";"DB++";"dbplus_errcode";"string dbplus_errcode(int errno)";"Get error string for given errorcode or last error";"string";
"369";"DB++";"dbplus_errno";"int dbplus_errno()";"Get error code for last operation";"int";
"370";"DB++";"dbplus_find";"int dbplus_find(resource relation, array constraints, mixed tuple)";"Set a constraint on a relation";"int";
"371";"DB++";"dbplus_first";"int dbplus_first(resource relation, array tuple)";"Get first tuple from relation";"int";
"372";"DB++";"dbplus_flush";"int dbplus_flush(resource relation)";"Flush all changes made on a relation";"int";
"373";"DB++";"dbplus_freealllocks";"int dbplus_freealllocks()";"Free all locks held by this client";"int";
"374";"DB++";"dbplus_freelock";"int dbplus_freelock(resource relation, string tname)";"Release write lock on tuple";"int";
"375";"DB++";"dbplus_freerlocks";"int dbplus_freerlocks(resource relation)";"Free all tuple locks on given relation";"int";
"376";"DB++";"dbplus_getlock";"int dbplus_getlock(resource relation, string tname)";"Get a write lock on a tuple";"int";
"377";"DB++";"dbplus_getunique";"int dbplus_getunique(resource relation, int uniqueid)";"Get an id number unique to a relation";"int";
"378";"DB++";"dbplus_info";"int dbplus_info(resource relation, string key, array &result)";"???";"int";
"379";"DB++";"dbplus_last";"int dbplus_last(resource relation, array tuple)";"Get last tuple from relation";"int";
"380";"DB++";"dbplus_lockrel";"int dbplus_lockrel(resource relation)";"Request write lock on relation";"int";
"381";"DB++";"dbplus_next";"int dbplus_next(resource relation, array &tuple)";"Get next tuple from relation";"int";
"382";"DB++";"dbplus_open";"resource dbplus_open(string name)";"Open relation file";"resource";
"383";"DB++";"dbplus_prev";"int dbplus_prev(resource relation, array tuple)";"Get previous tuple from relation";"int";
"384";"DB++";"dbplus_rchperm";"int dbplus_rchperm(resource relation, int mask, string user, string group)";"Change relation permissions";"int";
"385";"DB++";"dbplus_rcreate";"resource dbplus_rcreate(string name, mixed domlist[, bool overwrite])";"Creates a new DB++ relation";"resource";
"386";"DB++";"dbplus_rcrtexact";"resource dbplus_rcrtexact(string name, resource relation, bool overwrite)";"Creates an exact but empty copy of a relation including indices";"resource";
"387";"DB++";"dbplus_rcrtlike";"resource dbplus_rcrtlike(string name, resource relation, int flag)";"Creates an empty copy of a relation with default indices";"resource";
"388";"DB++";"dbplus_resolve";"int dbplus_resolve(string relation_name)";"Resolve host information for relation";"int";
"389";"DB++";"dbplus_restorepos";"int dbplus_restorepos(resource relation, array tuple)";"???";"int";
"390";"DB++";"dbplus_rkeys";"resource dbplus_rkeys(resource relation, mixed domlist)";"Specify new primary key for a relation";"resource";
"391";"DB++";"dbplus_ropen";"resource dbplus_ropen(string name)";"Open relation file local";"resource";
"392";"DB++";"dbplus_rquery";"int dbplus_rquery(string query, string dbpath)";"Perform local (raw) AQL query";"int";
"393";"DB++";"dbplus_rrename";"int dbplus_rrename(resource relation, string name)";"Rename a relation";"int";
"394";"DB++";"dbplus_rsecindex";"resource dbplus_rsecindex(resource relation, mixed domlist, int type)";"Create a new secondary index for a relation";"resource";
"395";"DB++";"dbplus_runlink";"int dbplus_runlink(resource relation)";"Remove relation from filesystem";"int";
"396";"DB++";"dbplus_rzap";"int dbplus_rzap(resource relation)";"Remove all tuples from relation";"int";
"397";"DB++";"dbplus_savepos";"int dbplus_savepos(resource relation)";"???";"int";
"398";"DB++";"dbplus_setindex";"int dbplus_setindex(resource relation, string idx_name)";"???";"int";
"399";"DB++";"dbplus_setindexbynumber";"int dbplus_setindexbynumber(resource relation, int idx_number)";"???";"int";
"400";"DB++";"dbplus_sql";"resource dbplus_sql(string query, string server, string dbpath)";"Perform SQL query";"resource";
"401";"DB++";"dbplus_tcl";"int dbplus_tcl(int sid, string script)";"Execute TCL code on server side";"int";
"402";"DB++";"dbplus_tremove";"int dbplus_tremove(resource relation, array tuple[, array current])";"Remove tuple and return new current tuple";"int";
"403";"DB++";"dbplus_undo";"int dbplus_undo(resource relation)";"???";"int";
"404";"DB++";"dbplus_undoprepare";"int dbplus_undoprepare(resource relation)";"???";"int";
"405";"DB++";"dbplus_unlockrel";"int dbplus_unlockrel(resource relation)";"Give up write lock on relation";"int";
"406";"DB++";"dbplus_unselect";"int dbplus_unselect(resource relation)";"Remove a constraint from relation";"int";
"407";"DB++";"dbplus_update";"int dbplus_update(resource relation, array old, array new)";"Update specified tuple in relation";"int";
"408";"DB++";"dbplus_xlockrel";"int dbplus_xlockrel(resource relation)";"Request exclusive lock on relation";"int";
"409";"DB++";"dbplus_xunlockrel";"int dbplus_xunlockrel(resource relation)";"Free exclusive lock on relation";"int";
"410";"Direct IO";"dio_close";"void dio_close(resource fd)";"Closes the file descriptor given by fd";"void";
"411";"Direct IO";"dio_fcntl";"mixed dio_fcntl(resource fd, int cmd[, mixed args])";"Performs a c library fcntl on fd";"mixed";
"412";"Direct IO";"dio_open";"resource dio_open(string filename, int flags[, int mode])";"Opens a new filename with specified permissions of flags and creation permissions of mode";"resource";
"413";"Direct IO";"dio_read";"string dio_read(resource fd[, int n])";"Reads n bytes from fd and returns them, if n is not specified, reads 1k block";"string";
"414";"Direct IO";"dio_seek";"int dio_seek(resource fd, int pos, int whence)";"Seeks to pos on fd from whence";"int";
"415";"Direct IO";"dio_stat";"array dio_stat(resource fd)";"Gets stat information about the file descriptor fd";"array";
"416";"Direct IO";"dio_tcsetattr";"void dio_tcsetattr(resource fd, array options)";"Sets terminal attributes and baud rate for a serial port";"void";
"417";"Direct IO";"dio_truncate";"bool dio_truncate(resource fd, int offset)";"Truncates file descriptor fd to offset bytes";"bool";
"418";"Direct IO";"dio_write";"int dio_write(resource fd, string data[, int len])";"Writes data to fd with optional truncation at length";"int";
"419";"Directories";"chdir";"bool chdir(string directory)";"Change directory";"bool";
"420";"Directories";"chroot";"bool chroot(string directory)";"Change the root directory";"bool";
"421";"Directories";"dir";;"directory class";;
"422";"Directories";"closedir";"void closedir(resource dir_handle)";"close directory handle";"void";
"423";"Directories";"getcwd";"string getcwd()";"gets the current working directory";"string";
"424";"Directories";"opendir";"resource opendir(string path)";"open directory handle";"resource";
"425";"Directories";"readdir";"string readdir(resource dir_handle)";"read entry from directory handle";"string";
"426";"Directories";"rewinddir";"void rewinddir(resource dir_handle)";"rewind directory handle";"void";
"427";"Directories";"scandir";"array scandir(string directory[, int sorting_order[, resource context]])";"List files and directories inside the specified path";"array";
"428";"DOM";"DOMAttr->isId";"bool DOMAttr->isId()";"Checks if attribute is a defined ID";"bool";
"429";"DOM";"DOMCharacterData->appendData";"void DOMCharacterData->appendData(string data)";"Append the string to the end of the character data of the node.";"void";
"430";"DOM";"DOMCharacterData->deleteData";"void DOMCharacterData->deleteData(int offset, int count)";"Remove a range of characters from the node.";"void";
"431";"DOM";"DOMCharacterData->insertData";"void DOMCharacterData->insertData(int offset, string data)";"Insert a string at the specified 16-bit unit offset.";"void";
"432";"DOM";"DOMCharacterData->replaceData";"void DOMCharacterData->replaceData(int offset, int count, string data)";"Replace a substring within the DOMCharacterData node.";"void";
"433";"DOM";"DOMCharacterData->substringData";"string DOMCharacterData->substringData(int offset, int count)";"Extracts a range of data from the node.";"string";
"434";"DOM";"DOMDocument->createAttribute";"object DOMDocument->createAttribute(string name)";"Create new attribute";"object";
"435";"DOM";"DOMDocument->createAttributeNS";"object DOMDocument->createAttributeNS(string namespaceURI, string qualifiedName)";"Create new attribute node with an associated namespace";"object";
"436";"DOM";"DOMDocument->createCDATASection";"object DOMDocument->createCDATASection(string data)";"Create new cdata node";"object";
"437";"DOM";"DOMDocument->createComment";"object DOMDocument->createComment(string data)";"Create new comment node";"object";
"438";"DOM";"DOMDocument->createDocumentFragment";"object DOMDocument->createDocumentFragment()";"Create new document fragment";"object";
"439";"DOM";"DOMDocument->createElement";"object DOMDocument->createElement(string name[, string value])";"Create new element node";"object";
"440";"DOM";"DOMDocument->createElementNS";"object DomDocument->createElementNS(string namespaceURI, string qualifiedName)";"Create new element node with an associated namespace";"object";
"441";"DOM";"DOMDocument->createEntityReference";"object DOMDocument->createEntityReference(string name)";"Create new entity reference node";"object";
"442";"DOM";"DOMDocument->createProcessingInstruction";"object DOMDocument->createProcessingInstruction(string target[, string data])";"Creates new PI node";"object";
"443";"DOM";"DOMDocument->createTextNode";"object DOMDocument->createTextNode(string content)";"Create new text node";"object";
"444";"DOM";"DOMDocument->getElementById";"object DOMDocument->getElementById(string elementId)";"Searches for an element with a certain id.";"object";
"445";"DOM";"DOMDocument->getElementsByTagName";"object DOMDocument->getElementsByTagName(string name)";"Searches for all elements with given tag name.";"object";
"446";"DOM";"DOMDocument->getElementsByTagNameNS";"object DOMDocument->getElementsByTagNameNS(string namespaceURI, string localName)";"Searches for all elements with given tag name in specified namespace.";"object";
"447";"DOM";"DOMDocument->importNode";"object DOMDocument->importNode(object importedNode[, bool deep])";"Import node into current document.";"object";
"448";"DOM";"DOMDocument->load";"mixed DOMDocument->load(string filename)";"Load XML from a file.";"mixed";
"449";"DOM";"DOMDocument->loadHTML";"mixed DOMDocument->loadHTML(string source)";"Load HTML from a string.";"mixed";
"450";"DOM";"DOMDocument->loadHTMLFile";"mixed DOMDocument->loadHTMLFile(string filename)";"Load HTML from a file.";"mixed";
"451";"DOM";"DOMDocument->loadXML";"mixed DOMDocument->loadXML(string source)";"Load XML from a string.";"mixed";
"452";"DOM";"DOMDocument->normalize";"void DOMDocument->normalize()";"Normalizes document.";"void";
"453";"DOM";"DOMDocument->relaxNGValidate";"bool DOMDocument->relaxNGValidate(string filename)";"Performs relaxNG validation on the document.";"bool";
"454";"DOM";"DOMDocument->relaxNGValidateSource";"bool DOMDocument->relaxNGValidateSource(string source)";"Performs relaxNG validation on the document.";"bool";
"455";"DOM";"DOMDocument->save";"int DOMDocument->save(string filename)";"Dumps the internal XML tree back into a file";"int";
"456";"DOM";"DOMDocument->saveHTML";"string DOMDocument->saveHTML()";"Dumps the internal document into a string using HTML formatting";"string";
"457";"DOM";"DOMDocument->saveHTMLFile";"string DOMDocument->saveHTMLFile(string filename)";"Dumps the internal document back into a file using HTML formatting";"string";
"458";"DOM";"DOMDocument->saveXML";"string DOMDocument->saveXML([object node])";"Dumps the internal XML tree back into a string";"string";
"459";"DOM";"DOMDocument->schemaValidate";"bool DOMDocument->schemaValidate(string filename)";"Validates a document based on a schema.";"bool";
"460";"DOM";"DOMDocument->schemaValidateSource";"bool DOMDocument->schemaValidateSource(string source)";"Validates a document based on a schema.";"bool";
"461";"DOM";"DOMDocument->validate";"bool DOMDocument->validate()";"Validates the document based on its DTD.";"bool";
"462";"DOM";"DOMDocument->xinclude";"int DOMDocument->xinclude()";"Substitutes XIncludes in a DOMDocument Object.";"int";
"463";"DOM";"DOMElement->getAttribute";"string DOMElement->getAttribute(string name)";"Returns value of attribute";"string";
"464";"DOM";"DOMElement->getAttributeNode";"object DOMElement->getAttributeNode(object name)";"Returns attribute node";"object";
"465";"DOM";"DOMElement->getAttributeNodeNS";"object DOMElement->getAttributeNodeNS(string namespaceURI, string localName)";"Returns attribute node";"object";
"466";"DOM";"DOMElement->getAttributeNS";"string DOMElement->getAttributeNS(string namespaceURI, string localName)";"Returns value of attribute";"string";
"467";"DOM";"DOMElement->getElementsByTagName";"object DOMElement->getElementsByTagName(string name)";"Gets elements by tagname";"object";
"468";"DOM";"DOMElement->getElementsByTagNameNS";"object DOMElement->getElementsByTagNameNS(string namespaceURI, string localName)";"Get elements by namespaceURI and localName";"object";
"469";"DOM";"DOMElement->hasAttribute";"bool DOMElement->hasAttribute(string name)";"Checks to see if attribute exists";"bool";
"470";"DOM";"DOMElement->hasAttributeNS";"bool DOMElement->hasAttributeNS(string namespaceURI, string localName)";"Checks to see if attribute exists";"bool";
"471";"DOM";"DOMElement->removeAttribute";"bool DOMElement->removeAttribute(string name)";"Removes attribute";"bool";
"472";"DOM";"DOMElement->removeAttributeNode";"bool DOMElement->removeAttributeNode(object oldnode)";"Removes attribute";"bool";
"473";"DOM";"DOMElement->removeAttributeNS";"bool DOMElement->removeAttributeNS(string namespaceURI, string localName)";"Removes attribute";"bool";
"474";"DOM";"DOMElement->setAttribute";"bool DOMElement->setAttribute(string name, string value)";"Adds new attribute";"bool";
"475";"DOM";"DOMElement->setAttributeNode";"bool DOMElement->setAttributeNode(object attr)";"Adds new attribute node to element";"bool";
"476";"DOM";"DOMElement->setAttributeNodeNS";"bool DOMElement->setAttributeNodeNS(object attr)";"Adds new attribute node to element";"bool";
"477";"DOM";"DOMElement->setAttributeNS";"void DOMElement->setAttributeNS(string namespaceURI, string qualifiedName, string value)";"Adds new attribute";"void";
"478";"DOM";"DOMImplementation->createDocument";"object DOMImplementation->createDocument([string namespaceURI[, string qualifiedName[, object doctype]]])";"Creates a DOM Document object of the specified type with its document element.";"object";
"479";"DOM";"DOMImplementation->createDocumentType";"object DOMImplementation->createDocumentType([string qualifiedName[, string publicId[, string systemId]]])";"Creates an empty DOMDocumentType object.";"object";
"480";"DOM";"DOMImplementation->hasFeature";"bool DOMImplementation->hasFeature(string feature, string version)";"Test if the DOM implementation implements a specific feature and version.";"bool";
"481";"DOM";"DOMNamedNodeMap->getNamedItem";"object DOMNamedNodeMap->getNamedItem(string name)";"Retrieves a node specified by name.";"object";
"482";"DOM";"DOMNamedNodeMap->getNamedItemNS";"object DOMNamedNodeMap->getNamedItemNS(string namespaceURI, string localName)";"Retrieves a node specified by local name and namespace URI.";"object";
"483";"DOM";"DOMNamedNodeMap->item";"object DOMNamedNodeMap->item(int index)";"Retrieves a node specified by index.";"object";
"484";"DOM";"DOMNode->appendChild";"object DOMNode->appendChild(object newnode)";"Adds new child at the end of the children";"object";
"485";"DOM";"DOMNode->cloneNode";"object DOMNode->cloneNode([bool deep])";"Clones a node";"object";
"486";"DOM";"DOMNode->hasAttributes";"bool DOMNode->hasAttributes()";"Checks if node has attributes";"bool";
"487";"DOM";"DOMNode->hasChildNodes";"bool DOMNode->hasChildNodes()";"Checks if node has children";"bool";
"488";"DOM";"DOMNode->insertBefore";"object DOMNode->insertBefore(object newnode[, object refnode])";"Adds new child at the end of the children";"object";
"489";"DOM";"DOMNode->isSameNode";"bool DOMNode->isSameNode(object node)";"Indicates if two nodes are the same node.";"bool";
"490";"DOM";"DOMNode->isSupported";"bool DOMNode->isSupported(string feature, string version)";"Checks if feature is supported for specified version.";"bool";
"491";"DOM";"DOMNode->lookupNamespaceURI";"string DOMNode->lookupNamespaceURI(string prefix)";"Returns namespace URI of the node based on the prefix.";"string";
"492";"DOM";"DOMNode->lookupPrefix";"string DOMNode->lookupPrefix(string namespaceURI)";"Returns name space prefix of the node based on namespaceURI.";"string";
"493";"DOM";"DOMNode->normalize";"void DOMNode->normalize()";"Normalizes the node.";"void";
"494";"DOM";"DOMNode->removeChild";"object DOMNode->removeChild(object oldchild)";"Removes child from list of children";"object";
"495";"DOM";"DOMNode->replaceChild";"object DOMNode->replaceChild(object oldnode, object newnode)";"Replaces a child";"object";
"496";"DOM";"DOMNodelist->item";"object DOMNodelist->item(int index)";"Retrieves a node specified by index.";"object";
"497";"DOM";"DOMText->isWhitespaceInElementContent";"bool DOMText->isWhitespaceInElementContent()";"Indicates whether this text node contains whitespace.";"bool";
"498";"DOM";"DOMText->splitText";"object DOMText->splitText(int offset)";"Breaks this node into two nodes at the specified offset.";"object";
"499";"DOM";"DOMXPath->query";"object DOMXPath->query(string expression[, object contextnode])";"Evaluates the XPath expression in the given string";"object";
"500";"DOM";"DOMXPath->registerNamespace";"bool DOMXPath->registerNamespace(string prefix, string namespaceURI)";"Registers the namespace with the DOMXpath object.";"bool";
"501";"DOM XML";"DomAttribute->name";"bool DomAttribute->name()";"Returns name of attribute";"bool";
"502";"DOM XML";"DomAttribute->specified";"bool DomAttribute->specified()";"Checks if attribute is specified";"bool";
"503";"DOM XML";"DomAttribute->value";"bool DomAttribute->value()";"Returns value of attribute";"bool";
"504";"DOM XML";"DomDocument->add_root";"resource DomDocument->add_root(string name)";"Adds a root node [deprecated]";"resource";
"505";"DOM XML";"DomDocument->create_attribute";"object DomDocument->create_attribute(string name, string value)";"Create new attribute";"object";
"506";"DOM XML";"DomDocument->create_cdata_section";"string DomDocument->create_cdata_section(string content)";"Create new cdata node";"string";
"507";"DOM XML";"DomDocument->create_comment";"object DomDocument->create_comment(string content)";"Create new comment node";"object";
"508";"DOM XML";"DomDocument->create_element_ns";"object DomDocument->create_element_ns(string uri, string name[, string prefix])";"Create new element node with an associated namespace";"object";
"509";"DOM XML";"DomDocument->create_element";"object DomDocument->create_element(string name)";"Create new element node";"object";
"510";"DOM XML";"DomDocument->create_entity_reference";"object DomDocument->create_entity_reference(string content)";;"object";
"511";"DOM XML";"DomDocument->create_processing_instruction";"string DomDocument->create_processing_instruction(string content)";"Creates new PI node";"string";
"512";"DOM XML";"DomDocument->create_text_node";"object DomDocument->create_text_node(string content)";"Create new text node";"object";
"513";"DOM XML";"DomDocument->doctype";"object DomDocument->doctype()";"Returns the document type";"object";
"514";"DOM XML";"DomDocument->document_element";"object DomDocument->document_element()";"Returns root element node";"object";
"515";"DOM XML";"DomDocument->dump_file";"string DomDocument->dump_file(string filename[, bool compressionmode[, bool format]])";"Dumps the internal XML tree back into a file";"string";
"516";"DOM XML";"DomDocument->dump_mem";"string DomDocument->dump_mem([bool format[, string encoding]])";"Dumps the internal XML tree back into a string";"string";
"517";"DOM XML";"DomDocument->get_element_by_id";"object DomDocument->get_element_by_id(string id)";"Searches for an element with a certain id";"object";
"518";"DOM XML";"DomDocument->get_elements_by_tagname";"array DomDocument->get_elements_by_tagname(string name)";;"array";
"519";"DOM XML";"DomDocument->html_dump_mem";"string DomDocument->html_dump_mem()";"Dumps the internal XML tree back into a string as HTML";"string";
"520";"DOM XML";"DomDocument->xinclude";"int DomDocument->xinclude()";"Substitutes XIncludes in a DomDocument Object.";"int";
"521";"DOM XML";"DomDocumentType->entities";"array DomDocumentType->entities()";"Returns list of entities";"array";
"522";"DOM XML";"DomDocumentType->internal_subset";"bool DomDocumentType->internal_subset()";"Returns internal subset";"bool";
"523";"DOM XML";"DomDocumentType->name";"string DomDocumentType->name()";"Returns name of document type";"string";
"524";"DOM XML";"DomDocumentType->notations";"array DomDocumentType->notations()";"Returns list of notations";"array";
"525";"DOM XML";"DomDocumentType->public_id";"string DomDocumentType->public_id()";"Returns public id of document type";"string";
"526";"DOM XML";"DomDocumentType->system_id";"string DomDocumentType->system_id()";"Returns system id of document type";"string";
"527";"DOM XML";"DomElement->get_attribute_node";"object DomElement->get_attribute_node(object attr)";"Returns value of attribute";"object";
"528";"DOM XML";"DomElement->get_attribute";"object DomElement->get_attribute(string name)";"Returns value of attribute";"object";
"529";"DOM XML";"DomElement->get_elements_by_tagname";"bool DomElement->get_elements_by_tagname(string name)";"Gets elements by tagname";"bool";
"530";"DOM XML";"DomElement->has_attribute";"bool DomElement->has_attribute(string name)";"Checks to see if attribute exists";"bool";
"531";"DOM XML";"DomElement->remove_attribute";"bool DomElement->remove_attribute(string name)";"Removes attribute";"bool";
"532";"DOM XML";"DomElement->set_attribute";"bool DomElement->set_attribute(string name, string value)";"Adds new attribute";"bool";
"533";"DOM XML";"DomElement->tagname";"string DomElement->tagname()";"Returns name of element";"string";
"534";"DOM XML";"DomNode->add_namespace";"bool DomNode->add_namespace(string uri, string prefix)";"Adds a namespace declaration to a node.";"bool";
"535";"DOM XML";"DomNode->append_child";"object DomNode->append_child(object newnode)";"Adds new child at the end of the children";"object";
"536";"DOM XML";"DomNode->append_sibling";"object DomNode->append_sibling(object newnode)";"Adds new sibling to a node";"object";
"537";"DOM XML";"DomNode->attributes";"array DomNode->attributes()";"Returns list of attributes";"array";
"538";"DOM XML";"DomNode->child_nodes";"array DomNode->child_nodes()";"Returns children of node";"array";
"539";"DOM XML";"DomNode->clone_node";"object DomNode->clone_node()";"Clones a node";"object";
"540";"DOM XML";"DomNode->dump_node";"string DomNode->dump_node()";"Dumps a single node";"string";
"541";"DOM XML";"DomNode->first_child";"object DomNode->first_child()";"Returns first child of node";"object";
"542";"DOM XML";"DomNode->get_content";"string DomNode->get_content()";"Gets content of node";"string";
"543";"DOM XML";"DomNode->has_attributes";"bool DomNode->has_attributes()";"Checks if node has attributes";"bool";
"544";"DOM XML";"DomNode->has_child_nodes";"bool DomNode->has_child_nodes()";"Checks if node has children";"bool";
"545";"DOM XML";"DomNode->insert_before";"object DomNode->insert_before(object newnode, object refnode)";"Inserts new node as child";"object";
"546";"DOM XML";"DomNode->is_blank_node";"bool DomNode->is_blank_node()";"Checks if node is blank";"bool";
"547";"DOM XML";"DomNode->last_child";"object DomNode->last_child()";"Returns last child of node";"object";
"548";"DOM XML";"DomNode->next_sibling";"object DomNode->next_sibling()";"Returns the next sibling of node";"object";
"549";"DOM XML";"DomNode->node_name";"string DomNode->node_name()";"Returns name of node";"string";
"550";"DOM XML";"DomNode->node_type";"int DomNode->node_type()";"Returns type of node";"int";
"551";"DOM XML";"DomNode->node_value";"string DomNode->node_value()";"Returns value of a node";"string";
"552";"DOM XML";"DomNode->owner_document";"object DomNode->owner_document()";"Returns the document this node belongs to";"object";
"553";"DOM XML";"DomNode->parent_node";"object DomNode->parent_node()";"Returns the parent of the node";"object";
"554";"DOM XML";"DomNode->prefix";"string DomNode->prefix()";"Returns name space prefix of node";"string";
"555";"DOM XML";"DomNode->previous_sibling";"object DomNode->previous_sibling()";"Returns the previous sibling of node";"object";
"556";"DOM XML";"DomNode->remove_child";"object DomNode->remove_child(object oldchild)";"Removes child from list of children";"object";
"557";"DOM XML";"DomNode->replace_child";"object DomNode->replace_child(object oldnode, object newnode)";"Replaces a child";"object";
"558";"DOM XML";"DomNode->replace_node";"object DomNode->replace_node(object newnode)";"Replaces node";"object";
"559";"DOM XML";"DomNode->set_content";"bool DomNode->set_content()";"Sets content of node";"bool";
"560";"DOM XML";"DomNode->set_name";"bool DomNode->set_name()";"Sets name of node";"bool";
"561";"DOM XML";"DomNode->set_namespace";"void DomNode->set_namespace(string uri[, string prefix])";"Sets namespace of a node.";"void";
"562";"DOM XML";"DomNode->unlink_node";"object DomNode->unlink_node()";"Deletes node";"object";
"563";"DOM XML";"DomProcessingInstruction->data";"string DomProcessingInstruction->data()";"Returns data of pi node";"string";
"564";"DOM XML";"DomProcessingInstruction->target";"string DomProcessingInstruction->target()";"Returns target of pi node";"string";
"565";"DOM XML";"DomXsltStylesheet->process";"object DomXsltStylesheet->process(object DomDocument[, array xslt_parameters[, bool param_is_xpath]])";"Applies the XSLT-Transformation on a DomDocument Object.";"object";
"566";"DOM XML";"DomXsltStylesheet->result_dump_file";"string DomXsltStylesheet->result_dump_file(object DomDocument, string filename)";"Dumps the result from a XSLT-Transformation into a file";"string";
"567";"DOM XML";"DomXsltStylesheet->result_dump_mem";"string DomXsltStylesheet->result_dump_mem(object DomDocument)";"Dumps the result from a XSLT-Transformation back into a string";"string";
"568";"DOM XML";"domxml_new_doc";"object domxml_new_doc(string version)";"Creates new empty XML document";"object";
"569";"DOM XML";"domxml_open_file";"object domxml_open_file(string filename)";"Creates a DOM object from XML file";"object";
"570";"DOM XML";"domxml_open_mem";"object domxml_open_mem(string str)";"Creates a DOM object of an XML document";"object";
"571";"DOM XML";"domxml_version";"string domxml_version()";"Get XML library version";"string";
"572";"DOM XML";"domxml_xmltree";"object domxml_xmltree(string str)";"Creates a tree of PHP objects from an XML document";"object";
"573";"DOM XML";"domxml_xslt_stylesheet_doc";"object domxml_xslt_stylesheet_doc(object DocDocument Object)";"Creates a DomXsltStylesheet Object from a DomDocument Object.";"object";
"574";"DOM XML";"domxml_xslt_stylesheet_file";"object domxml_xslt_stylesheet_file(string xsl file)";"Creates a DomXsltStylesheet Object from an XSL document in a file.";"object";
"575";"DOM XML";"domxml_xslt_stylesheet";"object domxml_xslt_stylesheet(string xsl document)";"Creates a DomXsltStylesheet Object from an XML document in a string.";"object";
"576";"DOM XML";"xpath_eval_expression";"array xpath_eval_expression(object xpath_context)";"Evaluates the XPath Location Path in the given string";"array";
"577";"DOM XML";"xpath_eval";"array xpath_eval(object xpath context, string xpath expression[, object contextnode])";"Evaluates the XPath Location Path in the given string";"array";
"578";"DOM XML";"xpath_new_context";"object xpath_new_context(object dom document)";"Creates new xpath context";"object";
"579";"DOM XML";"xptr_eval";"int xptr_eval([object xpath_context, string eval_str])";"Evaluate the XPtr Location Path in the given string";"int";
"580";"DOM XML";"xptr_new_context";"string xptr_new_context([object doc_handle])";"Create new XPath Context";"string";
"581";".NET";"dotnet_load";"int dotnet_load(string assembly_name[, string datatype_name[, int codepage]])";"Loads a DOTNET module";"int";
"582";"Errors and Logging";"debug_backtrace";"array debug_backtrace()";"Generates a backtrace";"array";
"583";"Errors and Logging";"debug_print_backtrace";"void debug_print_backtrace()";"Prints a backtrace";"void";
"584";"Errors and Logging";"error_log";"int error_log(string message[, int message_type[, string destination[, string extra_headers]]])";"Send an error message somewhere";"int";
"585";"Errors and Logging";"error_reporting";"int error_reporting([int level])";"Sets which PHP errors are reported";"int";
"586";"Errors and Logging";"restore_error_handler";"void restore_error_handler()";"Restores the previous error handler function";"void";
"587";"Errors and Logging";"set_error_handler";"string set_error_handler(callback error_handler[, int error_types])";"Sets a user-defined error handler function";"string";
"588";"Errors and Logging";"trigger_error";"void trigger_error(string error_msg[, int error_type])";"Generates a user-level error/warning/notice message";"void";
"589";"Errors and Logging";"user_error";;"Alias of trigger_error";;
"590";"fam";"fam_cancel_monitor";"bool fam_cancel_monitor(resource fam, resource fam_monitor)";"Terminate monitoring";"bool";
"591";"fam";"fam_close";"fam_close(resource fam)";"Close FAM connection";;
"592";"fam";"fam_monitor_collection";"resource fam_monitor_collection(resource fam, string dirname, int depth, string mask)";"Monitor a collection of files in a directory for changes";"resource";
"593";"fam";"fam_monitor_directory";"resource fam_monitor_directory(resource fam, string dirname)";"Monitor a directory for changes";"resource";
"594";"fam";"fam_monitor_file";"resource fam_monitor_file(resource fam, string filename)";"Monitor a regular file for changes";"resource";
"595";"fam";"fam_next_event";"array fam_next_event(resource fam)";"Get next pending FAM event";"array";
"596";"fam";"fam_open";"resource fam_open([string appname])";"Open connection to FAM daemon";"resource";
"597";"fam";"fam_pending";"bool fam_pending(resource fam)";"Check for pending FAM events";"bool";
"598";"fam";"fam_resume_monitor";"bool fam_resume_monitor(resource fam, resource fam_monitor)";"Resume suspended monitoring";"bool";
"599";"fam";"fam_suspend_monitor";"bool fam_suspend_monitor(resource fam, resource fam_monitor)";"Temporarily suspend monitoring";"bool";
"600";"FrontBase";"fbsql_affected_rows";"int fbsql_affected_rows([resource link_identifier])";"Get number of affected rows in previous FrontBase operation";"int";
"601";"FrontBase";"fbsql_autocommit";"bool fbsql_autocommit(resource link_identifier[, bool OnOff])";"Enable or disable autocommit";"bool";
"602";"FrontBase";"fbsql_blob_size";"int fbsql_blob_size(string blob_handle[, resource link_identifier])";"Get the size of a BLOB";"int";
"603";"FrontBase";"fbsql_change_user";"resource fbsql_change_user(string user, string password[, string database[, resource link_identifier]])";"Change logged in user of the active connection";"resource";
"604";"FrontBase";"fbsql_clob_size";"int fbsql_clob_size(string clob_handle[, resource link_identifier])";"Get the size of a CLOB";"int";
"605";"FrontBase";"fbsql_close";"bool fbsql_close([resource link_identifier])";"Close FrontBase connection";"bool";
"606";"FrontBase";"fbsql_commit";"bool fbsql_commit([resource link_identifier])";"Commits a transaction to the database";"bool";
"607";"FrontBase";"fbsql_connect";"resource fbsql_connect([string hostname[, string username[, string password]]])";"Open a connection to a FrontBase Server";"resource";
"608";"FrontBase";"fbsql_create_blob";"string fbsql_create_blob(string blob_data[, resource link_identifier])";"Create a BLOB";"string";
"609";"FrontBase";"fbsql_create_clob";"string fbsql_create_clob(string clob_data[, resource link_identifier])";"Create a CLOB";"string";
"610";"FrontBase";"fbsql_create_db";"bool fbsql_create_db(string database_name[, resource link_identifier])";"Create a FrontBase database";"bool";
"611";"FrontBase";"fbsql_data_seek";"bool fbsql_data_seek(resource result_identifier, int row_number)";"Move internal result pointer";"bool";
"612";"FrontBase";"fbsql_database_password";"string fbsql_database_password(resource link_identifier[, string database_password])";"Sets or retrieves the password for a FrontBase database";"string";
"613";"FrontBase";"fbsql_database";"string fbsql_database(resource link_identifier[, string database])";"Get or set the database name used with a connection";"string";
"614";"FrontBase";"fbsql_db_query";"resource fbsql_db_query(string database, string query[, resource link_identifier])";"Send a FrontBase query";"resource";
"615";"FrontBase";"fbsql_db_status";"int fbsql_db_status(string database_name[, resource link_identifier])";"Get the status for a given database";"int";
"616";"FrontBase";"fbsql_drop_db";"bool fbsql_drop_db(string database_name[, resource link_identifier])";"Drop (delete) a FrontBase database";"bool";
"617";"FrontBase";"fbsql_errno";"int fbsql_errno([resource link_identifier])";"Returns the numerical value of the error message from previous FrontBase operation";"int";
"618";"FrontBase";"fbsql_error";"string fbsql_error([resource link_identifier])";"Returns the text of the error message from previous FrontBase operation";"string";
"619";"FrontBase";"fbsql_fetch_array";"array fbsql_fetch_array(resource result[, int result_type])";"Fetch a result row as an associative array, a numeric array, or both";"array";
"620";"FrontBase";"fbsql_fetch_assoc";"array fbsql_fetch_assoc(resource result)";"Fetch a result row as an associative array";"array";
"621";"FrontBase";"fbsql_fetch_field";"object fbsql_fetch_field(resource result[, int field_offset])";"Get column information from a result and return as an object";"object";
"622";"FrontBase";"fbsql_fetch_lengths";"array fbsql_fetch_lengths([resource result])";"Get the length of each output in a result";"array";
"623";"FrontBase";"fbsql_fetch_object";"object fbsql_fetch_object(resource result[, int result_type])";"Fetch a result row as an object";"object";
"624";"FrontBase";"fbsql_fetch_row";"array fbsql_fetch_row(resource result)";"Get a result row as an enumerated array";"array";
"625";"FrontBase";"fbsql_field_flags";"string fbsql_field_flags(resource result, int field_offset)";"Get the flags associated with the specified field in a result";"string";
"626";"FrontBase";"fbsql_field_len";"int fbsql_field_len(resource result, int field_offset)";"Returns the length of the specified field";"int";
"627";"FrontBase";"fbsql_field_name";"string fbsql_field_name(resource result, int field_index)";"Get the name of the specified field in a result";"string";
"628";"FrontBase";"fbsql_field_seek";"bool fbsql_field_seek(resource result, int field_offset)";"Set result pointer to a specified field offset";"bool";
"629";"FrontBase";"fbsql_field_table";"string fbsql_field_table(resource result, int field_offset)";"Get name of the table the specified field is in";"string";
"630";"FrontBase";"fbsql_field_type";"string fbsql_field_type(resource result, int field_offset)";"Get the type of the specified field in a result";"string";
"631";"FrontBase";"fbsql_free_result";"bool fbsql_free_result(resource result)";"Free result memory";"bool";
"632";"FrontBase";"fbsql_get_autostart_info";"array fbsql_get_autostart_info([resource link_identifier])";"No description given yet";"array";
"633";"FrontBase";"fbsql_hostname";"string fbsql_hostname(resource link_identifier[, string host_name])";"Get or set the host name used with a connection";"string";
"634";"FrontBase";"fbsql_insert_id";"int fbsql_insert_id([resource link_identifier])";"Get the id generated from the previous INSERT operation";"int";
"635";"FrontBase";"fbsql_list_dbs";"resource fbsql_list_dbs([resource link_identifier])";"List databases available on a FrontBase server";"resource";
"636";"FrontBase";"fbsql_list_fields";"resource fbsql_list_fields(string database_name, string table_name[, resource link_identifier])";"List FrontBase result fields";"resource";
"637";"FrontBase";"fbsql_list_tables";"resource fbsql_list_tables(string database[, resource link_identifier])";"List tables in a FrontBase database";"resource";
"638";"FrontBase";"fbsql_next_result";"bool fbsql_next_result(resource result_id)";"Move the internal result pointer to the next result";"bool";
"639";"FrontBase";"fbsql_num_fields";"int fbsql_num_fields(resource result)";"Get number of fields in result";"int";
"640";"FrontBase";"fbsql_num_rows";"int fbsql_num_rows(resource result)";"Get number of rows in result";"int";
"641";"FrontBase";"fbsql_password";"string fbsql_password(resource link_identifier[, string password])";"Get or set the user password used with a connection";"string";
"642";"FrontBase";"fbsql_pconnect";"resource fbsql_pconnect([string hostname[, string username[, string password]]])";"Open a persistent connection to a FrontBase Server";"resource";
"643";"FrontBase";"fbsql_query";"resource fbsql_query(string query[, resource link_identifier])";"Send a FrontBase query";"resource";
"644";"FrontBase";"fbsql_read_blob";"string fbsql_read_blob(string blob_handle[, resource link_identifier])";"Read a BLOB from the database";"string";
"645";"FrontBase";"fbsql_read_clob";"string fbsql_read_clob(string clob_handle[, resource link_identifier])";"Read a CLOB from the database";"string";
"646";"FrontBase";"fbsql_result";"mixed fbsql_result(resource result, int row[, mixed field])";"Get result data";"mixed";
"647";"FrontBase";"fbsql_rollback";"bool fbsql_rollback([resource link_identifier])";"Rollback a transaction to the database";"bool";
"648";"FrontBase";"fbsql_select_db";"bool fbsql_select_db(string database_name[, resource link_identifier])";"Select a FrontBase database";"bool";
"649";"FrontBase";"fbsql_set_lob_mode";"bool fbsql_set_lob_mode(resource result, string database_name)";"Set the LOB retrieve mode for a FrontBase result set";"bool";
"650";"FrontBase";"fbsql_set_password";"bool fbsql_set_password(resource link_identifier, string user, string password, string old_password)";"Change the password for a given user";"bool";
"651";"FrontBase";"fbsql_set_transaction";"void fbsql_set_transaction(resource link_identifier, int Locking, int Isolation)";"Set the transaction locking and isolation";"void";
"652";"FrontBase";"fbsql_start_db";"bool fbsql_start_db(string database_name[, resource link_identifier])";"Start a database on local or remote server";"bool";
"653";"FrontBase";"fbsql_stop_db";"bool fbsql_stop_db(string database_name[, resource link_identifier])";"Stop a database on local or remote server";"bool";
"654";"FrontBase";"fbsql_tablename";"string fbsql_tablename(resource result, int i)";"Get table name of field";"string";
"655";"FrontBase";"fbsql_username";"string fbsql_username(resource link_identifier[, string username])";"Get or set the host user used with a connection";"string";
"656";"FrontBase";"fbsql_warnings";"bool fbsql_warnings([bool OnOff])";"Enable or disable FrontBase warnings";"bool";
"657";"filePro";"filepro_fieldcount";"int filepro_fieldcount()";"Find out how many fields are in a filePro database";"int";
"658";"filePro";"filepro_fieldname";"string filepro_fieldname(int field_number)";"Gets the name of a field";"string";
"659";"filePro";"filepro_fieldtype";"string filepro_fieldtype(int field_number)";"Gets the type of a field";"string";
"660";"filePro";"filepro_fieldwidth";"int filepro_fieldwidth(int field_number)";"Gets the width of a field";"int";
"661";"filePro";"filepro_retrieve";"string filepro_retrieve(int row_number, int field_number)";"Retrieves data from a filePro database";"string";
"662";"filePro";"filepro_rowcount";"int filepro_rowcount()";"Find out how many rows are in a filePro database";"int";
"663";"filePro";"filepro";"bool filepro(string directory)";"Read and verify the map file";"bool";
"664";"Filesystem";"basename";"string basename(string path[, string suffix])";"Returns filename component of path";"string";
"665";"Filesystem";"chgrp";"bool chgrp(string filename, mixed group)";"Changes file group";"bool";
"666";"Filesystem";"chmod";"bool chmod(string filename, int mode)";"Changes file mode";"bool";
"667";"Filesystem";"chown";"bool chown(string filename, mixed user)";"Changes file owner";"bool";
"668";"Filesystem";"clearstatcache";"void clearstatcache()";"Clears file status cache";"void";
"669";"Filesystem";"copy";"bool copy(string source, string dest)";"Copies file";"bool";
"670";"Filesystem";"delete";"void delete(string file)";"See unlink or unset";"void";
"671";"Filesystem";"dirname";"string dirname(string path)";"Returns directory name component of path";"string";
"672";"Filesystem";"disk_free_space";"float disk_free_space(string directory)";"Returns available space in directory";"float";
"673";"Filesystem";"disk_total_space";"float disk_total_space(string directory)";"Returns the total size of a directory";"float";
"674";"Filesystem";"diskfreespace";;"Alias of disk_free_space";;
"675";"Filesystem";"fclose";"bool fclose(resource handle)";"Closes an open file pointer";"bool";
"676";"Filesystem";"feof";"bool feof(resource handle)";"Tests for end-of-file on a file pointer";"bool";
"677";"Filesystem";"fflush";"bool fflush(resource handle)";"Flushes the output to a file";"bool";
"678";"Filesystem";"fgetc";"string fgetc(resource handle)";"Gets character from file pointer";"string";
"679";"Filesystem";"fgetcsv";"array fgetcsv(resource handle, int length[, string delimiter[, string enclosure]])";"Gets line from file pointer and parse for CSV fields";"array";
"680";"Filesystem";"fgets";"string fgets(resource handle[, int length])";"Gets line from file pointer";"string";
"681";"Filesystem";"fgetss";"string fgetss(resource handle, int length[, string allowable_tags])";"Gets line from file pointer and strip HTML tags";"string";
"682";"Filesystem";"file_exists";"bool file_exists(string filename)";"Checks whether a file or directory exists";"bool";
"683";"Filesystem";"file_get_contents";"string file_get_contents(string filename[, bool use_include_path[, resource context]])";"Reads entire file into a string";"string";
"684";"Filesystem";"file_put_contents";"int file_put_contents(string filename, string data[, int flags[, resource context]])";"Write a string to a file";"int";
"685";"Filesystem";"file";"array file(string filename[, int use_include_path[, resource context]])";"Reads entire file into an array";"array";
"686";"Filesystem";"fileatime";"int fileatime(string filename)";"Gets last access time of file";"int";
"687";"Filesystem";"filectime";"int filectime(string filename)";"Gets inode change time of file";"int";
"688";"Filesystem";"filegroup";"int filegroup(string filename)";"Gets file group";"int";
"689";"Filesystem";"fileinode";"int fileinode(string filename)";"Gets file inode";"int";
"690";"Filesystem";"filemtime";"int filemtime(string filename)";"Gets file modification time";"int";
"691";"Filesystem";"fileowner";"int fileowner(string filename)";"Gets file owner";"int";
"692";"Filesystem";"fileperms";"int fileperms(string filename)";"Gets file permissions";"int";
"693";"Filesystem";"filesize";"int filesize(string filename)";"Gets file size";"int";
"694";"Filesystem";"filetype";"string filetype(string filename)";"Gets file type";"string";
"695";"Filesystem";"flock";"bool flock(resource handle, int operation[, int &wouldblock])";"Portable advisory file locking";"bool";
"696";"Filesystem";"fnmatch";"bool fnmatch(string pattern, string string[, int flags])";"Match filename against a pattern";"bool";
"697";"Filesystem";"fopen";"resource fopen(string filename, string mode[, bool use_include_path[, resource zcontext]])";"Opens file or URL";"resource";
"698";"Filesystem";"fpassthru";"int fpassthru(resource handle)";"Output all remaining data on a file pointer";"int";
"699";"Filesystem";"fputs";;"Alias of fwrite";;
"700";"Filesystem";"fread";"string fread(resource handle, int length)";"Binary-safe file read";"string";
"701";"Filesystem";"fscanf";"mixed fscanf(resource handle, string format[, string var1])";"Parses input from a file according to a format";"mixed";
"702";"Filesystem";"fseek";"int fseek(resource handle, int offset[, int whence])";"Seeks on a file pointer";"int";
"703";"Filesystem";"fstat";"array fstat(resource handle)";"Gets information about a file using an open file pointer";"array";
"704";"Filesystem";"ftell";"int ftell(resource handle)";"Tells file pointer read/write position";"int";
"705";"Filesystem";"ftruncate";"bool ftruncate(resource handle, int size)";"Truncates a file to a given length";"bool";
"706";"Filesystem";"fwrite";"int fwrite(resource handle, string string[, int length])";"Binary-safe file write";"int";
"707";"Filesystem";"glob";"array glob(string pattern[, int flags])";"Find pathnames matching a pattern";"array";
"708";"Filesystem";"is_dir";"bool is_dir(string filename)";"Tells whether the filename is a directory";"bool";
"709";"Filesystem";"is_executable";"bool is_executable(string filename)";"Tells whether the filename is executable";"bool";
"710";"Filesystem";"is_file";"bool is_file(string filename)";"Tells whether the filename is a regular file";"bool";
"711";"Filesystem";"is_link";"bool is_link(string filename)";"Tells whether the filename is a symbolic link";"bool";
"712";"Filesystem";"is_readable";"bool is_readable(string filename)";"Tells whether the filename is readable";"bool";
"713";"Filesystem";"is_uploaded_file";"bool is_uploaded_file(string filename)";"Tells whether the file was uploaded via HTTP POST";"bool";
"714";"Filesystem";"is_writable";"bool is_writable(string filename)";"Tells whether the filename is writable";"bool";
"715";"Filesystem";"is_writeable";;"Alias of is_writable";;
"716";"Filesystem";"link";"bool link(string target, string link)";"Create a hard link";"bool";
"717";"Filesystem";"linkinfo";"int linkinfo(string path)";"Gets information about a link";"int";
"718";"Filesystem";"lstat";"array lstat(string filename)";"Gives information about a file or symbolic link";"array";
"719";"Filesystem";"mkdir";"bool mkdir(string pathname[, int mode[, bool recursive[, resource context]]])";"Makes directory";"bool";
"720";"Filesystem";"move_uploaded_file";"bool move_uploaded_file(string filename, string destination)";"Moves an uploaded file to a new location";"bool";
"721";"Filesystem";"parse_ini_file";"array parse_ini_file(string filename[, bool process_sections])";"Parse a configuration file";"array";
"722";"Filesystem";"pathinfo";"array pathinfo(string path)";"Returns information about a file path";"array";
"723";"Filesystem";"pclose";"int pclose(resource handle)";"Closes process file pointer";"int";
"724";"Filesystem";"popen";"resource popen(string command, string mode)";"Opens process file pointer";"resource";
"725";"Filesystem";"readfile";"int readfile(string filename[, bool use_include_path[, resource context]])";"Outputs a file";"int";
"726";"Filesystem";"readlink";"string readlink(string path)";"Returns the target of a symbolic link";"string";
"727";"Filesystem";"realpath";"string realpath(string path)";"Returns canonicalized absolute pathname";"string";
"728";"Filesystem";"rename";"bool rename(string oldname, string newname[, resource context])";"Renames a file or directory";"bool";
"729";"Filesystem";"rewind";"bool rewind(resource handle)";"Rewind the position of a file pointer";"bool";
"730";"Filesystem";"rmdir";"bool rmdir(string dirname[, resource context])";"Removes directory";"bool";
"731";"Filesystem";"set_file_buffer";;"Alias of stream_set_write_buffer";;
"732";"Filesystem";"stat";"array stat(string filename)";"Gives information about a file";"array";
"733";"Filesystem";"symlink";"bool symlink(string target, string link)";"Creates a symbolic link";"bool";
"734";"Filesystem";"tempnam";"string tempnam(string dir, string prefix)";"Create file with unique file name";"string";
"735";"Filesystem";"tmpfile";"resource tmpfile()";"Creates a temporary file";"resource";
"736";"Filesystem";"touch";"bool touch(string filename[, int time[, int atime]])";"Sets access and modification time of file";"bool";
"737";"Filesystem";"umask";"int umask([int mask])";"Changes the current umask";"int";
"738";"Filesystem";"unlink";"bool unlink(string filename[, resource context])";"Deletes a file";"bool";
"739";"FDF";"fdf_add_doc_javascript";"bool fdf_add_doc_javascript(resource fdfdoc, string script_name, string script_code)";"Adds javascript code to the FDF document";"bool";
"740";"FDF";"fdf_add_template";"bool fdf_add_template(resource fdfdoc, int newpage, string filename, string template, int rename)";"Adds a template into the FDF document";"bool";
"741";"FDF";"fdf_close";"bool fdf_close(resource fdf_document)";"Close an FDF document";"bool";
"742";"FDF";"fdf_create";"resource fdf_create()";"Create a new FDF document";"resource";
"743";"FDF";"fdf_enum_values";"bool fdf_enum_values(resource fdfdoc, callback function[, mixed userdata])";"Call a user defined function for each document value";"bool";
"744";"FDF";"fdf_errno";"int fdf_errno()";"Return error code for last fdf operation";"int";
"745";"FDF";"fdf_error";"string fdf_error([int error_code])";"Return error description for fdf error code";"string";
"746";"FDF";"fdf_get_ap";"bool fdf_get_ap(resource fdf_document, string field, int face, string filename)";"Get the appearance of a field";"bool";
"747";"FDF";"fdf_get_attachment";"array fdf_get_attachment(resource fdf_document, string fieldname, string savepath)";"Extracts uploaded file embedded in the FDF";"array";
"748";"FDF";"fdf_get_encoding";"string fdf_get_encoding(resource fdf_document)";"Get the value of the /Encoding key";"string";
"749";"FDF";"fdf_get_file";"string fdf_get_file(resource fdf_document)";"Get the value of the /F key";"string";
"750";"FDF";"fdf_get_flags";"fdf_get_flags()";"Gets the flags of a field";;
"751";"FDF";"fdf_get_opt";"mixed fdf_get_opt(resource fdfdof, string fieldname[, int element])";"Gets a value from the opt array of a field";"mixed";
"752";"FDF";"fdf_get_status";"string fdf_get_status(resource fdf_document)";"Get the value of the /STATUS key";"string";
"753";"FDF";"fdf_get_value";"string fdf_get_value(resource fdf_document, string fieldname[, int which])";"Get the value of a field";"string";
"754";"FDF";"fdf_get_version";"string fdf_get_version([resource fdf_document])";"Gets version number for FDF API or file";"string";
"755";"FDF";"fdf_header";"bool fdf_header()";"Sets FDF-specific output headers";"bool";
"756";"FDF";"fdf_next_field_name";"string fdf_next_field_name(resource fdf_document[, string fieldname])";"Get the next field name";"string";
"757";"FDF";"fdf_open_string";"resource fdf_open_string(string fdf_data)";"Read a FDF document from a string";"resource";
"758";"FDF";"fdf_open";"resource fdf_open(string filename)";"Open a FDF document";"resource";
"759";"FDF";"fdf_remove_item";"bool fdf_remove_item(resource fdfdoc, string fieldname, int item)";"Sets target frame for form";"bool";
"760";"FDF";"fdf_save_string";"string fdf_save_string(resource fdf_document)";"Returns the FDF document as a string";"string";
"761";"FDF";"fdf_save";"bool fdf_save(resource fdf_document[, string filename])";"Save a FDF document";"bool";
"762";"FDF";"fdf_set_ap";"bool fdf_set_ap(resource fdf_document, string field_name, int face, string filename, int page_number)";"Set the appearance of a field";"bool";
"763";"FDF";"fdf_set_encoding";"bool fdf_set_encoding(resource fdf_document, string encoding)";"Sets FDF character encoding";"bool";
"764";"FDF";"fdf_set_file";"bool fdf_set_file(resource fdf_document, string url[, string target_frame])";"Set PDF document to display FDF data in";"bool";
"765";"FDF";"fdf_set_flags";"bool fdf_set_flags(resource fdf_document, string fieldname, int whichFlags, int newFlags)";"Sets a flag of a field";"bool";
"766";"FDF";"fdf_set_javascript_action";"bool fdf_set_javascript_action(resource fdf_document, string fieldname, int trigger, string script)";"Sets an javascript action of a field";"bool";
"767";"FDF";"fdf_set_opt";"bool fdf_set_opt(resource fdf_document, string fieldname, int element, string str1, string str2)";"Sets an option of a field";"bool";
"768";"FDF";"fdf_set_status";"bool fdf_set_status(resource fdf_document, string status)";"Set the value of the /STATUS key";"bool";
"769";"FDF";"fdf_set_submit_form_action";"bool fdf_set_submit_form_action(resource fdf_document, string fieldname, int trigger, string script, int flags)";"Sets a submit form action of a field";"bool";
"770";"FDF";"fdf_set_target_frame";"bool fdf_set_target_frame(resource fdf_document, string frame_name)";"Set target frame for form display";"bool";
"771";"FDF";"fdf_set_value";"bool fdf_set_value(resource fdf_document, string fieldname, mixed value[, int isName])";"Set the value of a field";"bool";
"772";"FDF";"fdf_set_version";"string fdf_set_version(resource fdf_document, string version)";"Sets version number for a FDF file";"string";
"773";"FriBiDi";"fribidi_log2vis";"string fribidi_log2vis(string str, string direction, int charset)";"Convert a logical string to a visual one";"string";
"774";"FTP";"ftp_alloc";"bool ftp_alloc(resource ftp_stream, int filesize[, string &result])";"Allocates space for a file to be uploaded.";"bool";
"775";"FTP";"ftp_cdup";"bool ftp_cdup(resource ftp_stream)";"Changes to the parent directory";"bool";
"776";"FTP";"ftp_chdir";"bool ftp_chdir(resource ftp_stream, string directory)";"Changes directories on a FTP server";"bool";
"777";"FTP";"ftp_chmod";"string ftp_chmod(resource ftp_stream, int mode, string filename)";"Set permissions on a file via FTP";"string";
"778";"FTP";"ftp_close";"void ftp_close(resource ftp_stream)";"Closes an FTP connection";"void";
"779";"FTP";"ftp_connect";"resource ftp_connect(string host[, int port[, int timeout]])";"Opens an FTP connection";"resource";
"780";"FTP";"ftp_delete";"bool ftp_delete(resource ftp_stream, string path)";"Deletes a file on the FTP server";"bool";
"781";"FTP";"ftp_exec";"bool ftp_exec(resource ftp_stream, string command)";"Requests execution of a program on the FTP server";"bool";
"782";"FTP";"ftp_fget";"bool ftp_fget(resource ftp_stream, resource handle, string remote_file, int mode[, int resumepos])";"Downloads a file from the FTP server and saves to an open file";"bool";
"783";"FTP";"ftp_fput";"bool ftp_fput(resource ftp_stream, string remote_file, resource handle, int mode[, int startpos])";"Uploads from an open file to the FTP server";"bool";
"784";"FTP";"ftp_get_option";"mixed ftp_get_option(resource ftp_stream, int option)";"Retrieves various runtime behaviours of the current FTP stream";"mixed";
"785";"FTP";"ftp_get";"bool ftp_get(resource ftp_stream, string local_file, string remote_file, int mode[, int resumepos])";"Downloads a file from the FTP server";"bool";
"786";"FTP";"ftp_login";"bool ftp_login(resource ftp_stream, string username, string password)";"Logs in to an FTP connection";"bool";
"787";"FTP";"ftp_mdtm";"int ftp_mdtm(resource ftp_stream, string remote_file)";"Returns the last modified time of the given file";"int";
"788";"FTP";"ftp_mkdir";"string ftp_mkdir(resource ftp_stream, string directory)";"Creates a directory";"string";
"789";"FTP";"ftp_nb_continue";"int ftp_nb_continue(resource ftp_stream)";"Continues retrieving/sending a file (non-blocking)";"int";
"790";"FTP";"ftp_nb_fget";"int ftp_nb_fget(resource ftp_stream, resource handle, string remote_file, int mode[, int resumepos])";"Retrieves a file from the FTP server and writes it to an open file (non-blocking)";"int";
"791";"FTP";"ftp_nb_fput";"int ftp_nb_fput(resource ftp_stream, string remote_file, resource handle, int mode[, int startpos])";"Stores a file from an open file to the FTP server (non-blocking)";"int";
"792";"FTP";"ftp_nb_get";"int ftp_nb_get(resource ftp_stream, string local_file, string remote_file, int mode[, int resumepos])";"Retrieves a file from the FTP server and writes it to a local file (non-blocking)";"int";
"793";"FTP";"ftp_nb_put";"int ftp_nb_put(resource ftp_stream, string remote_file, string local_file, int mode[, int startpos])";"Stores a file on the FTP server (non-blocking)";"int";
"794";"FTP";"ftp_nlist";"array ftp_nlist(resource ftp_stream, string directory)";"Returns a list of files in the given directory";"array";
"795";"FTP";"ftp_pasv";"bool ftp_pasv(resource ftp_stream, bool pasv)";"Turns passive mode on or off";"bool";
"796";"FTP";"ftp_put";"bool ftp_put(resource ftp_stream, string remote_file, string local_file, int mode[, int startpos])";"Uploads a file to the FTP server";"bool";
"797";"FTP";"ftp_pwd";"string ftp_pwd(resource ftp_stream)";"Returns the current directory name";"string";
"798";"FTP";"ftp_quit";;"Alias of ftp_close";;
"799";"FTP";"ftp_raw";"array ftp_raw(resource ftp_stream, string command)";"Sends an arbitrary command to an FTP server";"array";
"800";"FTP";"ftp_rawlist";"array ftp_rawlist(resource ftp_stream, string directory)";"Returns a detailed list of files in the given directory";"array";
"801";"FTP";"ftp_rename";"bool ftp_rename(resource ftp_stream, string from, string to)";"Renames a file on the FTP server";"bool";
"802";"FTP";"ftp_rmdir";"bool ftp_rmdir(resource ftp_stream, string directory)";"Removes a directory";"bool";
"803";"FTP";"ftp_set_option";"bool ftp_set_option(resource ftp_stream, int option, mixed value)";"Set miscellaneous runtime FTP options";"bool";
"804";"FTP";"ftp_site";"bool ftp_site(resource ftp_stream, string cmd)";"Sends a SITE command to the server";"bool";
"805";"FTP";"ftp_size";"int ftp_size(resource ftp_stream, string remote_file)";"Returns the size of the given file";"int";
"806";"FTP";"ftp_ssl_connect";"resource ftp_ssl_connect(string host[, int port[, int timeout]])";"Opens an Secure SSL-FTP connection";"resource";
"807";"FTP";"ftp_systype";"string ftp_systype(resource ftp_stream)";"Returns the system type identifier of the remote FTP server";"string";
"808";"Function handling";"call_user_func_array";"mixed call_user_func_array(callback function[, array param_arr])";"Call a user function given with an array of parameters";"mixed";
"809";"Function handling";"call_user_func";"mixed call_user_func(callback function[, mixed parameter[, mixed ...]])";"Call a user function given by the first parameter";"mixed";
"810";"Function handling";"create_function";"string create_function(string args, string code)";"Create an anonymous (lambda-style) function";"string";
"811";"Function handling";"func_get_arg";"mixed func_get_arg(int arg_num)";"Return an item from the argument list";"mixed";
"812";"Function handling";"func_num_args";"int func_num_args()";"Returns the number of arguments passed to the function";"int";
"813";"Function handling";"function_exists";"bool function_exists(string function_name)";"Return TRUE if the given function has been defined";"bool";
"814";"Function handling";"get_defined_functions";"array get_defined_functions()";"Returns an array of all defined functions";"array";
"815";"Function handling";"register_shutdown_function";"void register_shutdown_function(callback function)";"Register a function for execution on shutdown";"void";
"816";"Function handling";"register_tick_function";"void register_tick_function(callback function[, mixed arg])";"Register a function for execution on each tick";"void";
"817";"Function handling";"unregister_tick_function";"void unregister_tick_function(string function_name)";"De-register a function for execution on each tick";"void";
"818";"gettext";"bind_textdomain_codeset";"string bind_textdomain_codeset(string domain, string codeset)";"Specify the character encoding in which the messages from the DOMAIN message catalog will be returned";"string";
"819";"gettext";"bindtextdomain";"string bindtextdomain(string domain, string directory)";"Sets the path for a domain";"string";
"820";"gettext";"dcgettext";"string dcgettext(string domain, string message, int category)";"Overrides the domain for a single lookup";"string";
"821";"gettext";"dcngettext";"string dcngettext(string domain, string msgid1, string msgid2, int n, int category)";"Plural version of dcgettext";"string";
"822";"gettext";"dgettext";"string dgettext(string domain, string message)";"Override the current domain";"string";
"823";"gettext";"dngettext";"string dngettext(string domain, string msgid1, string msgid2, int n)";"Plural version of dgettext";"string";
"824";"gettext";"gettext";"string gettext(string message)";"Lookup a message in the current domain";"string";
"825";"gettext";"ngettext";"string ngettext(string msgid1, string msgid2, int n)";"Plural version of gettext";"string";
"826";"gettext";"textdomain";"string textdomain(string text_domain)";"Sets the default domain";"string";
"827";"GMP";"gmp_abs";"resource gmp_abs(resource a)";"Absolute value";"resource";
"828";"GMP";"gmp_add";"resource gmp_add(resource a, resource b)";"Add numbers";"resource";
"829";"GMP";"gmp_and";"resource gmp_and(resource a, resource b)";"Logical AND";"resource";
"830";"GMP";"gmp_clrbit";"void gmp_clrbit(resource &a, int index)";"Clear bit";"void";
"831";"GMP";"gmp_cmp";"int gmp_cmp(resource a, resource b)";"Compare numbers";"int";
"832";"GMP";"gmp_div_q";"resource gmp_div_q(resource a, resource b[, int round])";"Divide numbers";"resource";
"833";"GMP";"gmp_div_qr";"array gmp_div_qr(resource n, resource d[, int round])";"Divide numbers and get quotient and remainder";"array";
"834";"GMP";"gmp_div_r";"resource gmp_div_r(resource n, resource d[, int round])";"Remainder of the division of numbers";"resource";
"835";"GMP";"gmp_div";;"Alias of gmp_div_q";;
"836";"GMP";"gmp_divexact";"resource gmp_divexact(resource n, resource d)";"Exact division of numbers";"resource";
"837";"GMP";"gmp_fact";"resource gmp_fact(int a)";"Factorial";"resource";
"838";"GMP";"gmp_gcd";"resource gmp_gcd(resource a, resource b)";"Calculate GCD";"resource";
"839";"GMP";"gmp_gcdext";"array gmp_gcdext(resource a, resource b)";"Calculate GCD and multipliers";"array";
"840";"GMP";"gmp_hamdist";"int gmp_hamdist(resource a, resource b)";"Hamming distance";"int";
"841";"GMP";"gmp_init";"resource gmp_init(mixed number)";"Create GMP number";"resource";
"842";"GMP";"gmp_intval";"int gmp_intval(resource gmpnumber)";"Convert GMP number to integer";"int";
"843";"GMP";"gmp_invert";"resource gmp_invert(resource a, resource b)";"Inverse by modulo";"resource";
"844";"GMP";"gmp_jacobi";"int gmp_jacobi(resource a, resource p)";"Jacobi symbol";"int";
"845";"GMP";"gmp_legendre";"int gmp_legendre(resource a, resource p)";"Legendre symbol";"int";
"846";"GMP";"gmp_mod";"resource gmp_mod(resource n, resource d)";"Modulo operation";"resource";
"847";"GMP";"gmp_mul";"resource gmp_mul(resource a, resource b)";"Multiply numbers";"resource";
"848";"GMP";"gmp_neg";"resource gmp_neg(resource a)";"Negate number";"resource";
"849";"GMP";"gmp_or";"resource gmp_or(resource a, resource b)";"Logical OR";"resource";
"850";"GMP";"gmp_perfect_square";"bool gmp_perfect_square(resource a)";"Perfect square check";"bool";
"851";"GMP";"gmp_popcount";"int gmp_popcount(resource a)";"Population count";"int";
"852";"GMP";"gmp_pow";"resource gmp_pow(resource base, int exp)";"Raise number into power";"resource";
"853";"GMP";"gmp_powm";"resource gmp_powm(resource base, resource exp, resource mod)";"Raise number into power with modulo";"resource";
"854";"GMP";"gmp_prob_prime";"int gmp_prob_prime(resource a[, int reps])";"Check if number is probably prime";"int";
"855";"GMP";"gmp_random";"resource gmp_random(int limiter)";"Random number";"resource";
"856";"GMP";"gmp_scan0";"int gmp_scan0(resource a, int start)";"Scan for 0";"int";
"857";"GMP";"gmp_scan1";"int gmp_scan1(resource a, int start)";"Scan for 1";"int";
"858";"GMP";"gmp_setbit";"void gmp_setbit(resource &a, int index[, bool set_clear])";"Set bit";"void";
"859";"GMP";"gmp_sign";"int gmp_sign(resource a)";"Sign of number";"int";
"860";"GMP";"gmp_sqrt";"resource gmp_sqrt(resource a)";"Calculate square root";"resource";
"861";"GMP";"gmp_sqrtrem";"array gmp_sqrtrem(resource a)";"Square root with remainder";"array";
"862";"GMP";"gmp_strval";"string gmp_strval(resource gmpnumber[, int base])";"Convert GMP number to string";"string";
"863";"GMP";"gmp_sub";"resource gmp_sub(resource a, resource b)";"Subtract numbers";"resource";
"864";"GMP";"gmp_xor";"resource gmp_xor(resource a, resource b)";"Logical XOR";"resource";
"865";"HTTP";"header";"void header(string string[, bool replace[, int http_response_code]])";"Send a raw HTTP header";"void";
"866";"HTTP";"headers_list";"array headers_list()";"Returns a list of response headers sent (or ready to send)";"array";
"867";"HTTP";"headers_sent";"bool headers_sent([string &file[, int &line]])";"Checks if or where headers have been sent";"bool";
"868";"HTTP";"setcookie";"bool setcookie(string name[, string value[, int expire[, string path[, string domain[, int secure]]]]])";"Send a cookie";"bool";
"869";"HTTP";"setrawcookie";"bool setrawcookie(string name[, string value[, int expire[, string path[, string domain[, int secure]]]]])";"Send a cookie without urlencoding the cookie value";"bool";
"870";"Hyperwave";"hw_Array2Objrec";"string hw_array2objrec(array object_array)";"convert attributes from object array to object record";"string";
"871";"Hyperwave";"hw_changeobject";"void hw_changeobject(int link, int objid, array attributes)";"Changes attributes of an object (obsolete)";"void";
"872";"Hyperwave";"hw_Children";"array hw_children(int connection, int objectID)";"object ids of children";"array";
"873";"Hyperwave";"hw_ChildrenObj";"array hw_childrenobj(int connection, int objectID)";"object records of children";"array";
"874";"Hyperwave";"hw_Close";"int hw_close(int connection)";"closes the Hyperwave connection";"int";
"875";"Hyperwave";"hw_Connect";"int hw_connect(string host, int port, string username, string password)";"opens a connection";"int";
"876";"Hyperwave";"hw_connection_info";"void hw_connection_info(int link)";"Prints information about the connection to Hyperwave server";"void";
"877";"Hyperwave";"hw_cp";"int hw_cp(int connection, array object_id_array, int destination_id)";"Copies objects";"int";
"878";"Hyperwave";"hw_Deleteobject";"int hw_deleteobject(int connection, int object_to_delete)";"deletes object";"int";
"879";"Hyperwave";"hw_DocByAnchor";"int hw_docbyanchor(int connection, int anchorID)";"object id object belonging to anchor";"int";
"880";"Hyperwave";"hw_DocByAnchorObj";"string hw_docbyanchorobj(int connection, int anchorID)";"object record object belonging to anchor";"string";
"881";"Hyperwave";"hw_Document_Attributes";"string hw_document_attributes(int hw_document)";"object record of hw_document";"string";
"882";"Hyperwave";"hw_Document_BodyTag";"string hw_document_bodytag(int hw_document)";"body tag of hw_document";"string";
"883";"Hyperwave";"hw_Document_Content";"string hw_document_content(int hw_document)";"returns content of hw_document";"string";
"884";"Hyperwave";"hw_Document_SetContent";"string hw_document_setcontent(int hw_document, string content)";"sets/replaces content of hw_document";"string";
"885";"Hyperwave";"hw_Document_Size";"int hw_document_size(int hw_document)";"size of hw_document";"int";
"886";"Hyperwave";"hw_dummy";"string hw_dummy(int link, int id, int msgid)";"Hyperwave dummy function";"string";
"887";"Hyperwave";"hw_EditText";"int hw_edittext(int connection, int hw_document)";"retrieve text document";"int";
"888";"Hyperwave";"hw_Error";"int hw_error(int connection)";"error number";"int";
"889";"Hyperwave";"hw_ErrorMsg";"string hw_errormsg(int connection)";"returns error message";"string";
"890";"Hyperwave";"hw_Free_Document";"int hw_free_document(int hw_document)";"frees hw_document";"int";
"891";"Hyperwave";"hw_GetAnchors";"array hw_getanchors(int connection, int objectID)";"object ids of anchors of document";"array";
"892";"Hyperwave";"hw_GetAnchorsObj";"array hw_getanchorsobj(int connection, int objectID)";"object records of anchors of document";"array";
"893";"Hyperwave";"hw_GetAndLock";"string hw_getandlock(int connection, int objectID)";"return object record and lock object";"string";
"894";"Hyperwave";"hw_GetChildColl";"array hw_getchildcoll(int connection, int objectID)";"object ids of child collections";"array";
"895";"Hyperwave";"hw_GetChildCollObj";"array hw_getchildcollobj(int connection, int objectID)";"object records of child collections";"array";
"896";"Hyperwave";"hw_GetChildDocColl";"array hw_getchilddoccoll(int connection, int objectID)";"object ids of child documents of collection";"array";
"897";"Hyperwave";"hw_GetChildDocCollObj";"array hw_getchilddoccollobj(int connection, int objectID)";"object records of child documents of collection";"array";
"898";"Hyperwave";"hw_GetObject";"array hw_getobject(int connection, mixed objectID, string query)";"object record";"array";
"899";"Hyperwave";"hw_GetObjectByQuery";"array hw_getobjectbyquery(int connection, string query, int max_hits)";"search object";"array";
"900";"Hyperwave";"hw_GetObjectByQueryColl";"array hw_getobjectbyquerycoll(int connection, int objectID, string query, int max_hits)";"search object in collection";"array";
"901";"Hyperwave";"hw_GetObjectByQueryCollObj";"array hw_getobjectbyquerycollobj(int connection, int objectID, string query, int max_hits)";"search object in collection";"array";
"902";"Hyperwave";"hw_GetObjectByQueryObj";"array hw_getobjectbyqueryobj(int connection, string query, int max_hits)";"search object";"array";
"903";"Hyperwave";"hw_GetParents";"array hw_getparents(int connection, int objectID)";"object ids of parents";"array";
"904";"Hyperwave";"hw_GetParentsObj";"array hw_getparentsobj(int connection, int objectID)";"object records of parents";"array";
"905";"Hyperwave";"hw_getrellink";"string hw_getrellink(int link, int rootid, int sourceid, int destid)";"Get link from source to dest relative to rootid";"string";
"906";"Hyperwave";"hw_GetRemote";"int hw_getremote(int connection, int objectID)";"Gets a remote document";"int";
"907";"Hyperwave";"hw_getremotechildren";"int hw_getremotechildren(int connection, string object_record)";"Gets children of remote document";"int";
"908";"Hyperwave";"hw_GetSrcByDestObj";"array hw_getsrcbydestobj(int connection, int objectID)";"Returns anchors pointing at object";"array";
"909";"Hyperwave";"hw_GetText";"int hw_gettext(int connection, int objectID[, mixed rootID/prefix])";"retrieve text document";"int";
"910";"Hyperwave";"hw_getusername";"string hw_getusername(int connection)";"name of currently logged in user";"string";
"911";"Hyperwave";"hw_Identify";"int hw_identify(string username, string password)";"identifies as user";"int";
"912";"Hyperwave";"hw_InCollections";"array hw_incollections(int connection, array object_id_array, array collection_id_array, int return_collections)";"check if object ids in collections";"array";
"913";"Hyperwave";"hw_Info";"string hw_info(int connection)";"info about connection";"string";
"914";"Hyperwave";"hw_InsColl";"int hw_inscoll(int connection, int objectID, array object_array)";"insert collection";"int";
"915";"Hyperwave";"hw_InsDoc";"int hw_insdoc(int connection, int parentID, string object_record, string text)";"insert document";"int";
"916";"Hyperwave";"hw_insertanchors";"string hw_insertanchors(int hwdoc, array anchorecs, array dest[, array urlprefixes])";"Inserts only anchors into text";"string";
"917";"Hyperwave";"hw_InsertDocument";"int hw_insertdocument(int connection, int parent_id, int hw_document)";"upload any document";"int";
"918";"Hyperwave";"hw_InsertObject";"int hw_insertobject(int connection, string object_rec, string parameter)";"inserts an object record";"int";
"919";"Hyperwave";"hw_mapid";"int hw_mapid(int connection, int server_id, int object_id)";"Maps global id on virtual local id";"int";
"920";"Hyperwave";"hw_Modifyobject";"int hw_modifyobject(int connection, int object_to_change, array remove, array add, int mode)";"modifies object record";"int";
"921";"Hyperwave";"hw_mv";"int hw_mv(int connection, array object_id_array, int source_id, int destination_id)";"Moves objects";"int";
"922";"Hyperwave";"hw_New_Document";"int hw_new_document(string object_record, string document_data, int document_size)";"create new document";"int";
"923";"Hyperwave";"hw_objrec2array";"array hw_objrec2array(string object_record[, array format])";"Convert attributes from object record to object array";"array";
"924";"Hyperwave";"hw_Output_Document";"int hw_output_document(int hw_document)";"prints hw_document";"int";
"925";"Hyperwave";"hw_pConnect";"int hw_pconnect(string host, int port, string username, string password)";"make a persistent database connection";"int";
"926";"Hyperwave";"hw_PipeDocument";"int hw_pipedocument(int connection, int objectID)";"retrieve any document";"int";
"927";"Hyperwave";"hw_Root";"int hw_root( )";"root object id";"int";
"928";"Hyperwave";"hw_setlinkroot";"void hw_setlinkroot(int link, int rootid)";"Set the id to which links are calculated";"void";
"929";"Hyperwave";"hw_stat";"string hw_stat(int link)";"Returns status string";"string";
"930";"Hyperwave";"hw_Unlock";"int hw_unlock(int connection, int objectID)";"unlock object";"int";
"931";"Hyperwave";"hw_Who";"int hw_who(int connection)";"List of currently logged in users";"int";
"932";"Hyperwave API";"hw_api_attribute->key";"string key()";"Returns key of the attribute";"string";
"933";"Hyperwave API";"hw_api_attribute->langdepvalue";"string langdepvalue(string language)";"Returns value for a given language";"string";
"934";"Hyperwave API";"hw_api_attribute->value";"string value()";"Returns value of the attribute";"string";
"935";"Hyperwave API";"hw_api_attribute->values";"array values()";"Returns all values of the attribute";"array";
"936";"Hyperwave API";"hw_api_attribute";"object attribute([string name[, string value]])";"Creates instance of class hw_api_attribute";"object";
"937";"Hyperwave API";"hw_api->checkin";"object checkin(array parameter)";"Checks in an object";"object";
"938";"Hyperwave API";"hw_api->checkout";"object checkout(array parameter)";"Checks out an object";"object";
"939";"Hyperwave API";"hw_api->children";"array children(array parameter)";"Returns children of an object";"array";
"940";"Hyperwave API";"hw_api_content->mimetype";"string mimetype()";"Returns mimetype";"string";
"941";"Hyperwave API";"hw_api_content->read";"string read(string buffer, integer len)";"Read content";"string";
"942";"Hyperwave API";"hw_api->content";"object content(array parameter)";"Returns content of an object";"object";
"943";"Hyperwave API";"hw_api->copy";"object copy(array parameter)";"Copies physically";"object";
"944";"Hyperwave API";"hw_api->dbstat";"object dbstat(array parameter)";"Returns statistics about database server";"object";
"945";"Hyperwave API";"hw_api->dcstat";"object dcstat(array parameter)";"Returns statistics about document cache server";"object";
"946";"Hyperwave API";"hw_api->dstanchors";"object dstanchors(array parameter)";"Returns a list of all destination anchors";"object";
"947";"Hyperwave API";"hw_api->dstofsrcanchors";"object dstofsrcanchors(array parameter)";"Returns destination of a source anchor";"object";
"948";"Hyperwave API";"hw_api_error->count";"int count()";"Returns number of reasons";"int";
"949";"Hyperwave API";"hw_api_error->reason";"object reason()";"Returns reason of error";"object";
"950";"Hyperwave API";"hw_api->find";"array find(array parameter)";"Search for objects";"array";
"951";"Hyperwave API";"hw_api->ftstat";"object ftstat(array parameter)";"Returns statistics about fulltext server";"object";
"952";"Hyperwave API";"hwapi_hgcsp";"object hwapi_hgcsp(string hostname[, int port])";"Returns object of class hw_api";"object";
"953";"Hyperwave API";"hw_api->hwstat";"object hwstat(array parameter)";"Returns statistics about Hyperwave server";"object";
"954";"Hyperwave API";"hw_api->identify";"object identify(array parameter)";"Log into Hyperwave Server";"object";
"955";"Hyperwave API";"hw_api->info";"object info(array parameter)";"Returns information about server configuration";"object";
"956";"Hyperwave API";"hw_api->insert";"object insert(array parameter)";"Inserts a new object";"object";
"957";"Hyperwave API";"hw_api->insertanchor";"object insertanchor(array parameter)";"Inserts a new object of type anchor";"object";
"958";"Hyperwave API";"hw_api->insertcollection";"object insertcollection(array parameter)";"Inserts a new object of type collection";"object";
"959";"Hyperwave API";"hw_api->insertdocument";"object insertdocument(array parameter)";"Inserts a new object of type document";"object";
"960";"Hyperwave API";"hw_api->link";"object link(array parameter)";"Creates a link to an object";"object";
"961";"Hyperwave API";"hw_api->lock";"object lock(array parameter)";"Locks an object";"object";
"962";"Hyperwave API";"hw_api->move";"object move(array parameter)";"Moves object between collections";"object";
"963";"Hyperwave API";"hw_api_content";"string content(string content, string mimetype)";"Create new instance of class hw_api_content";"string";
"964";"Hyperwave API";"hw_api_object->assign";"object assign(array parameter)";"Clones object";"object";
"965";"Hyperwave API";"hw_api_object->attreditable";"bool attreditable(array parameter)";"Checks whether an attribute is editable";"bool";
"966";"Hyperwave API";"hw_api_object->count";"int count(array parameter)";"Returns number of attributes";"int";
"967";"Hyperwave API";"hw_api_object->insert";"bool insert(object attribute)";"Inserts new attribute";"bool";
"968";"Hyperwave API";"hw_api_object";"object hw_api_object(array parameter)";"Creates a new instance of class hw_api_object";"object";
"969";"Hyperwave API";"hw_api_object->remove";"bool remove(string name)";"Removes attribute";"bool";
"970";"Hyperwave API";"hw_api_object->title";"string title(array parameter)";"Returns the title attribute";"string";
"971";"Hyperwave API";"hw_api_object->value";"string value(string name)";"Returns value of attribute";"string";
"972";"Hyperwave API";"hw_api->object";"object hw_api->object(array parameter)";"Retrieve attribute information";"object";
"973";"Hyperwave API";"hw_api->objectbyanchor";"object objectbyanchor(array parameter)";"Returns the object an anchor belongs to";"object";
"974";"Hyperwave API";"hw_api->parents";"array parents(array parameter)";"Returns parents of an object";"array";
"975";"Hyperwave API";"hw_api_reason->description";"string description()";"Returns description of reason";"string";
"976";"Hyperwave API";"hw_api_reason->type";"object type()";"Returns type of reason";"object";
"977";"Hyperwave API";"hw_api->remove";"object remove(array parameter)";"Delete an object";"object";
"978";"Hyperwave API";"hw_api->replace";"object replace(array parameter)";"Replaces an object";"object";
"979";"Hyperwave API";"hw_api->setcommitedversion";"object setcommitedversion(array parameter)";"Commits version other than last version";"object";
"980";"Hyperwave API";"hw_api->srcanchors";"object srcanchors(array parameter)";"Returns a list of all source anchors";"object";
"981";"Hyperwave API";"hw_api->srcsofdst";"object srcsofdst(array parameter)";"Returns source of a destination object";"object";
"982";"Hyperwave API";"hw_api->unlock";"object unlock(array parameter)";"Unlocks a locked object";"object";
"983";"Hyperwave API";"hw_api->user";"object user(array parameter)";"Returns the own user object";"object";
"984";"Hyperwave API";"hw_api->userlist";"object userlist(array parameter)";"Returns a list of all logged in users";"object";
"985";"iconv";"iconv_get_encoding";"mixed iconv_get_encoding([string type])";"Retrieve internal configuration variables of iconv extension";"mixed";
"986";"iconv";"iconv_mime_decode_headers";"array iconv_mime_decode_headers(string encoded_headers[, int mode[, string charset]])";"Decodes multiple MIME header fields at once";"array";
"987";"iconv";"iconv_mime_decode";"string iconv_mime_decode(string encoded_header[, int mode[, string charset]])";"Decodes a MIME header field";"string";
"988";"iconv";"iconv_mime_encode";"string iconv_mime_encode(string field_name, string field_value[, array preferences])";"Composes a MIME header field";"string";
"989";"iconv";"iconv_set_encoding";"bool iconv_set_encoding(string type, string charset)";"Set current setting for character encoding conversion";"bool";
"990";"iconv";"iconv_strlen";"int iconv_strlen(string str[, string charset])";"Returns the character count of string";"int";
"991";"iconv";"iconv_strpos";"int iconv_strpos(string haystack, string needle, int offset[, string charset])";"Finds position of first occurrence of a needle within a haystack.";"int";
"992";"iconv";"iconv_strrpos";"string iconv_strrpos(string haystack, string needle[, string charset])";"Finds the last occurrence of a needle within the specified range of haystack.";"string";
"993";"iconv";"iconv_substr";"string iconv_substr(string str, int offset[, int length[, string charset]])";"Cut out part of a string";"string";
"994";"iconv";"iconv";"string iconv(string in_charset, string out_charset, string str)";"Convert string to requested character encoding";"string";
"995";"iconv";"ob_iconv_handler";"array ob_iconv_handler(string contents, int status)";"Convert character encoding as output buffer handler";"array";
"996";"Image";"exif_imagetype";"int exif_imagetype(string filename)";"Determine the type of an image";"int";
"997";"Image";"exif_read_data";"array exif_read_data(string filename[, string sections[, bool arrays[, bool thumbnail]]])";"Reads the EXIF headers from JPEG or TIFF. This way you can read meta data generated by digital cameras";"array";
"998";"Image";"exif_thumbnail";"string exif_thumbnail(string filename[, int &width[, int &height[, int &imagetype]]])";"Retrieve the embedded thumbnail of a TIFF or JPEG image";"string";
"999";"Image";"gd_info";"array gd_info()";"Retrieve information about the currently installed GD library";"array";
"1000";"Image";"getimagesize";"array getimagesize(string filename[, array imageinfo])";"Get the size of an image";"array";
"1001";"Image";"image_type_to_extension";"string image_type_to_extension(int imagetype[, bool include_dot])";"Get file extension for image type";"string";
"1002";"Image";"image_type_to_mime_type";"string  image_type_to_mime_type(int imagetype)";"Get Mime-Type for image-type returned by getimagesize, exif_read_data, exif_thumbnail, exif_imagetype";"string";
"1003";"Image";"image2wbmp";"int image2wbmp(resource image[, string filename[, int threshold]])";"Output image to browser or file";"int";
"1004";"Image";"imagealphablending";"bool imagealphablending(resource image, bool blendmode)";"Set the blending mode for an image";"bool";
"1005";"Image";"imageantialias";"bool imageantialias(resource im, bool on)";"Should antialias functions be used or not";"bool";
"1006";"Image";"imagearc";"int imagearc(resource image, int cx, int cy, int w, int h, int s, int e, int color)";"Draw a partial ellipse";"int";
"1007";"Image";"imagechar";"int imagechar(resource image, int font, int x, int y, string c, int color)";"Draw a character horizontally";"int";
"1008";"Image";"imagecharup";"int imagecharup(resource image, int font, int x, int y, string c, int color)";"Draw a character vertically";"int";
"1009";"Image";"imagecolorallocate";"int imagecolorallocate(resource image, int red, int green, int blue)";"Allocate a color for an image";"int";
"1010";"Image";"imagecolorallocatealpha";"int imagecolorallocatealpha(resource image, int red, int green, int blue, int alpha)";"Allocate a color for an image";"int";
"1011";"Image";"imagecolorat";"int imagecolorat(resource image, int x, int y)";"Get the index of the color of a pixel";"int";
"1012";"Image";"imagecolorclosest";"int imagecolorclosest(resource image, int red, int green, int blue)";"Get the index of the closest color to the specified color";"int";
"1013";"Image";"imagecolorclosestalpha";"int imagecolorclosestalpha(resource image, int red, int green, int blue, int alpha)";"Get the index of the closest color to the specified color + alpha";"int";
"1014";"Image";"imagecolorclosesthwb";"int imagecolorclosesthwb(resource image, int red, int green, int blue)";"Get the index of the color which has the hue, white and blackness nearest to the given color";"int";
"1015";"Image";"imagecolordeallocate";"int imagecolordeallocate(resource image, int color)";"De-allocate a color for an image";"int";
"1016";"Image";"imagecolorexact";"int imagecolorexact(resource image, int red, int green, int blue)";"Get the index of the specified color";"int";
"1017";"Image";"imagecolorexactalpha";"int imagecolorexactalpha(resource image, int red, int green, int blue, int alpha)";"Get the index of the specified color + alpha";"int";
"1018";"Image";"imagecolormatch";"bool imagecolormatch(resource image1, resource image2)";"Makes the colors of the palette version of an image more closely match the true color version";"bool";
"1019";"Image";"imagecolorresolve";"int imagecolorresolve(resource image, int red, int green, int blue)";"Get the index of the specified color or its closest possible alternative";"int";
"1020";"Image";"imagecolorresolvealpha";"int imagecolorresolvealpha(resource image, int red, int green, int blue, int alpha)";"Get the index of the specified color + alpha or its closest possible alternative";"int";
"1021";"Image";"imagecolorset";"bool imagecolorset(resource image, int index, int red, int green, int blue)";"Set the color for the specified palette index";"bool";
"1022";"Image";"imagecolorsforindex";"array imagecolorsforindex(resource image, int index)";"Get the colors for an index";"array";
"1023";"Image";"imagecolortransparent";"int imagecolortransparent(resource image[, int color])";"Define a color as transparent";"int";
"1024";"Image";"imagecopy";"int imagecopy(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h)";"Copy part of an image";"int";
"1025";"Image";"imagecopymerge";"int imagecopymerge(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)";"Copy and merge part of an image";"int";
"1026";"Image";"imagecopymergegray";"int imagecopymergegray(resource dst_im, resource src_im, int dst_x, int dst_y, int src_x, int src_y, int src_w, int src_h, int pct)";"Copy and merge part of an image with gray scale";"int";
"1027";"Image";"imagecopyresampled";"bool imagecopyresampled(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)";"Copy and resize part of an image with resampling";"bool";
"1028";"Image";"imagecopyresized";"int imagecopyresized(resource dst_im, resource src_im, int dstX, int dstY, int srcX, int srcY, int dstW, int dstH, int srcW, int srcH)";"Copy and resize part of an image";"int";
"1029";"Image";"imagecreate";"resource imagecreate(int x_size, int y_size)";"Create a new palette based image";"resource";
"1030";"Image";"imagecreatefromgd2";"resource imagecreatefromgd2(string filename)";"Create a new image from GD2 file or URL";"resource";
"1031";"Image";"imagecreatefromgd2part";"resource imagecreatefromgd2part(string filename, int srcX, int srcY, int width, int height)";"Create a new image from a given part of GD2 file or URL";"resource";
"1032";"Image";"imagecreatefromgd";"resource imagecreatefromgd(string filename)";"Create a new image from GD file or URL";"resource";
"1033";"Image";"imagecreatefromgif";"resource imagecreatefromgif(string filename)";"Create a new image from file or URL";"resource";
"1034";"Image";"imagecreatefromjpeg";"resource imagecreatefromjpeg(string filename)";"Create a new image from file or URL";"resource";
"1035";"Image";"imagecreatefrompng";"resource imagecreatefrompng(string filename)";"Create a new image from file or URL";"resource";
"1036";"Image";"imagecreatefromstring";"resource imagecreatefromstring(string image)";"Create a new image from the image stream in the string";"resource";
"1037";"Image";"imagecreatefromwbmp";"resource imagecreatefromwbmp(string filename)";"Create a new image from file or URL";"resource";
"1038";"Image";"imagecreatefromxbm";"resource imagecreatefromxbm(string filename)";"Create a new image from file or URL";"resource";
"1039";"Image";"imagecreatefromxpm";"resource imagecreatefromxpm(string filename)";"Create a new image from file or URL";"resource";
"1040";"Image";"imagecreatetruecolor";"resource imagecreatetruecolor(int x_size, int y_size)";"Create a new true color image";"resource";
"1041";"Image";"imagedashedline";"int imagedashedline(resource image, int x1, int y1, int x2, int y2, int color)";"Draw a dashed line";"int";
"1042";"Image";"imagedestroy";"int imagedestroy(resource image)";"Destroy an image";"int";
"1043";"Image";"imageellipse";"int imageellipse(resource image, int cx, int cy, int w, int h, int color)";"Draw an ellipse";"int";
"1044";"Image";"imagefill";"int imagefill(resource image, int x, int y, int color)";"Flood fill";"int";
"1045";"Image";"imagefilledarc";"bool imagefilledarc(resource image, int cx, int cy, int w, int h, int s, int e, int color, int style)";"Draw a partial ellipse and fill it";"bool";
"1046";"Image";"imagefilledellipse";"bool imagefilledellipse(resource image, int cx, int cy, int w, int h, int color)";"Draw a filled ellipse";"bool";
"1047";"Image";"imagefilledpolygon";"int imagefilledpolygon(resource image, array points, int num_points, int color)";"Draw a filled polygon";"int";
"1048";"Image";"imagefilledrectangle";"int imagefilledrectangle(resource image, int x1, int y1, int x2, int y2, int color)";"Draw a filled rectangle";"int";
"1049";"Image";"imagefilltoborder";"int imagefilltoborder(resource image, int x, int y, int border, int color)";"Flood fill to specific color";"int";
"1050";"Image";"imagefilter";"bool imagefilter(resource src_im, int filtertype[, int args])";"Applies Filter an image using a custom angle";"bool";
"1051";"Image";"imagefontheight";"int imagefontheight(int font)";"Get font height";"int";
"1052";"Image";"imagefontwidth";"int imagefontwidth(int font)";"Get font width";"int";
"1053";"Image";"imageftbbox";"array imageftbbox(int size, int angle, string font_file, string text[, array extrainfo])";"Give the bounding box of a text using fonts via freetype2";"array";
"1054";"Image";"imagefttext";"array imagefttext(resource image, int size, int angle, int x, int y, int col, string font_file, string text[, array extrainfo])";"Write text to the image using fonts using FreeType 2";"array";
"1055";"Image";"imagegammacorrect";"int imagegammacorrect(resource image, float inputgamma, float outputgamma)";"Apply a gamma correction to a GD image";"int";
"1056";"Image";"imagegd2";"int imagegd2(resource image[, string filename[, int chunk_size[, int type]]])";"Output GD2 image";"int";
"1057";"Image";"imagegd";"int imagegd(resource image[, string filename])";"Output GD image to browser or file";"int";
"1058";"Image";"imagegif";"int imagegif(resource image[, string filename])";"Output image to browser or file";"int";
"1059";"Image";"imageinterlace";"int imageinterlace(resource image[, int interlace])";"Enable or disable interlace";"int";
"1060";"Image";"imageistruecolor";"bool imageistruecolor(resource image)";"Finds whether an image is a truecolor image.";"bool";
"1061";"Image";"imagejpeg";"int imagejpeg(resource image[, string filename[, int quality]])";"Output image to browser or file";"int";
"1062";"Image";"imagelayereffect";"bool imagelayereffect(resource image, int effect)";"Set the alpha blending flag to use the bundled libgd layering effects";"bool";
"1063";"Image";"imageline";"int imageline(resource image, int x1, int y1, int x2, int y2, int color)";"Draw a line";"int";
"1064";"Image";"imageloadfont";"int imageloadfont(string file)";"Load a new font";"int";
"1065";"Image";"imagepalettecopy";"int imagepalettecopy(resource destination, resource source)";"Copy the palette from one image to another";"int";
"1066";"Image";"imagepng";"int imagepng(resource image[, string filename])";"Output a PNG image to either the browser or a file";"int";
"1067";"Image";"imagepolygon";"int imagepolygon(resource image, array points, int num_points, int color)";"Draw a polygon";"int";
"1068";"Image";"imagepsbbox";"array imagepsbbox(string text, int font, int size[, int space[, int tightness[, float angle]]])";"Give the bounding box of a text rectangle using PostScript Type1 fonts";"array";
"1069";"Image";"imagepscopyfont";"int imagepscopyfont(int fontindex)";"Make a copy of an already loaded font for further modification";"int";
"1070";"Image";"imagepsencodefont";"int imagepsencodefont(int font_index, string encodingfile)";"Change the character encoding vector of a font";"int";
"1071";"Image";"imagepsextendfont";"bool imagepsextendfont(int font_index, float extend)";"Extend or condense a font";"bool";
"1072";"Image";"imagepsfreefont";"void imagepsfreefont(int fontindex)";"Free memory used by a PostScript Type 1 font";"void";
"1073";"Image";"imagepsloadfont";"int imagepsloadfont(string filename)";"Load a PostScript Type 1 font from file";"int";
"1074";"Image";"imagepsslantfont";"bool imagepsslantfont(int font_index, float slant)";"Slant a font";"bool";
"1075";"Image";"imagepstext";"array imagepstext(resource image, string text, int font, int size, int foreground, int background, int x, int y[, int space[, int tightness[, float angle[, int antialias_steps]]]])";"To draw a text string over an image using PostScript Type1 fonts";"array";
"1076";"Image";"imagerectangle";"int imagerectangle(resource image, int x1, int y1, int x2, int y2, int col)";"Draw a rectangle";"int";
"1077";"Image";"imagerotate";"resource imagerotate(resource src_im, float angle, int bgd_color)";"Rotate an image with a given angle";"resource";
"1078";"Image";"imagesavealpha";"bool imagesavealpha(resource image, bool saveflag)";"Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images.";"bool";
"1079";"Image";"imagesetbrush";"int imagesetbrush(resource image, resource brush)";"Set the brush image for line drawing";"int";
"1080";"Image";"imagesetpixel";"int imagesetpixel(resource image, int x, int y, int color)";"Set a single pixel";"int";
"1081";"Image";"imagesetstyle";"bool imagesetstyle(resource image, array style)";"Set the style for line drawing";"bool";
"1082";"Image";"imagesetthickness";"bool imagesetthickness(resource image, int thickness)";"Set the thickness for line drawing";"bool";
"1083";"Image";"imagesettile";"int imagesettile(resource image, resource tile)";"Set the tile image for filling";"int";
"1084";"Image";"imagestring";"int imagestring(resource image, int font, int x, int y, string s, int col)";"Draw a string horizontally";"int";
"1085";"Image";"imagestringup";"int imagestringup(resource image, int font, int x, int y, string s, int col)";"Draw a string vertically";"int";
"1086";"Image";"imagesx";"int imagesx(resource image)";"Get image width";"int";
"1087";"Image";"imagesy";"int imagesy(resource image)";"Get image height";"int";
"1088";"Image";"imagetruecolortopalette";"void imagetruecolortopalette(resource image, bool dither, int ncolors)";"Convert a true color image to a palette image";"void";
"1089";"Image";"imagettfbbox";"array imagettfbbox(int size, int angle, string fontfile, string text)";"Give the bounding box of a text using TrueType fonts";"array";
"1090";"Image";"imagettftext";"array imagettftext(resource image, int size, int angle, int x, int y, int color, string fontfile, string text)";"Write text to the image using TrueType fonts";"array";
"1091";"Image";"imagetypes";"int imagetypes()";"Return the image types supported by this PHP build";"int";
"1092";"Image";"imagewbmp";"int imagewbmp(resource image[, string filename[, int foreground]])";"Output image to browser or file";"int";
"1093";"Image";"imagexbm";"int imagexbm(resource image, string filename[, int foreground])";"Output XBM image to browser or file";"int";
"1094";"Image";"iptcembed";"array iptcembed(string iptcdata, string jpeg_file_name[, int spool])";"Embed binary IPTC data into a JPEG image";"array";
"1095";"Image";"iptcparse";"array iptcparse(string iptcblock)";"Parse a binary IPTC block into single tags.";"array";
"1096";"Image";"jpeg2wbmp";"int jpeg2wbmp(string jpegname, string wbmpname, int d_height, int d_width, int threshold)";"Convert JPEG image file to WBMP image file";"int";
"1097";"Image";"png2wbmp";"int png2wbmp(string pngname, string wbmpname, int d_height, int d_width, int threshold)";"Convert PNG image file to WBMP image file";"int";
"1098";"Image";"read_exif_data";;"Alias of exif_read_data";;
"1099";"IMAP";"imap_8bit";"string imap_8bit(string string)";"Convert an 8bit string to a quoted-printable string";"string";
"1100";"IMAP";"imap_alerts";"array imap_alerts()";"This function returns all IMAP alert messages (if any) that have occurred during this page request or since the alert stack was reset";"array";
"1101";"IMAP";"imap_append";"bool imap_append(resource imap_stream, string mbox, string message[, string options])";"Append a string message to a specified mailbox";"bool";
"1102";"IMAP";"imap_base64";"string imap_base64(string text)";"Decode BASE64 encoded text";"string";
"1103";"IMAP";"imap_binary";"string imap_binary(string string)";"Convert an 8bit string to a base64 string";"string";
"1104";"IMAP";"imap_body";"string imap_body(resource imap_stream, int msg_number[, int options])";"Read the message body";"string";
"1105";"IMAP";"imap_bodystruct";"object imap_bodystruct(resource stream_id, int msg_no, int section)";"Read the structure of a specified body section of a specific message";"object";
"1106";"IMAP";"imap_check";"object imap_check(resource imap_stream)";"Check current mailbox";"object";
"1107";"IMAP";"imap_clearflag_full";"bool imap_clearflag_full(resource stream, string sequence, string flag, string options)";"Clears flags on messages";"bool";
"1108";"IMAP";"imap_close";"bool imap_close(resource imap_stream[, int flag])";"Close an IMAP stream";"bool";
"1109";"IMAP";"imap_createmailbox";"bool imap_createmailbox(resource imap_stream, string mbox)";"Create a new mailbox";"bool";
"1110";"IMAP";"imap_delete";"bool imap_delete(int imap_stream, int msg_number[, int options])";"Mark a message for deletion from current mailbox";"bool";
"1111";"IMAP";"imap_deletemailbox";"bool imap_deletemailbox(resource imap_stream, string mbox)";"Delete a mailbox";"bool";
"1112";"IMAP";"imap_errors";"array imap_errors()";"This function returns all of the IMAP errors (if any) that have occurred during this page request or since the error stack was reset.";"array";
"1113";"IMAP";"imap_expunge";"bool imap_expunge(resource imap_stream)";"Delete all messages marked for deletion";"bool";
"1114";"IMAP";"imap_fetch_overview";"array imap_fetch_overview(resource imap_stream, string sequence[, int options])";"Read an overview of the information in the headers of the given message";"array";
"1115";"IMAP";"imap_fetchbody";"string imap_fetchbody(resource imap_stream, int msg_number, string part_number[, flags options])";"Fetch a particular section of the body of the message";"string";
"1116";"IMAP";"imap_fetchheader";"string imap_fetchheader(resource imap_stream, int msgno[, int options])";"Returns header for a message";"string";
"1117";"IMAP";"imap_fetchstructure";"object imap_fetchstructure(resource imap_stream, int msg_number[, int options])";"Read the structure of a particular message";"object";
"1118";"IMAP";"imap_get_quota";"array imap_get_quota(resource imap_stream, string quota_root)";"Retrieve the quota level settings, and usage statics per mailbox";"array";
"1119";"IMAP";"imap_get_quotaroot";"array imap_get_quotaroot(resource imap_stream, string quota_root)";"Retrieve the quota settings per user";"array";
"1120";"IMAP";"imap_getacl";"array imap_getacl(resource stream_id, string mailbox)";"Gets the ACL for a given mailbox";"array";
"1121";"IMAP";"imap_getmailboxes";"array imap_getmailboxes(resource imap_stream, string ref, string pattern)";"Read the list of mailboxes, returning detailed information on each one";"array";
"1122";"IMAP";"imap_getsubscribed";"array imap_getsubscribed(resource imap_stream, string ref, string pattern)";"List all the subscribed mailboxes";"array";
"1123";"IMAP";"imap_header";;"Alias of imap_headerinfo";;
"1124";"IMAP";"imap_headerinfo";"object imap_headerinfo(resource imap_stream, int msg_number[, int fromlength[, int subjectlength[, string defaulthost]]])";"Read the header of the message";"object";
"1125";"IMAP";"imap_headers";"array imap_headers(resource imap_stream)";"Returns headers for all messages in a mailbox";"array";
"1126";"IMAP";"imap_last_error";"string imap_last_error()";"This function returns the last IMAP error (if any) that occurred during this page request";"string";
"1127";"IMAP";"imap_list";"array imap_list(resource imap_stream, string ref, string pattern)";"Read the list of mailboxes";"array";
"1128";"IMAP";"imap_listmailbox";;"Alias of imap_list";;
"1129";"IMAP";"imap_listscan";"array imap_listscan(resource imap_stream, string ref, string pattern, string content)";"Read the list of mailboxes, takes a string to search for in the text of the mailbox";"array";
"1130";"IMAP";"imap_listsubscribed";;"Alias of imap_lsub";;
"1131";"IMAP";"imap_lsub";"array imap_lsub(resource imap_stream, string ref, string pattern)";"List all the subscribed mailboxes";"array";
"1132";"IMAP";"imap_mail_compose";"string imap_mail_compose(array envelope, array body)";"Create a MIME message based on given envelope and body sections";"string";
"1133";"IMAP";"imap_mail_copy";"bool imap_mail_copy(resource imap_stream, string msglist, string mbox[, int options])";"Copy specified messages to a mailbox";"bool";
"1134";"IMAP";"imap_mail_move";"bool imap_mail_move(resource imap_stream, string msglist, string mbox[, int options])";"Move specified messages to a mailbox";"bool";
"1135";"IMAP";"imap_mail";"bool imap_mail(string to, string subject, string message[, string additional_headers[, string cc[, string bcc[, string rpath]]]])";"Send an email message";"bool";
"1136";"IMAP";"imap_mailboxmsginfo";"object imap_mailboxmsginfo(resource imap_stream)";"Get information about the current mailbox";"object";
"1137";"IMAP";"imap_mime_header_decode";"array imap_mime_header_decode(string text)";"Decode MIME header elements";"array";
"1138";"IMAP";"imap_msgno";"int imap_msgno(resource imap_stream, int uid)";"This function returns the message sequence number for the given UID";"int";
"1139";"IMAP";"imap_num_msg";"int imap_num_msg(resource imap_stream)";"Gives the number of messages in the current mailbox";"int";
"1140";"IMAP";"imap_num_recent";"int imap_num_recent(resource imap_stream)";"Gives the number of recent messages in current mailbox";"int";
"1141";"IMAP";"imap_open";"resource imap_open(string mailbox, string username, string password[, int options])";"Open an IMAP stream to a mailbox";"resource";
"1142";"IMAP";"imap_ping";"bool imap_ping(resource imap_stream)";"Check if the IMAP stream is still active";"bool";
"1143";"IMAP";"imap_qprint";"string imap_qprint(string string)";"Convert a quoted-printable string to an 8 bit string";"string";
"1144";"IMAP";"imap_renamemailbox";"bool imap_renamemailbox(resource imap_stream, string old_mbox, string new_mbox)";"Rename an old mailbox to new mailbox";"bool";
"1145";"IMAP";"imap_reopen";"bool imap_reopen(resource imap_stream, string mailbox[, string options])";"Reopen IMAP stream to new mailbox";"bool";
"1146";"IMAP";"imap_rfc822_parse_adrlist";"array imap_rfc822_parse_adrlist(string address, string default_host)";"Parses an address string";"array";
"1147";"IMAP";"imap_rfc822_parse_headers";"object imap_rfc822_parse_headers(string headers[, string defaulthost])";"Parse mail headers from a string";"object";
"1148";"IMAP";"imap_rfc822_write_address";"string imap_rfc822_write_address(string mailbox, string host, string personal)";"Returns a properly formatted email address given the mailbox, host, and personal info.";"string";
"1149";"IMAP";"imap_scanmailbox";;"Alias of imap_listscan";;
"1150";"IMAP";"imap_search";"array imap_search(resource imap_stream, string criteria, int options)";"This function returns an array of messages matching the given search criteria";"array";
"1151";"IMAP";"imap_set_quota";"bool imap_set_quota(resource imap_stream, string quota_root, int quota_limit)";"Sets a quota for a given mailbox";"bool";
"1152";"IMAP";"imap_setacl";"bool imap_setacl(resource stream_id, string mailbox, string id, string rights)";"Sets the ACL for a giving mailbox";"bool";
"1153";"IMAP";"imap_setflag_full";"bool imap_setflag_full(resource stream, string sequence, string flag, string options)";"Sets flags on messages";"bool";
"1154";"IMAP";"imap_sort";"array imap_sort(resource stream, int criteria, int reverse[, int options[, string search_criteria]])";"Sort an array of message headers";"array";
"1155";"IMAP";"imap_status";"object imap_status(resource imap_stream, string mailbox, int options)";"This function returns status information on a mailbox other than the current one";"object";
"1156";"IMAP";"imap_subscribe";"bool imap_subscribe(resource imap_stream, string mbox)";"Subscribe to a mailbox";"bool";
"1157";"IMAP";"imap_thread";"array imap_thread(resource stream_id[, int options])";"Return threaded by REFERENCES tree";"array";
"1158";"IMAP";"imap_timeout";"mixed imap_timeout(int timeout_type[, int timeout])";"Set or fetch imap timeout";"mixed";
"1159";"IMAP";"imap_uid";"int imap_uid(resource imap_stream, int msgno)";"This function returns the UID for the given message sequence number";"int";
"1160";"IMAP";"imap_undelete";"bool imap_undelete(resource imap_stream, int msg_number)";"Unmark the message which is marked deleted";"bool";
"1161";"IMAP";"imap_unsubscribe";"bool imap_unsubscribe(string imap_stream, string mbox)";"Unsubscribe from a mailbox";"bool";
"1162";"IMAP";"imap_utf7_decode";"string imap_utf7_decode(string text)";"Decodes a modified UTF-7 encoded string.";"string";
"1163";"IMAP";"imap_utf7_encode";"string imap_utf7_encode(string data)";"Converts ISO-8859-1 string to modified UTF-7 text.";"string";
"1164";"IMAP";"imap_utf8";"string imap_utf8(string mime_encoded_text)";"Converts MIME-encoded text to UTF-8";"string";
"1165";"Informix";"ifx_affected_rows";"int ifx_affected_rows(int result_id)";"Get number of rows affected by a query";"int";
"1166";"Informix";"ifx_blobinfile_mode";"void ifx_blobinfile_mode(int mode)";"Set the default blob mode for all select queries";"void";
"1167";"Informix";"ifx_byteasvarchar";"void ifx_byteasvarchar(int mode)";"Set the default byte mode";"void";
"1168";"Informix";"ifx_close";"int ifx_close([int link_identifier])";"Close Informix connection";"int";
"1169";"Informix";"ifx_connect";"int ifx_connect([string database[, string userid[, string password]]])";"Open Informix server connection";"int";
"1170";"Informix";"ifx_copy_blob";"int ifx_copy_blob(int bid)";"Duplicates the given blob object";"int";
"1171";"Informix";"ifx_create_blob";"int ifx_create_blob(int type, int mode, string param)";"Creates an blob object";"int";
"1172";"Informix";"ifx_create_char";"int ifx_create_char(string param)";"Creates an char object";"int";
"1173";"Informix";"ifx_do";"int ifx_do(int result_id)";"Execute a previously prepared SQL-statement";"int";
"1174";"Informix";"ifx_error";"string ifx_error()";"Returns error code of last Informix call";"string";
"1175";"Informix";"ifx_errormsg";"string ifx_errormsg([int errorcode])";"Returns error message of last Informix call";"string";
"1176";"Informix";"ifx_fetch_row";"array ifx_fetch_row(int result_id[, mixed position])";"Get row as enumerated array";"array";
"1177";"Informix";"ifx_fieldproperties";"array ifx_fieldproperties(int result_id)";"List of SQL fieldproperties";"array";
"1178";"Informix";"ifx_fieldtypes";"array ifx_fieldtypes(int result_id)";"List of Informix SQL fields";"array";
"1179";"Informix";"ifx_free_blob";"int ifx_free_blob(int bid)";"Deletes the blob object";"int";
"1180";"Informix";"ifx_free_char";"int ifx_free_char(int bid)";"Deletes the char object";"int";
"1181";"Informix";"ifx_free_result";"int ifx_free_result(int result_id)";"Releases resources for the query";"int";
"1182";"Informix";"ifx_get_blob";"int ifx_get_blob(int bid)";"Return the content of a blob object";"int";
"1183";"Informix";"ifx_get_char";"int ifx_get_char(int bid)";"Return the content of the char object";"int";
"1184";"Informix";"ifx_getsqlca";"array ifx_getsqlca(int result_id)";"Get the contents of sqlca.sqlerrd[0..5] after a query";"array";
"1185";"Informix";"ifx_htmltbl_result";"int ifx_htmltbl_result(int result_id[, string html_table_options])";"Formats all rows of a query into a HTML table";"int";
"1186";"Informix";"ifx_nullformat";"void ifx_nullformat(int mode)";"Sets the default return value on a fetch row";"void";
"1187";"Informix";"ifx_num_fields";"int ifx_num_fields(int result_id)";"Returns the number of columns in the query";"int";
"1188";"Informix";"ifx_num_rows";"int ifx_num_rows(int result_id)";"Count the rows already fetched from a query";"int";
"1189";"Informix";"ifx_pconnect";"int ifx_pconnect([string database[, string userid[, string password]]])";"Open persistent Informix connection";"int";
"1190";"Informix";"ifx_prepare";"int ifx_prepare(string query, int conn_id[, int cursor_def, mixed blobidarray])";"Prepare an SQL-statement for execution";"int";
"1191";"Informix";"ifx_query";"int ifx_query(string query, int link_identifier[, int cursor_type[, mixed blobidarray]])";"Send Informix query";"int";
"1192";"Informix";"ifx_textasvarchar";"void ifx_textasvarchar(int mode)";"Set the default text mode";"void";
"1193";"Informix";"ifx_update_blob";"bool ifx_update_blob(int bid, string content)";"Updates the content of the blob object";"bool";
"1194";"Informix";"ifx_update_char";"int ifx_update_char(int bid, string content)";"Updates the content of the char object";"int";
"1195";"Informix";"ifxus_close_slob";"int ifxus_close_slob(int bid)";"Deletes the slob object";"int";
"1196";"Informix";"ifxus_create_slob";"int ifxus_create_slob(int mode)";"Creates an slob object and opens it";"int";
"1197";"Informix";"ifxus_free_slob";"int ifxus_free_slob(int bid)";"Deletes the slob object";"int";
"1198";"Informix";"ifxus_open_slob";"int ifxus_open_slob(long bid, int mode)";"Opens an slob object";"int";
"1199";"Informix";"ifxus_read_slob";"int ifxus_read_slob(long bid, long nbytes)";"Reads nbytes of the slob object";"int";
"1200";"Informix";"ifxus_seek_slob";"int ifxus_seek_slob(long bid, int mode, long offset)";"Sets the current file or seek position";"int";
"1201";"Informix";"ifxus_tell_slob";"int ifxus_tell_slob(long bid)";"Returns the current file or seek position";"int";
"1202";"Informix";"ifxus_write_slob";"int ifxus_write_slob(long bid, string content)";"Writes a string into the slob object";"int";
"1203";"Firebird/InterBase";"ibase_add_user";"bool ibase_add_user(string server, string dba_user_name, string dba_user_password, string user_name, string password[, string first_name[, string middle_name[, string last_name]]])";"Add a user to a security database (only for IB6 or later)";"bool";
"1204";"Firebird/InterBase";"ibase_affected_rows";"int ibase_affected_rows(resource link_identifier)";"Return the number of rows that were affected by the previous query";"int";
"1205";"Firebird/InterBase";"ibase_backup";"mixed ibase_backup(resource service_handle, string source_db, string dest_file[, int options[, bool verbose]])";"Initiates a backup task in the service manager and returns immediately";"mixed";
"1206";"Firebird/InterBase";"ibase_blob_add";"bool ibase_blob_add(resource blob_handle, string data)";"Add data into a newly created blob";"bool";
"1207";"Firebird/InterBase";"ibase_blob_cancel";"bool ibase_blob_cancel(resource blob_handle)";"Cancel creating blob";"bool";
"1208";"Firebird/InterBase";"ibase_blob_close";"mixed ibase_blob_close(resource blob_handle)";"Close blob";"mixed";
"1209";"Firebird/InterBase";"ibase_blob_create";"resource ibase_blob_create([resource link_identifier])";"Create a new blob for adding data";"resource";
"1210";"Firebird/InterBase";"ibase_blob_echo";"bool ibase_blob_echo(string blob_id)";"Output blob contents to browser";"bool";
"1211";"Firebird/InterBase";"ibase_blob_get";"string ibase_blob_get(resource blob_handle, int len)";"Get len bytes data from open blob";"string";
"1212";"Firebird/InterBase";"ibase_blob_import";"string ibase_blob_import([resource link_identifier, resource file_handle])";"Create blob, copy file in it, and close it";"string";
"1213";"Firebird/InterBase";"ibase_blob_info";"array ibase_blob_info(string blob_id)";"Return blob length and other useful info";"array";
"1214";"Firebird/InterBase";"ibase_blob_open";"resource ibase_blob_open(string blob_id)";"Open blob for retrieving data parts";"resource";
"1215";"Firebird/InterBase";"ibase_close";"bool ibase_close([resource connection_id])";"Close a connection to an InterBase database";"bool";
"1216";"Firebird/InterBase";"ibase_commit_ret";"bool ibase_commit_ret([resource link_identifier])";"Commit a transaction without closing it";"bool";
"1217";"Firebird/InterBase";"ibase_commit";"bool ibase_commit([resource link_identifier])";"Commit a transaction";"bool";
"1218";"Firebird/InterBase";"ibase_connect";"resource ibase_connect(string database[, string username[, string password[, string charset[, int buffers[, int dialect[, string role]]]]]])";"Open a connection to an InterBase database";"resource";
"1219";"Firebird/InterBase";"ibase_db_info";"string ibase_db_info(resource service_handle, string db, int action[, int argument])";"Request statistics about a database";"string";
"1220";"Firebird/InterBase";"ibase_delete_user";"bool ibase_delete_user(string server, string dba_user_name, string dba_user_password, string user_name)";"Delete a user from a security database (only for IB6 or later)";"bool";
"1221";"Firebird/InterBase";"ibase_drop_db";"bool ibase_drop_db(resource connection)";"Drops a database";"bool";
"1222";"Firebird/InterBase";"ibase_errcode";"int ibase_errcode()";"Return an error code";"int";
"1223";"Firebird/InterBase";"ibase_errmsg";"string ibase_errmsg()";"Return error messages";"string";
"1224";"Firebird/InterBase";"ibase_execute";"resource ibase_execute(resource query[, int bind_args])";"Execute a previously prepared query";"resource";
"1225";"Firebird/InterBase";"ibase_fetch_assoc";"array ibase_fetch_assoc(resource result[, int fetch_flag])";"Fetch a result row from a query as an associative array";"array";
"1226";"Firebird/InterBase";"ibase_fetch_object";"object ibase_fetch_object(resource result_id[, int fetch_flag])";"Get an object from a InterBase database";"object";
"1227";"Firebird/InterBase";"ibase_fetch_row";"array ibase_fetch_row(resource result_identifier[, int fetch_flag])";"Fetch a row from an InterBase database";"array";
"1228";"Firebird/InterBase";"ibase_field_info";"array ibase_field_info(resource result, int field_number)";"Get information about a field";"array";
"1229";"Firebird/InterBase";"ibase_free_event_handler";"bool ibase_free_event_handler(resource event)";"Cancels a registered event handler";"bool";
"1230";"Firebird/InterBase";"ibase_free_query";"bool ibase_free_query(resource query)";"Free memory allocated by a prepared query";"bool";
"1231";"Firebird/InterBase";"ibase_free_result";"bool ibase_free_result(resource result_identifier)";"Free a result set";"bool";
"1232";"Firebird/InterBase";"ibase_gen_id";"int ibase_gen_id([resource link_identifier[, string generator[, int increment]]])";"Increments the named generator and returns its new value";"int";
"1233";"Firebird/InterBase";"ibase_maintain_db";"bool ibase_maintain_db(resource service_handle, string db, int action[, int argument])";"Execute a maintenance command on the database server";"bool";
"1234";"Firebird/InterBase";"ibase_modify_user";"bool ibase_modify_user(string server, string dba_user_name, string dba_user_password, string user_name, string password[, string first_name[, string middle_name[, string last_name]]])";"Modify a user to a security database (only for IB6 or later)";"bool";
"1235";"Firebird/InterBase";"ibase_name_result";"bool ibase_name_result(resource result, string name)";"Assigns a name to a result set";"bool";
"1236";"Firebird/InterBase";"ibase_num_fields";"int ibase_num_fields(resource result_id)";"Get the number of fields in a result set";"int";
"1237";"Firebird/InterBase";"ibase_num_params";"int ibase_num_params(resource query)";"Return the number of parameters in a prepared query";"int";
"1238";"Firebird/InterBase";"ibase_param_info";"array ibase_param_info(resource query, int param_number)";"Return information about a parameter in a prepared query";"array";
"1239";"Firebird/InterBase";"ibase_pconnect";"resource ibase_pconnect(string database[, string username[, string password[, string charset[, int buffers[, int dialect[, string role]]]]]])";"Open a persistent connection to an InterBase database";"resource";
"1240";"Firebird/InterBase";"ibase_prepare";"resource ibase_prepare([resource link_identifier, string query])";"Prepare a query for later binding of parameter placeholders and execution";"resource";
"1241";"Firebird/InterBase";"ibase_query";"resource ibase_query([resource link_identifier, string query[, int bind_args]])";"Execute a query on an InterBase database";"resource";
"1242";"Firebird/InterBase";"ibase_restore";"mixed ibase_restore(resource service_handle, string source_file, string dest_db[, int options[, bool verbose]])";"Initiates a restore task in the service manager and returns immediately";"mixed";
"1243";"Firebird/InterBase";"ibase_rollback_ret";"bool ibase_rollback_ret([resource link_identifier])";"Roll back a transaction without closing it";"bool";
"1244";"Firebird/InterBase";"ibase_rollback";"bool ibase_rollback([resource link_identifier])";"Roll back a transaction";"bool";
"1245";"Firebird/InterBase";"ibase_server_info";"string ibase_server_info(resource service_handle, int action)";"Request information about a database server";"string";
"1246";"Firebird/InterBase";"ibase_service_attach";"resource ibase_service_attach(string host, string dba_username, string dba_password)";"Connect to the service manager";"resource";
"1247";"Firebird/InterBase";"ibase_service_detach";"bool ibase_service_detach(resource service_handle)";"Disconnect from the service manager";"bool";
"1248";"Firebird/InterBase";"ibase_set_event_handler";"resource ibase_set_event_handler([resource connection, callback event_handler, string event_name1[, string event_name2[, string ...]]])";"Register a callback function to be called when events are posted";"resource";
"1249";"Firebird/InterBase";"ibase_timefmt";"int ibase_timefmt(string format[, int columntype])";"Sets the format of timestamp, date and time type columns returned from queries";"int";
"1250";"Firebird/InterBase";"ibase_trans";"resource ibase_trans([int trans_args[, resource link_identifier]])";"Begin a transaction";"resource";
"1251";"Firebird/InterBase";"ibase_wait_event";"string ibase_wait_event([resource connection, string event_name1[, string event_name2[, string ...]]])";"Wait for an event to be posted by the database";"string";
"1252";"Ingres II";"ingres_autocommit";"bool ingres_autocommit([resource link])";"Switch autocommit on or off";"bool";
"1253";"Ingres II";"ingres_close";"bool ingres_close([resource link])";"Close an Ingres II database connection";"bool";
"1254";"Ingres II";"ingres_commit";"bool ingres_commit([resource link])";"Commit a transaction";"bool";
"1255";"Ingres II";"ingres_connect";"resource ingres_connect([string database[, string username[, string password]]])";"Open a connection to an Ingres II database";"resource";
"1256";"Ingres II";"ingres_fetch_array";"array ingres_fetch_array([int result_type[, resource link]])";"Fetch a row of result into an array";"array";
"1257";"Ingres II";"ingres_fetch_object";"object ingres_fetch_object([int result_type[, resource link]])";"Fetch a row of result into an object.";"object";
"1258";"Ingres II";"ingres_fetch_row";"array ingres_fetch_row([resource link])";"Fetch a row of result into an enumerated array";"array";
"1259";"Ingres II";"ingres_field_length";"int ingres_field_length(int index[, resource link])";"Get the length of a field";"int";
"1260";"Ingres II";"ingres_field_name";"string ingres_field_name(int index[, resource link])";"Get the name of a field in a query result.";"string";
"1261";"Ingres II";"ingres_field_nullable";"bool ingres_field_nullable(int index[, resource link])";"Test if a field is nullable";"bool";
"1262";"Ingres II";"ingres_field_precision";"int ingres_field_precision(int index[, resource link])";"Get the precision of a field";"int";
"1263";"Ingres II";"ingres_field_scale";"int ingres_field_scale(int index[, resource link])";"Get the scale of a field";"int";
"1264";"Ingres II";"ingres_field_type";"string ingres_field_type(int index[, resource link])";"Get the type of a field in a query result";"string";
"1265";"Ingres II";"ingres_num_fields";"int ingres_num_fields([resource link])";"Get the number of fields returned by the last query";"int";
"1266";"Ingres II";"ingres_num_rows";"int ingres_num_rows([resource link])";"Get the number of rows affected or returned by the last query";"int";
"1267";"Ingres II";"ingres_pconnect";"resource ingres_pconnect([string database[, string username[, string password]]])";"Open a persistent connection to an Ingres II database";"resource";
"1268";"Ingres II";"ingres_query";"bool ingres_query(string query[, resource link])";"Send a SQL query to Ingres II";"bool";
"1269";"Ingres II";"ingres_rollback";"bool ingres_rollback([resource link])";"Roll back a transaction";"bool";
"1270";"IRC Gateway";"ircg_channel_mode";"bool ircg_channel_mode(resource connection, string channel, string mode_spec, string nick)";"Set channel mode flags for user";"bool";
"1271";"IRC Gateway";"ircg_disconnect";"bool ircg_disconnect(resource connection, string reason)";"Close connection to server";"bool";
"1272";"IRC Gateway";"ircg_fetch_error_msg";"array ircg_fetch_error_msg(resource connection)";"Returns the error from previous IRCG operation";"array";
"1273";"IRC Gateway";"ircg_get_username";"string ircg_get_username(resource connection)";"Get username for connection";"string";
"1274";"IRC Gateway";"ircg_html_encode";"bool ircg_html_encode(string html_string)";"Encodes HTML preserving output";"bool";
"1275";"IRC Gateway";"ircg_ignore_add";"bool ircg_ignore_add(resource connection, string nick)";"Add a user to your ignore list on a server";"bool";
"1276";"IRC Gateway";"ircg_ignore_del";"bool ircg_ignore_del(resource connection, string nick)";"Remove a user from your ignore list on a server";"bool";
"1277";"IRC Gateway";"ircg_invite";"bool ircg_invite(resource connection, string channel, string nickname)";"Invites nickname to channel";"bool";
"1278";"IRC Gateway";"ircg_is_conn_alive";"bool ircg_is_conn_alive(resource connection)";"Check connection status";"bool";
"1279";"IRC Gateway";"ircg_join";"bool ircg_join(resource connection, string channel[, string key])";"Join a channel on a connected server";"bool";
"1280";"IRC Gateway";"ircg_kick";"bool ircg_kick(resource connection, string channel, string nick, string reason)";"Kick a user out of a channel on server";"bool";
"1281";"IRC Gateway";"ircg_list";"bool ircg_list(resource connection, string channel)";"List topic/user count of channel(s)";"bool";
"1282";"IRC Gateway";"ircg_lookup_format_messages";"bool ircg_lookup_format_messages(string name)";"Check for the existence of a format message set";"bool";
"1283";"IRC Gateway";"ircg_lusers";"bool ircg_lusers(resource connection)";"IRC network statistics";"bool";
"1284";"IRC Gateway";"ircg_msg";"bool ircg_msg(resource connection, string recipient, string message[, boolean suppress])";"Send message to channel or user on server";"bool";
"1285";"IRC Gateway";"ircg_nick";"bool ircg_nick(resource connection, string nick)";"Change nickname on server";"bool";
"1286";"IRC Gateway";"ircg_nickname_escape";"string ircg_nickname_escape(string nick)";"Encode special characters in nickname to be IRC-compliant";"string";
"1287";"IRC Gateway";"ircg_nickname_unescape";"string ircg_nickname_unescape(string nick)";"Decodes encoded nickname";"string";
"1288";"IRC Gateway";"ircg_notice";"bool ircg_notice(resource connection, string recipient, string message)";"Send a notice to a user on server";"bool";
"1289";"IRC Gateway";"ircg_oper";"bool ircg_oper(resource connection, string name, string password)";"Elevates privileges to IRC OPER";"bool";
"1290";"IRC Gateway";"ircg_part";"bool ircg_part(resource connection, string channel)";"Leave a channel on server";"bool";
"1291";"IRC Gateway";"ircg_pconnect";"resource ircg_pconnect(string username[, string server_ip[, int server_port[, string msg_format[, array ctcp_messages[, array user_settings]]]]])";"Connect to an IRC server";"resource";
"1292";"IRC Gateway";"ircg_register_format_messages";"bool ircg_register_format_messages(string name, array messages)";"Register a format message set";"bool";
"1293";"IRC Gateway";"ircg_set_current";"bool ircg_set_current(resource connection)";"Set current connection for output";"bool";
"1294";"IRC Gateway";"ircg_set_file";"bool ircg_set_file(resource connection, string path)";"Set logfile for connection";"bool";
"1295";"IRC Gateway";"ircg_set_on_die";"bool ircg_set_on_die(resource connection, string host, int port, string data)";"Set action to be executed when connection dies";"bool";
"1296";"IRC Gateway";"ircg_topic";"bool ircg_topic(resource connection, string channel, string new_topic)";"Set topic for channel on server";"bool";
"1297";"IRC Gateway";"ircg_who";"bool ircg_who(resource connection, string mask[, bool ops_only])";"Queries server for WHO information";"bool";
"1298";"IRC Gateway";"ircg_whois";"bool ircg_whois(resource connection, string nick)";"Query server for user information";"bool";
"1299";"Java";"java_last_exception_clear";"void java_last_exception_clear()";"Clear last Java exception";"void";
"1300";"Java";"java_last_exception_get";"exception java_last_exception_get()";"Get last Java exception";"exception";
"1301";"LDAP";"ldap_8859_to_t61";"string ldap_8859_to_t61(string value)";"Translate 8859 characters to t61 characters";"string";
"1302";"LDAP";"ldap_add";"bool ldap_add(resource link_identifier, string dn, array entry)";"Add entries to LDAP directory";"bool";
"1303";"LDAP";"ldap_bind";"bool ldap_bind(resource link_identifier[, string bind_rdn[, string bind_password]])";"Bind to LDAP directory";"bool";
"1304";"LDAP";"ldap_close";"bool ldap_close(resource link_identifier)";"Close link to LDAP server";"bool";
"1305";"LDAP";"ldap_compare";"bool ldap_compare(resource link_identifier, string dn, string attribute, string value)";"Compare value of attribute found in entry specified with DN";"bool";
"1306";"LDAP";"ldap_connect";"resource ldap_connect([string hostname[, int port]])";"Connect to an LDAP server";"resource";
"1307";"LDAP";"ldap_count_entries";"int ldap_count_entries(resource link_identifier, resource result_identifier)";"Count the number of entries in a search";"int";
"1308";"LDAP";"ldap_delete";"bool ldap_delete(resource link_identifier, string dn)";"Delete an entry from a directory";"bool";
"1309";"LDAP";"ldap_dn2ufn";"string ldap_dn2ufn(string dn)";"Convert DN to User Friendly Naming format";"string";
"1310";"LDAP";"ldap_err2str";"string ldap_err2str(int errno)";"Convert LDAP error number into string error message";"string";
"1311";"LDAP";"ldap_errno";"int ldap_errno(resource link_identifier)";"Return the LDAP error number of the last LDAP command";"int";
"1312";"LDAP";"ldap_error";"string ldap_error(resource link_identifier)";"Return the LDAP error message of the last LDAP command";"string";
"1313";"LDAP";"ldap_explode_dn";"array ldap_explode_dn(string dn, int with_attrib)";"Splits DN into its component parts";"array";
"1314";"LDAP";"ldap_first_attribute";"string ldap_first_attribute(resource link_identifier, resource result_entry_identifier, int ber_identifier)";"Return first attribute";"string";
"1315";"LDAP";"ldap_first_entry";"resource ldap_first_entry(resource link_identifier, resource result_identifier)";"Return first result id";"resource";
"1316";"LDAP";"ldap_first_reference";"resource ldap_first_reference(resource link, resource result)";"Return first reference";"resource";
"1317";"LDAP";"ldap_free_result";"bool ldap_free_result(resource result_identifier)";"Free result memory";"bool";
"1318";"LDAP";"ldap_get_attributes";"array ldap_get_attributes(resource link_identifier, resource result_entry_identifier)";"Get attributes from a search result entry";"array";
"1319";"LDAP";"ldap_get_dn";"string ldap_get_dn(resource link_identifier, resource result_entry_identifier)";"Get the DN of a result entry";"string";
"1320";"LDAP";"ldap_get_entries";"array ldap_get_entries(resource link_identifier, resource result_identifier)";"Get all result entries";"array";
"1321";"LDAP";"ldap_get_option";"bool ldap_get_option(resource link_identifier, int option, mixed retval)";"Get the current value for given option";"bool";
"1322";"LDAP";"ldap_get_values_len";"array ldap_get_values_len(resource link_identifier, resource result_entry_identifier, string attribute)";"Get all binary values from a result entry";"array";
"1323";"LDAP";"ldap_get_values";"array ldap_get_values(resource link_identifier, resource result_entry_identifier, string attribute)";"Get all values from a result entry";"array";
"1324";"LDAP";"ldap_list";"resource ldap_list(resource link_identifier, string base_dn, string filter[, array attributes[, int attrsonly[, int sizelimit[, int timelimit[, int deref]]]]])";"Single-level search";"resource";
"1325";"LDAP";"ldap_mod_add";"bool ldap_mod_add(resource link_identifier, string dn, array entry)";"Add attribute values to current attributes";"bool";
"1326";"LDAP";"ldap_mod_del";"bool ldap_mod_del(resource link_identifier, string dn, array entry)";"Delete attribute values from current attributes";"bool";
"1327";"LDAP";"ldap_mod_replace";"bool ldap_mod_replace(resource link_identifier, string dn, array entry)";"Replace attribute values with new ones";"bool";
"1328";"LDAP";"ldap_modify";"bool ldap_modify(resource link_identifier, string dn, array entry)";"Modify an LDAP entry";"bool";
"1329";"LDAP";"ldap_next_attribute";"string ldap_next_attribute(resource link_identifier, resource result_entry_identifier, resource ber_identifier)";"Get the next attribute in result";"string";
"1330";"LDAP";"ldap_next_entry";"resource ldap_next_entry(resource link_identifier, resource result_entry_identifier)";"Get next result entry";"resource";
"1331";"LDAP";"ldap_next_reference";"resource ldap_next_reference(resource link, resource entry)";"Get next reference";"resource";
"1332";"LDAP";"ldap_parse_reference";"bool ldap_parse_reference(resource link, resource entry, array referrals)";"Extract information from reference entry";"bool";
"1333";"LDAP";"ldap_parse_result";"bool ldap_parse_result(resource link, resource result, int errcode, string matcheddn, string errmsg, array referrals)";"Extract information from result";"bool";
"1334";"LDAP";"ldap_read";"resource ldap_read(resource link_identifier, string base_dn, string filter[, array attributes[, int attrsonly[, int sizelimit[, int timelimit[, int deref]]]]])";"Read an entry";"resource";
"1335";"LDAP";"ldap_rename";"bool ldap_rename(resource link_identifier, string dn, string newrdn, string newparent, bool deleteoldrdn)";"Modify the name of an entry";"bool";
"1336";"LDAP";"ldap_sasl_bind";"bool ldap_sasl_bind(resource link)";"Bind to LDAP directory using SASL";"bool";
"1337";"LDAP";"ldap_search";"resource ldap_search(resource link_identifier, string base_dn, string filter[, array attributes[, int attrsonly[, int sizelimit[, int timelimit[, int deref]]]]])";"Search LDAP tree";"resource";
"1338";"LDAP";"ldap_set_option";"bool ldap_set_option(resource link_identifier, int option, mixed newval)";"Set the value of the given option";"bool";
"1339";"LDAP";"ldap_set_rebind_proc";"bool ldap_set_rebind_proc(resource link, string callback)";"Set a callback function to do re-binds on referral chasing.";"bool";
"1340";"LDAP";"ldap_sort";"bool ldap_sort(resource link, resource result, string sortfilter)";"Sort LDAP result entries";"bool";
"1341";"LDAP";"ldap_start_tls";"bool ldap_start_tls(resource link)";"Start TLS";"bool";
"1342";"LDAP";"ldap_t61_to_8859";"string ldap_t61_to_8859(string value)";"Translate t61 characters to 8859 characters";"string";
"1343";"LDAP";"ldap_unbind";"bool ldap_unbind(resource link_identifier)";"Unbind from LDAP directory";"bool";
"1344";"LZF";"lzf_compress";"string lzf_compress(string arg)";"LZF compression.";"string";
"1345";"LZF";"lzf_decompress";"string lzf_decompress(string arg)";"LZF decompression.";"string";
"1346";"LZF";"lzf_optimized_for";"int lzf_optimized_for()";"Determines what LZF extension was optimized for.";"int";
"1347";"Mail";"ezmlm_hash";"int ezmlm_hash(string addr)";"Calculate the hash value needed by EZMLM";"int";
"1348";"Mail";"mail";"bool mail(string to, string subject, string message[, string additional_headers[, string additional_parameters]])";"send mail";"bool";
"1349";"mailparse";"mailparse_determine_best_xfer_encoding";"int mailparse_determine_best_xfer_encoding(resource fp)";"Figures out the best way of encoding the content read from the file pointer fp, which must be seek-able";"int";
"1350";"mailparse";"mailparse_msg_create";"int mailparse_msg_create()";"Returns a handle that can be used to parse a message";"int";
"1351";"mailparse";"mailparse_msg_extract_part_file";"string mailparse_msg_extract_part_file(resource rfc2045, string filename[, string callbackfunc])";"Extracts/decodes a message section, decoding the transfer encoding";"string";
"1352";"mailparse";"mailparse_msg_extract_part";"void mailparse_msg_extract_part(resource rfc2045, string msgbody[, string callbackfunc])";"Extracts/decodes a message section.  If callbackfunc is not specified, the contents will be sent to stdout";"void";
"1353";"mailparse";"mailparse_msg_free";"void mailparse_msg_free(resource rfc2045buf)";"Frees a handle allocated by mailparse_msg_create";"void";
"1354";"mailparse";"mailparse_msg_get_part_data";"array mailparse_msg_get_part_data(resource rfc2045)";"Returns an associative array of info about the message";"array";
"1355";"mailparse";"mailparse_msg_get_part";"int mailparse_msg_get_part(resource rfc2045, string mimesection)";"Returns a handle on a given section in a mimemessage";"int";
"1356";"mailparse";"mailparse_msg_get_structure";"array mailparse_msg_get_structure(resource rfc2045)";"Returns an array of mime section names in the supplied message";"array";
"1357";"mailparse";"mailparse_msg_parse_file";"resource mailparse_msg_parse_file(string filename)";"Parse file and return a resource representing the structure";"resource";
"1358";"mailparse";"mailparse_msg_parse";"void mailparse_msg_parse(resource rfc2045buf, string data)";"Incrementally parse data into buffer";"void";
"1359";"mailparse";"mailparse_rfc822_parse_addresses";"array mailparse_rfc822_parse_addresses(string addresses)";"Parse addresses and returns a hash containing that data";"array";
"1360";"mailparse";"mailparse_stream_encode";"bool mailparse_stream_encode(resource sourcefp, resource destfp, string encoding)";"Streams data from source file pointer, apply encoding and write to destfp";"bool";
"1361";"mailparse";"mailparse_uudecode_all";"array mailparse_uudecode_all(resource fp)";"Scans the data from fp and extract each embedded uuencoded file. Returns an array listing filename information";"array";
"1362";"Math";"abs";"number abs(mixed number)";"Absolute value";"number";
"1363";"Math";"acos";"float acos(float arg)";"Arc cosine";"float";
"1364";"Math";"acosh";"float acosh(float arg)";"Inverse hyperbolic cosine";"float";
"1365";"Math";"asin";"float asin(float arg)";"Arc sine";"float";
"1366";"Math";"asinh";"float asinh(float arg)";"Inverse hyperbolic sine";"float";
"1367";"Math";"atan2";"float atan2(float y, float x)";"Arc tangent of two variables";"float";
"1368";"Math";"atan";"float atan(float arg)";"Arc tangent";"float";
"1369";"Math";"atanh";"float atanh(float arg)";"Inverse hyperbolic tangent";"float";
"1370";"Math";"base_convert";"string base_convert(string number, int frombase, int tobase)";"Convert a number between arbitrary bases";"string";
"1371";"Math";"bindec";"int bindec(string binary_string)";"Binary to decimal";"int";
"1372";"Math";"ceil";"float ceil(float value)";"Round fractions up";"float";
"1373";"Math";"cos";"float cos(float arg)";"Cosine";"float";
"1374";"Math";"cosh";"float cosh(float arg)";"Hyperbolic cosine";"float";
"1375";"Math";"decbin";"string decbin(int number)";"Decimal to binary";"string";
"1376";"Math";"dechex";"string dechex(int number)";"Decimal to hexadecimal";"string";
"1377";"Math";"decoct";"string decoct(int number)";"Decimal to octal";"string";
"1378";"Math";"deg2rad";"float deg2rad(float number)";"Converts the number in degrees to the radian equivalent";"float";
"1379";"Math";"exp";"float exp(float arg)";"Calculates the exponent of e (the Neperian or Natural logarithm base)";"float";
"1380";"Math";"expm1";"float expm1(float number)";"Returns exp(number) - 1, computed in a way that is accurate even when the value of number is close to zero";"float";
"1381";"Math";"floor";"float floor(float value)";"Round fractions down";"float";
"1382";"Math";"fmod";"float fmod(float x, float y)";"Returns the floating point remainder (modulo) of the division of the arguments";"float";
"1383";"Math";"getrandmax";"int getrandmax()";"Show largest possible random value";"int";
"1384";"Math";"hexdec";"int hexdec(string hex_string)";"Hexadecimal to decimal";"int";
"1385";"Math";"hypot";"float hypot(float num1, float num2)";"Returns sqrt(num1*num1 + num2*num2)";"float";
"1386";"Math";"is_finite";"bool is_finite(float val)";"Finds whether a value is a legal finite number";"bool";
"1387";"Math";"is_infinite";"bool is_infinite(float val)";"Finds whether a value is infinite";"bool";
"1388";"Math";"is_nan";"bool is_nan(float val)";"Finds whether a value is not a number";"bool";
"1389";"Math";"lcg_value";"float lcg_value()";"Combined linear congruential generator";"float";
"1390";"Math";"log10";"float log10(float arg)";"Base-10 logarithm";"float";
"1391";"Math";"log1p";"float log1p(float number)";"Returns log(1 + number), computed in a way that is accurate even when the value of number is close to zero";"float";
"1392";"Math";"log";"float log(float arg[, float base])";"Natural logarithm";"float";
"1393";"Math";"max";"mixed max(number arg1, number arg2[, number ...])mixed max(array numbers[, array ...])";"Find highest value";"mixed";
"1394";"Math";"min";"mixed min(number arg1, number arg2[, number ...])mixed min(array numbers[, array ...])";"Find lowest value";"mixed";
"1395";"Math";"mt_getrandmax";"int mt_getrandmax()";"Show largest possible random value";"int";
"1396";"Math";"mt_rand";"int mt_rand([int min, int max])";"Generate a better random value";"int";
"1397";"Math";"mt_srand";"void mt_srand([int seed])";"Seed the better random number generator";"void";
"1398";"Math";"octdec";"int octdec(string octal_string)";"Octal to decimal";"int";
"1399";"Math";"pi";"float pi()";"Get value of pi";"float";
"1400";"Math";"pow";"number pow(number base, number exp)";"Exponential expression";"number";
"1401";"Math";"rad2deg";"float rad2deg(float number)";"Converts the radian number to the equivalent number in degrees";"float";
"1402";"Math";"rand";"int rand([int min, int max])";"Generate a random integer";"int";
"1403";"Math";"round";"float round(float val[, int precision])";"Rounds a float";"float";
"1404";"Math";"sin";"float sin(float arg)";"Sine";"float";
"1405";"Math";"sinh";"float sinh(float arg)";"Hyperbolic sine";"float";
"1406";"Math";"sqrt";"float sqrt(float arg)";"Square root";"float";
"1407";"Math";"srand";"void srand([int seed])";"Seed the random number generator";"void";
"1408";"Math";"tan";"float tan(float arg)";"Tangent";"float";
"1409";"Math";"tanh";"float tanh(float arg)";"Hyperbolic tangent";"float";
"1410";"Multibyte String";"mb_convert_case";"string mb_convert_case(string str, int mode[, string encoding])";"Perform case folding on a string";"string";
"1411";"Multibyte String";"mb_convert_encoding";"string mb_convert_encoding(string str, string to-encoding[, mixed from-encoding])";"Convert character encoding";"string";
"1412";"Multibyte String";"mb_convert_kana";"string mb_convert_kana(string str, string option[, mixed encoding])";"Convert kana one from another (zen-kaku, han-kaku and more)";"string";
"1413";"Multibyte String";"mb_convert_variables";"string mb_convert_variables(string to-encoding, mixed from-encoding, mixed vars)";"Convert character code in variable(s)";"string";
"1414";"Multibyte String";"mb_decode_mimeheader";"string mb_decode_mimeheader(string str)";"Decode string in MIME header field";"string";
"1415";"Multibyte String";"mb_decode_numericentity";"string mb_decode_numericentity(string str, array convmap[, string encoding])";"Decode HTML numeric string reference to character";"string";
"1416";"Multibyte String";"mb_detect_encoding";"string mb_detect_encoding(string str[, mixed encoding-list])";"Detect character encoding";"string";
"1417";"Multibyte String";"mb_detect_order";"array mb_detect_order([mixed encoding-list])";"Set/Get character encoding detection order";"array";
"1418";"Multibyte String";"mb_encode_mimeheader";"string mb_encode_mimeheader(string str[, string charset[, string transfer-encoding[, string linefeed]]])";"Encode string for MIME header";"string";
"1419";"Multibyte String";"mb_encode_numericentity";"string mb_encode_numericentity(string str, array convmap[, string encoding])";"Encode character to HTML numeric string reference";"string";
"1420";"Multibyte String";"mb_ereg_match";"bool mb_ereg_match(string pattern, string string[, string option])";"Regular expression match for multibyte string";"bool";
"1421";"Multibyte String";"mb_ereg_replace";"string mb_ereg_replace(string pattern, string replacement, string string[, array option])";"Replace regular expression with multibyte support";"string";
"1422";"Multibyte String";"mb_ereg_search_getpos";"array mb_ereg_search_getpos()";"Returns start point for next regular expression match";"array";
"1423";"Multibyte String";"mb_ereg_search_getregs";"array mb_ereg_search_getregs()";"Retrieve the result from the last multibyte regular expression match";"array";
"1424";"Multibyte String";"mb_ereg_search_init";"array mb_ereg_search_init(string string[, string pattern[, string option]])";"Setup string and regular expression for multibyte regular expression match";"array";
"1425";"Multibyte String";"mb_ereg_search_pos";"array mb_ereg_search_pos([string pattern[, string option]])";"Return position and length of matched part of multibyte regular expression for predefined multibyte string";"array";
"1426";"Multibyte String";"mb_ereg_search_regs";"array mb_ereg_search_regs([string pattern[, string option]])";"Returns the matched part of multibyte regular expression";"array";
"1427";"Multibyte String";"mb_ereg_search_setpos";"array mb_ereg_search_setpos()";"Set start point of next regular expression match";"array";
"1428";"Multibyte String";"mb_ereg_search";"bool mb_ereg_search([string pattern[, string option]])";"Multibyte regular expression match for predefined multibyte string";"bool";
"1429";"Multibyte String";"mb_ereg";"int mb_ereg(string pattern, string string[, array regs])";"Regular expression match with multibyte support";"int";
"1430";"Multibyte String";"mb_eregi_replace";"string mb_eregi_replace(string pattern, string replace, string string)";"Replace regular expression with multibyte support ignoring case";"string";
"1431";"Multibyte String";"mb_eregi";"int mb_eregi(string pattern, string string[, array regs])";"Regular expression match ignoring case with multibyte support";"int";
"1432";"Multibyte String";"mb_get_info";"string mb_get_info([string type])";"Get internal settings of mbstring";"string";
"1433";"Multibyte String";"mb_http_input";"string mb_http_input([string type])";"Detect HTTP input character encoding";"string";
"1434";"Multibyte String";"mb_http_output";"string mb_http_output([string encoding])";"Set/Get HTTP output character encoding";"string";
"1435";"Multibyte String";"mb_internal_encoding";"mixed mb_internal_encoding([string encoding])";"Set/Get internal character encoding";"mixed";
"1436";"Multibyte String";"mb_language";"string mb_language([string language])";"Set/Get current language";"string";
"1437";"Multibyte String";"mb_list_encodings";"array mb_list_encodings()";"Returns an array of all supported encodings";"array";
"1438";"Multibyte String";"mb_output_handler";"string mb_output_handler(string contents, int status)";"Callback function converts character encoding in output buffer";"string";
"1439";"Multibyte String";"mb_parse_str";"bool mb_parse_str(string encoded_string[, array result])";"Parse GET/POST/COOKIE data and set global variable";"bool";
"1440";"Multibyte String";"mb_preferred_mime_name";"string mb_preferred_mime_name(string encoding)";"Get MIME charset string";"string";
"1441";"Multibyte String";"mb_regex_encoding";"string mb_regex_encoding([string encoding])";"Returns current encoding for multibyte regex as string";"string";
"1442";"Multibyte String";"mb_regex_set_options";"string mb_regex_set_options([string options])";"Set/Get the default options for mbregex functions";"string";
"1443";"Multibyte String";"mb_send_mail";"bool mb_send_mail(string to, string subject, string message[, string additional_headers[, string additional_parameter]])";"Send encoded mail.";"bool";
"1444";"Multibyte String";"mb_split";"array mb_split(string pattern, string string[, int limit])";"Split multibyte string using regular expression";"array";
"1445";"Multibyte String";"mb_strcut";"string mb_strcut(string str, int start[, int length[, string encoding]])";"Get part of string";"string";
"1446";"Multibyte String";"mb_strimwidth";"string mb_strimwidth(string str, int start, int width, string trimmarker[, string encoding])";"Get truncated string with specified width";"string";
"1447";"Multibyte String";"mb_strlen";"string mb_strlen(string str[, string encoding])";"Get string length";"string";
"1448";"Multibyte String";"mb_strpos";"int mb_strpos(string haystack, string needle[, int offset[, string encoding]])";"Find position of first occurrence of string in a string";"int";
"1449";"Multibyte String";"mb_strrpos";"int mb_strrpos(string haystack, string needle[, string encoding])";"Find position of last occurrence of a string in a string";"int";
"1450";"Multibyte String";"mb_strtolower";"string mb_strtolower(string str[, string encoding])";"Make a string lowercase";"string";
"1451";"Multibyte String";"mb_strtoupper";"string mb_strtoupper(string str[, string encoding])";"Make a string uppercase";"string";
"1452";"Multibyte String";"mb_strwidth";"int mb_strwidth(string str[, string encoding])";"Return width of string";"int";
"1453";"Multibyte String";"mb_substitute_character";"mixed mb_substitute_character([mixed substrchar])";"Set/Get substitution character";"mixed";
"1454";"Multibyte String";"mb_substr_count";"int mb_substr_count(string haystack, string needle[, string encoding])";"Count the number of substring occurrences";"int";
"1455";"Multibyte String";"mb_substr";"string mb_substr(string str, int start[, int length[, string encoding]])";"Get part of string";"string";
"1456";"MCAL";"mcal_append_event";"int mcal_append_event(int mcal_stream)";"Store a new event into an MCAL calendar";"int";
"1457";"MCAL";"mcal_close";"int mcal_close(int mcal_stream, int flags)";"Close an MCAL stream";"int";
"1458";"MCAL";"mcal_create_calendar";"bool mcal_create_calendar(int stream, string calendar)";"Create a new MCAL calendar";"bool";
"1459";"MCAL";"mcal_date_compare";"int mcal_date_compare(int a_year, int a_month, int a_day, int b_year, int b_month, int b_day)";"Compares two dates";"int";
"1460";"MCAL";"mcal_date_valid";"int mcal_date_valid(int year, int month, int day)";"Returns TRUE if the given year, month, day is a valid date";"int";
"1461";"MCAL";"mcal_day_of_week";"int mcal_day_of_week(int year, int month, int day)";"Returns the day of the week of the given date";"int";
"1462";"MCAL";"mcal_day_of_year";"int mcal_day_of_year(int year, int month, int day)";"Returns the day of the year of the given date";"int";
"1463";"MCAL";"mcal_days_in_month";"int mcal_days_in_month(int month, int leap_year)";"Returns the number of days in a month";"int";
"1464";"MCAL";"mcal_delete_calendar";"string mcal_delete_calendar(int stream, string calendar)";"Delete an MCAL calendar";"string";
"1465";"MCAL";"mcal_delete_event";"int mcal_delete_event(int mcal_stream[, int event_id])";"Delete an event from an MCAL calendar";"int";
"1466";"MCAL";"mcal_event_add_attribute";"void mcal_event_add_attribute(int stream, string attribute, string value)";"Adds an attribute and a value to the streams global event structure";"void";
"1467";"MCAL";"mcal_event_init";"int mcal_event_init(int stream)";"Initializes a streams global event structure";"int";
"1468";"MCAL";"mcal_event_set_alarm";"int mcal_event_set_alarm(int stream, int alarm)";"Sets the alarm of the streams global event structure";"int";
"1469";"MCAL";"mcal_event_set_category";"int mcal_event_set_category(int stream, string category)";"Sets the category of the streams global event structure";"int";
"1470";"MCAL";"mcal_event_set_class";"int mcal_event_set_class(int stream, int class)";"Sets the class of the streams global event structure";"int";
"1471";"MCAL";"mcal_event_set_description";"int mcal_event_set_description(int stream, string description)";"Sets the description of the streams global event structure";"int";
"1472";"MCAL";"mcal_event_set_end";"int mcal_event_set_end(int stream, int year, int month[, int day[, int hour[, int min[, int sec]]]])";"Sets the end date and time of the streams global event structure";"int";
"1473";"MCAL";"mcal_event_set_recur_daily";"int mcal_event_set_recur_daily(int stream, int year, int month, int day, int interval)";"Sets the recurrence of the streams global event structure";"int";
"1474";"MCAL";"mcal_event_set_recur_monthly_mday";"int mcal_event_set_recur_monthly_mday(int stream, int year, int month, int day, int interval)";"Sets the recurrence of the streams global event structure";"int";
"1475";"MCAL";"mcal_event_set_recur_monthly_wday";"int mcal_event_set_recur_monthly_wday(int stream, int year, int month, int day, int interval)";"Sets the recurrence of the streams global event structure";"int";
"1476";"MCAL";"mcal_event_set_recur_none";"int mcal_event_set_recur_none(int stream)";"Sets the recurrence of the streams global event structure";"int";
"1477";"MCAL";"mcal_event_set_recur_weekly";"int mcal_event_set_recur_weekly(int stream, int year, int month, int day, int interval, int weekdays)";"Sets the recurrence of the streams global event structure";"int";
"1478";"MCAL";"mcal_event_set_recur_yearly";"int mcal_event_set_recur_yearly(int stream, int year, int month, int day, int interval)";"Sets the recurrence of the streams global event structure";"int";
"1479";"MCAL";"mcal_event_set_start";"int mcal_event_set_start(int stream, int year, int month[, int day[, int hour[, int min[, int sec]]]])";"Sets the start date and time of the streams global event structure";"int";
"1480";"MCAL";"mcal_event_set_title";"int mcal_event_set_title(int stream, string title)";"Sets the title of the streams global event structure";"int";
"1481";"MCAL";"mcal_expunge";"int mcal_expunge(int stream)";"Deletes all events marked for being expunged.";"int";
"1482";"MCAL";"mcal_fetch_current_stream_event";"object mcal_fetch_current_stream_event(int stream)";"Returns an object containing the current streams event structure";"object";
"1483";"MCAL";"mcal_fetch_event";"object mcal_fetch_event(int mcal_stream, int event_id[, int options])";"Fetches an event from the calendar stream";"object";
"1484";"MCAL";"mcal_is_leap_year";"int mcal_is_leap_year(int year)";"Returns if the given year is a leap year or not";"int";
"1485";"MCAL";"mcal_list_alarms";"array mcal_list_alarms(int mcal_stream[, int begin_year[, int begin_month[, int begin_day[, int end_year[, int end_month[, int end_day]]]]]])";"Return a list of events that has an alarm triggered at the given datetime";"array";
"1486";"MCAL";"mcal_list_events";"array mcal_list_events(int mcal_stream, object begin_date[, object end_date])";"Return a list of IDs for a date or a range of dates";"array";
"1487";"MCAL";"mcal_next_recurrence";"int mcal_next_recurrence(int stream, int weekstart, array next)";"Returns the next recurrence of the event";"int";
"1488";"MCAL";"mcal_open";"int mcal_open(string calendar, string username, string password[, int options])";"Opens up an MCAL connection";"int";
"1489";"MCAL";"mcal_popen";"int mcal_popen(string calendar, string username, string password[, int options])";"Opens up a persistent MCAL connection";"int";
"1490";"MCAL";"mcal_rename_calendar";"string mcal_rename_calendar(int stream, string old_name, string new_name)";"Rename an MCAL calendar";"string";
"1491";"MCAL";"mcal_reopen";"int mcal_reopen(string calendar[, int options])";"Reopens an MCAL connection";"int";
"1492";"MCAL";"mcal_snooze";"bool mcal_snooze(int stream_id, int event_id)";"Turn off an alarm for an event";"bool";
"1493";"MCAL";"mcal_store_event";"int mcal_store_event(int mcal_stream)";"Modify an existing event in an MCAL calendar";"int";
"1494";"MCAL";"mcal_time_valid";"int mcal_time_valid(int hour, int minutes, int seconds)";"Returns TRUE if the given hour, minutes and seconds is a valid time";"int";
"1495";"MCAL";"mcal_week_of_year";"int mcal_week_of_year(int day, int month, int year)";"Returns the week number of the given date";"int";
"1496";"mcrypt";"mcrypt_cbc";"string mcrypt_cbc(int cipher, string key, string data, int mode[, string iv])string mcrypt_cbc(string cipher, string key, string data, int mode[, string iv])";"Encrypt/decrypt data in CBC mode";"string";
"1497";"mcrypt";"mcrypt_cfb";"string mcrypt_cfb(int cipher, string key, string data, int mode, string iv)string mcrypt_cfb(string cipher, string key, string data, int mode[, string iv])";"Encrypt/decrypt data in CFB mode";"string";
"1498";"mcrypt";"mcrypt_create_iv";"string mcrypt_create_iv(int size, int source)";"Create an initialization vector (IV) from a random source";"string";
"1499";"mcrypt";"mcrypt_decrypt";"string mcrypt_decrypt(string cipher, string key, string data, string mode[, string iv])";"Decrypts crypttext with given parameters";"string";
"1500";"mcrypt";"mcrypt_ecb";"string mcrypt_ecb(int cipher, string key, string data, int mode)string mcrypt_ecb(string cipher, string key, string data, int mode[, string iv])";"Deprecated: Encrypt/decrypt data in ECB mode";"string";
"1501";"mcrypt";"mcrypt_enc_get_algorithms_name";"string mcrypt_enc_get_algorithms_name(resource td)";"Returns the name of the opened algorithm";"string";
"1502";"mcrypt";"mcrypt_enc_get_block_size";"int mcrypt_enc_get_block_size(resource td)";"Returns the blocksize of the opened algorithm";"int";
"1503";"mcrypt";"mcrypt_enc_get_iv_size";"int mcrypt_enc_get_iv_size(resource td)";"Returns the size of the IV of the opened algorithm";"int";
"1504";"mcrypt";"mcrypt_enc_get_key_size";"int mcrypt_enc_get_key_size(resource td)";"Returns the maximum supported keysize of the opened mode";"int";
"1505";"mcrypt";"mcrypt_enc_get_modes_name";"string mcrypt_enc_get_modes_name(resource td)";"Returns the name of the opened mode";"string";
"1506";"mcrypt";"mcrypt_enc_get_supported_key_sizes";"array mcrypt_enc_get_supported_key_sizes(resource td)";"Returns an array with the supported keysizes of the opened algorithm";"array";
"1507";"mcrypt";"mcrypt_enc_is_block_algorithm_mode";"bool mcrypt_enc_is_block_algorithm_mode(resource td)";"Checks whether the encryption of the opened mode works on blocks";"bool";
"1508";"mcrypt";"mcrypt_enc_is_block_algorithm";"bool mcrypt_enc_is_block_algorithm(resource td)";"Checks whether the algorithm of the opened mode is a block algorithm";"bool";
"1509";"mcrypt";"mcrypt_enc_is_block_mode";"bool mcrypt_enc_is_block_mode(resource td)";"Checks whether the opened mode outputs blocks";"bool";
"1510";"mcrypt";"mcrypt_enc_self_test";"bool mcrypt_enc_self_test(resource td)";"This function runs a self test on the opened module";"bool";
"1511";"mcrypt";"mcrypt_encrypt";"string mcrypt_encrypt(string cipher, string key, string data, string mode[, string iv])";"Encrypts plaintext with given parameters";"string";
"1512";"mcrypt";"mcrypt_generic_deinit";"bool mcrypt_generic_deinit(resource td)";"This function deinitializes an encryption module";"bool";
"1513";"mcrypt";"mcrypt_generic_end";"bool mcrypt_generic_end(resource td)";"This function terminates encryption";"bool";
"1514";"mcrypt";"mcrypt_generic_init";"int mcrypt_generic_init(resource td, string key, string iv)";"This function initializes all buffers needed for encryption";"int";
"1515";"mcrypt";"mcrypt_generic";"string mcrypt_generic(resource td, string data)";"This function encrypts data";"string";
"1516";"mcrypt";"mcrypt_get_block_size";"int mcrypt_get_block_size(int cipher)int mcrypt_get_block_size(string cipher, string module)";"Get the block size of the specified cipher";"int";
"1517";"mcrypt";"mcrypt_get_cipher_name";"string mcrypt_get_cipher_name(int cipher)string mcrypt_get_cipher_name(string cipher)";"Get the name of the specified cipher";"string";
"1518";"mcrypt";"mcrypt_get_iv_size";"int mcrypt_get_iv_size(string cipher, string mode)";"Returns the size of the IV belonging to a specific cipher/mode combination";"int";
"1519";"mcrypt";"mcrypt_get_key_size";"int mcrypt_get_key_size(int cipher)int mcrypt_get_key_size(string cipher, string module)";"Get the key size of the specified cipher";"int";
"1520";"mcrypt";"mcrypt_list_algorithms";"array mcrypt_list_algorithms([string lib_dir])";"Get an array of all supported ciphers";"array";
"1521";"mcrypt";"mcrypt_list_modes";"array mcrypt_list_modes([string lib_dir])";"Get an array of all supported modes";"array";
"1522";"mcrypt";"mcrypt_module_close";"bool mcrypt_module_close(resource td)";"Close the mcrypt module";"bool";
"1523";"mcrypt";"mcrypt_module_get_algo_block_size";"int mcrypt_module_get_algo_block_size(string algorithm[, string lib_dir])";"Returns the blocksize of the specified algorithm";"int";
"1524";"mcrypt";"mcrypt_module_get_algo_key_size";"int mcrypt_module_get_algo_key_size(string algorithm[, string lib_dir])";"Returns the maximum supported keysize of the opened mode";"int";
"1525";"mcrypt";"mcrypt_module_get_supported_key_sizes";"array mcrypt_module_get_supported_key_sizes(string algorithm[, string lib_dir])";"Returns an array with the supported keysizes of the opened algorithm";"array";
"1526";"mcrypt";"mcrypt_module_is_block_algorithm_mode";"bool mcrypt_module_is_block_algorithm_mode(string mode[, string lib_dir])";"returns if the specified module is a block algorithm or not";"bool";
"1527";"mcrypt";"mcrypt_module_is_block_algorithm";"bool mcrypt_module_is_block_algorithm(string algorithm[, string lib_dir])";"This function checks whether the specified algorithm is a block algorithm";"bool";
"1528";"mcrypt";"mcrypt_module_is_block_mode";"bool mcrypt_module_is_block_mode(string mode[, string lib_dir])";"Returns if the specified mode outputs blocks or not";"bool";
"1529";"mcrypt";"mcrypt_module_open";"resource mcrypt_module_open(string algorithm, string algorithm_directory, string mode, string mode_directory)";"Opens the module of the algorithm and the mode to be used";"resource";
"1530";"mcrypt";"mcrypt_module_self_test";"bool mcrypt_module_self_test(string algorithm[, string lib_dir])";"This function runs a self test on the specified module";"bool";
"1531";"mcrypt";"mcrypt_ofb";"string mcrypt_ofb(int cipher, string key, string data, int mode, string iv)string mcrypt_ofb(string cipher, string key, string data, int mode[, string iv])";"Encrypt/decrypt data in OFB mode";"string";
"1532";"mcrypt";"mdecrypt_generic";"string mdecrypt_generic(resource td, string data)";"Decrypt data";"string";
"1533";"MCVE";"mcve_adduser";"int mcve_adduser(resource conn, string admin_password, int usersetup)";"Add an MCVE user using usersetup structure";"int";
"1534";"MCVE";"mcve_adduserarg";"int mcve_adduserarg(resource usersetup, int argtype, string argval)";"Add a value to user configuration structure";"int";
"1535";"MCVE";"mcve_bt";"int mcve_bt(resource conn, string username, string password)";"Get unsettled batch totals";"int";
"1536";"MCVE";"mcve_checkstatus";"int mcve_checkstatus(resource conn, int identifier)";"Check to see if a transaction has completed";"int";
"1537";"MCVE";"mcve_chkpwd";"int mcve_chkpwd(resource conn, string username, string password)";"Verify Password";"int";
"1538";"MCVE";"mcve_completeauthorizations";"int mcve_completeauthorizations(resource conn, int &array)";"Number of complete authorizations in queue, returning an array of their identifiers";"int";
"1539";"MCVE";"mcve_connect";"int mcve_connect(resource conn)";"Establish the connection to MCVE";"int";
"1540";"MCVE";"mcve_connectionerror";"string mcve_connectionerror(resource conn)";"Get a textual representation of why a connection failed";"string";
"1541";"MCVE";"mcve_deleteresponse";"bool mcve_deleteresponse(resource conn, int identifier)";"Delete specified transaction from MCVE_CONN structure";"bool";
"1542";"MCVE";"mcve_deletetrans";"bool mcve_deletetrans(resource conn, int identifier)";"Delete specified transaction from MCVE_CONN structure";"bool";
"1543";"MCVE";"mcve_deleteusersetup";"void mcve_deleteusersetup(resource usersetup)";"Deallocate data associated with usersetup structure";"void";
"1544";"MCVE";"mcve_deluser";"int mcve_deluser(resource conn, string admin_password, string username)";"Delete an MCVE user account";"int";
"1545";"MCVE";"mcve_destroyconn";"void mcve_destroyconn(resource conn)";"Destroy the connection and MCVE_CONN structure";"void";
"1546";"MCVE";"mcve_destroyengine";"void mcve_destroyengine()";"Free memory associated with IP/SSL connectivity";"void";
"1547";"MCVE";"mcve_disableuser";"int mcve_disableuser(resource conn, string admin_password, string username)";"Disable an active MCVE user account";"int";
"1548";"MCVE";"mcve_edituser";"int mcve_edituser(resource conn, string admin_password, int usersetup)";"Edit MCVE user using usersetup structure";"int";
"1549";"MCVE";"mcve_enableuser";"int mcve_enableuser(resource conn, string admin_password, string username)";"Enable an inactive MCVE user account";"int";
"1550";"MCVE";"mcve_force";"int mcve_force(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string authcode, string comments, string clerkid, string stationid, int ";"Send a FORCE to MCVE. (typically, a phone-authorization)";"int";
"1551";"MCVE";"mcve_getcell";"string mcve_getcell(resource conn, int identifier, string column, int row)";"Get a specific cell from a comma delimited response by column name";"string";
"1552";"MCVE";"mcve_getcellbynum";"string mcve_getcellbynum(resource conn, int identifier, int column, int row)";"Get a specific cell from a comma delimited response by column number";"string";
"1553";"MCVE";"mcve_getcommadelimited";"string mcve_getcommadelimited(resource conn, int identifier)";"Get the RAW comma delimited data returned from MCVE";"string";
"1554";"MCVE";"mcve_getheader";"string mcve_getheader(resource conn, int identifier, int column_num)";"Get the name of the column in a comma-delimited response";"string";
"1555";"MCVE";"mcve_getuserarg";"string mcve_getuserarg(resource usersetup, int argtype)";"Grab a value from usersetup structure";"string";
"1556";"MCVE";"mcve_getuserparam";"string mcve_getuserparam(resource conn, long identifier, int key)";"Get a user response parameter";"string";
"1557";"MCVE";"mcve_gft";"int mcve_gft(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)";"Audit MCVE for Failed transactions";"int";
"1558";"MCVE";"mcve_gl";"int mcve_gl(int conn, string username, string password, int type, string account, string batch, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)";"Audit MCVE for settled transactions";"int";
"1559";"MCVE";"mcve_gut";"int mcve_gut(resource conn, string username, string password, int type, string account, string clerkid, string stationid, string comments, int ptrannum, string startdate, string enddate)";"Audit MCVE for Unsettled Transactions";"int";
"1560";"MCVE";"mcve_initconn";"resource mcve_initconn()";"Create and initialize an MCVE_CONN structure";"resource";
"1561";"MCVE";"mcve_initengine";"int mcve_initengine(string location)";"Ready the client for IP/SSL Communication";"int";
"1562";"MCVE";"mcve_initusersetup";"resource mcve_initusersetup()";"Initialize structure to store user data";"resource";
"1563";"MCVE";"mcve_iscommadelimited";"int mcve_iscommadelimited(resource conn, int identifier)";"Checks to see if response is comma delimited";"int";
"1564";"MCVE";"mcve_liststats";"int mcve_liststats(resource conn, string admin_password)";"List statistics for all users on MCVE system";"int";
"1565";"MCVE";"mcve_listusers";"int mcve_listusers(resource conn, string admin_password)";"List all users on MCVE system";"int";
"1566";"MCVE";"mcve_maxconntimeout";"bool mcve_maxconntimeout(resource conn, int secs)";"The maximum amount of time the API will attempt a connection to MCVE";"bool";
"1567";"MCVE";"mcve_monitor";"int mcve_monitor(resource conn)";"Perform communication with MCVE (send/receive data) Non-blocking";"int";
"1568";"MCVE";"mcve_numcolumns";"int mcve_numcolumns(resource conn, int identifier)";"Number of columns returned in a comma delimited response";"int";
"1569";"MCVE";"mcve_numrows";"int mcve_numrows(resource conn, int identifier)";"Number of rows returned in a comma delimited response";"int";
"1570";"MCVE";"mcve_override";"int mcve_override(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid";"Send an OVERRIDE to MCVE";"int";
"1571";"MCVE";"mcve_parsecommadelimited";"int mcve_parsecommadelimited(resource conn, int identifier)";"Parse the comma delimited response so mcve_getcell, etc will work";"int";
"1572";"MCVE";"mcve_ping";"int mcve_ping(resource conn)";"Send a ping request to MCVE";"int";
"1573";"MCVE";"mcve_preauth";"int mcve_preauth(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, 	string clerkid";"Send a PREAUTHORIZATION to MCVE";"int";
"1574";"MCVE";"mcve_preauthcompletion";"int mcve_preauthcompletion(resource conn, string username, string password, float finalamount, int sid, int ptrannum)";"Complete a PREAUTHORIZATION... Ready it for settlement";"int";
"1575";"MCVE";"mcve_qc";"int mcve_qc(resource conn, string username, string password, string clerkid, string stationid, string comments, int ptrannum)";"Audit MCVE for a list of transactions in the outgoing queue";"int";
"1576";"MCVE";"mcve_responseparam";"string mcve_responseparam(resource conn, long identifier, string key)";"Get a custom response parameter";"string";
"1577";"MCVE";"mcve_return";"int mcve_return(int conn, string username, string password, string trackdata, string account, string expdate, float amount, string comments, string clerkid, string stationid, int ptrannum)";"Issue a RETURN or CREDIT to MCVE";"int";
"1578";"MCVE";"mcve_returncode";"int mcve_returncode(resource conn, int identifier)";"Grab the exact return code from the transaction";"int";
"1579";"MCVE";"mcve_returnstatus";"int mcve_returnstatus(resource conn, int identifier)";"Check to see if the transaction was successful";"int";
"1580";"MCVE";"mcve_sale";"int mcve_sale(resource conn, string username, string password, string trackdata, string account, string expdate, float amount, string street, string zip, string cv, string comments, string clerkid, st";"Send a SALE to MCVE";"int";
"1581";"MCVE";"mcve_setblocking";"int mcve_setblocking(resource conn, int tf)";"Set blocking/non-blocking mode for connection";"int";
"1582";"MCVE";"mcve_setdropfile";"int mcve_setdropfile(resource conn, string directory)";"Set the connection method to Drop-File";"int";
"1583";"MCVE";"mcve_setip";"int mcve_setip(resource conn, string host, int port)";"Set the connection method to IP";"int";
"1584";"MCVE";"mcve_setssl_files";"int mcve_setssl_files(string sslkeyfile, string sslcertfile)";"Set certificate key files and certificates if server requires client certificate verification";"int";
"1585";"MCVE";"mcve_setssl";"int mcve_setssl(resource conn, string host, int port)";"Set the connection method to SSL";"int";
"1586";"MCVE";"mcve_settimeout";"int mcve_settimeout(resource conn, int seconds)";"Set maximum transaction time (per trans)";"int";
"1587";"MCVE";"mcve_settle";"int mcve_settle(resource conn, string username, string password, string batch)";"Issue a settlement command to do a batch deposit";"int";
"1588";"MCVE";"mcve_text_avs";"string mcve_text_avs(string code)";"Get a textual representation of the return_avs";"string";
"1589";"MCVE";"mcve_text_code";"string mcve_text_code(string code)";"Get a textual representation of the return_code";"string";
"1590";"MCVE";"mcve_text_cv";"string mcve_text_cv(int code)";"Get a textual representation of the return_cv";"string";
"1591";"MCVE";"mcve_transactionauth";"string mcve_transactionauth(resource conn, int identifier)";"Get the authorization number returned for the transaction (alpha-numeric)";"string";
"1592";"MCVE";"mcve_transactionavs";"int mcve_transactionavs(resource conn, int identifier)";"Get the Address Verification return status";"int";
"1593";"MCVE";"mcve_transactionbatch";"int mcve_transactionbatch(resource conn, int identifier)";"Get the batch number associated with the transaction";"int";
"1594";"MCVE";"mcve_transactioncv";"int mcve_transactioncv(resource conn, int identifier)";"Get the CVC2/CVV2/CID return status";"int";
"1595";"MCVE";"mcve_transactionid";"int mcve_transactionid(resource conn, int identifier)";"Get the unique system id for the transaction";"int";
"1596";"MCVE";"mcve_transactionitem";"int mcve_transactionitem(resource conn, int identifier)";"Get the ITEM number in the associated batch for this transaction";"int";
"1597";"MCVE";"mcve_transactionssent";"int mcve_transactionssent(resource conn)";"Check to see if outgoing buffer is clear";"int";
"1598";"MCVE";"mcve_transactiontext";"string mcve_transactiontext(resource conn, int identifier)";"Get verbiage (text) return from MCVE or processing institution";"string";
"1599";"MCVE";"mcve_transinqueue";"int mcve_transinqueue(resource conn)";"Number of transactions in client-queue";"int";
"1600";"MCVE";"mcve_transnew";"int mcve_transnew(resource conn)";"Start a new transaction";"int";
"1601";"MCVE";"mcve_transparam";"int mcve_transparam(resource conn, long identifier, int key)";"Add a parameter to a transaction";"int";
"1602";"MCVE";"mcve_transsend";"int mcve_transsend(resource conn, long identifier)";"Finalize and send the transaction";"int";
"1603";"MCVE";"mcve_ub";"int mcve_ub(resource conn, string username, string password)";"Get a list of all Unsettled batches";"int";
"1604";"MCVE";"mcve_uwait";"int mcve_uwait(long microsecs)";"Wait x microsecs";"int";
"1605";"MCVE";"mcve_verifyconnection";"bool mcve_verifyconnection(resource conn, int tf)";"Set whether or not to PING upon connect to verify connection";"bool";
"1606";"MCVE";"mcve_verifysslcert";"bool mcve_verifysslcert(resource conn, int tf)";"Set whether or not to verify the server ssl certificate";"bool";
"1607";"MCVE";"mcve_void";"int mcve_void(resource conn, string username, string password, int sid, int ptrannum)";"VOID a transaction in the settlement queue";"int";
"1608";"mhash";"mhash_count";"int mhash_count()";"Get the highest available hash id";"int";
"1609";"mhash";"mhash_get_block_size";"int mhash_get_block_size(int hash)";"Get the block size of the specified hash";"int";
"1610";"mhash";"mhash_get_hash_name";"string mhash_get_hash_name(int hash)";"Get the name of the specified hash";"string";
"1611";"mhash";"mhash_keygen_s2k";"string mhash_keygen_s2k(int hash, string password, string salt, int bytes)";"Generates a key";"string";
"1612";"mhash";"mhash";"string mhash(int hash, string data[, string key])";"Compute hash";"string";
"1613";"Mimetype";"mime_content_type";"string mime_content_type(string filename)";"Detect MIME Content-type for a file";"string";
"1614";"MS SQL Server";"mssql_bind";"bool mssql_bind(resource stmt, string param_name, mixed var, int type[, int is_output[, int is_null[, int maxlen]]])";"Adds a parameter to a stored procedure or a remote stored procedure";"bool";
"1615";"MS SQL Server";"mssql_close";"bool mssql_close([resource link_identifier])";"Close MS SQL Server connection";"bool";
"1616";"MS SQL Server";"mssql_connect";"int mssql_connect([string servername[, string username[, string password]]])";"Open MS SQL server connection";"int";
"1617";"MS SQL Server";"mssql_data_seek";"bool mssql_data_seek(resource result_identifier, int row_number)";"Moves internal row pointer";"bool";
"1618";"MS SQL Server";"mssql_execute";"mixed mssql_execute(resource stmt[, bool skip_results])";"Executes a stored procedure on a MS SQL server database";"mixed";
"1619";"MS SQL Server";"mssql_fetch_array";"array mssql_fetch_array(resource result[, int result_type])";"Fetch a result row as an associative array, a numeric array, or both";"array";
"1620";"MS SQL Server";"mssql_fetch_assoc";"array mssql_fetch_assoc(resource result_id)";"Returns an associative array of the current row in the result set specified by result_id";"array";
"1621";"MS SQL Server";"mssql_fetch_batch";"int mssql_fetch_batch(resource result_index)";"Returns the next batch of records";"int";
"1622";"MS SQL Server";"mssql_fetch_field";"object mssql_fetch_field(resource result[, int field_offset])";"Get field information";"object";
"1623";"MS SQL Server";"mssql_fetch_object";"object mssql_fetch_object(resource result)";"Fetch row as object";"object";
"1624";"MS SQL Server";"mssql_fetch_row";"array mssql_fetch_row(resource result)";"Get row as enumerated array";"array";
"1625";"MS SQL Server";"mssql_field_length";"int mssql_field_length(resource result[, int offset])";"Get the length of a field";"int";
"1626";"MS SQL Server";"mssql_field_name";"string mssql_field_name(resource result[, int offset])";"Get the name of a field";"string";
"1627";"MS SQL Server";"mssql_field_seek";"bool mssql_field_seek(resource result, int field_offset)";"Seeks to the specified field offset";"bool";
"1628";"MS SQL Server";"mssql_field_type";"string mssql_field_type(resource result[, int offset])";"Gets the type of a field";"string";
"1629";"MS SQL Server";"mssql_free_result";"bool mssql_free_result(resource result)";"Free result memory";"bool";
"1630";"MS SQL Server";"mssql_free_statement";"bool mssql_free_statement(resource statement)";"Free statement memory";"bool";
"1631";"MS SQL Server";"mssql_get_last_message";"string mssql_get_last_message()";"Returns the last message from the server";"string";
"1632";"MS SQL Server";"mssql_guid_string";"string mssql_guid_string(string binary[, int short_format])";"Converts a 16 byte binary GUID to a string";"string";
"1633";"MS SQL Server";"mssql_init";"int mssql_init(string sp_name[, resource conn_id])";"Initializes a stored procedure or a remote stored procedure";"int";
"1634";"MS SQL Server";"mssql_min_error_severity";"void mssql_min_error_severity(int severity)";"Sets the lower error severity";"void";
"1635";"MS SQL Server";"mssql_min_message_severity";"void mssql_min_message_severity(int severity)";"Sets the lower message severity";"void";
"1636";"MS SQL Server";"mssql_next_result";"bool mssql_next_result(resource result_id)";"Move the internal result pointer to the next result";"bool";
"1637";"MS SQL Server";"mssql_num_fields";"int mssql_num_fields(resource result)";"Gets the number of fields in result";"int";
"1638";"MS SQL Server";"mssql_num_rows";"int mssql_num_rows(resource result)";"Gets the number of rows in result";"int";
"1639";"MS SQL Server";"mssql_pconnect";"int mssql_pconnect([string servername[, string username[, string password]]])";"Open persistent MS SQL connection";"int";
"1640";"MS SQL Server";"mssql_query";"resource mssql_query(string query[, resource link_identifier[, int batch_size]])";"Send MS SQL query";"resource";
"1641";"MS SQL Server";"mssql_result";"string mssql_result(resource result, int row, mixed field)";"Get result data";"string";
"1642";"MS SQL Server";"mssql_rows_affected";"int mssql_rows_affected(resource conn_id)";"Returns the number of records affected by the query";"int";
"1643";"MS SQL Server";"mssql_select_db";"bool mssql_select_db(string database_name[, resource link_identifier])";"Select MS SQL database";"bool";
"1644";"Ming (flash)";"ming_setcubicthreshold";"void ming_setcubicthreshold(int threshold)";"Set cubic threshold (?)";"void";
"1645";"Ming (flash)";"ming_setscale";"void ming_setscale(int scale)";"Set scale (?)";"void";
"1646";"Ming (flash)";"ming_useswfversion";"void ming_useswfversion(int version)";"Use SWF version (?)";"void";
"1647";"Ming (flash)";"SWFAction";"new swfaction(string script)";"Creates a new Action.";"new";
"1648";"Ming (flash)";"SWFBitmap";"new swfbitmap(string filename[, int alphafilename])";"Loads Bitmap object";"new";
"1649";"Ming (flash)";"swfbutton_keypress";"int swfbutton_keypress(string str)";"Returns the action flag for keyPress(char)";"int";
"1650";"Ming (flash)";"SWFbutton->addAction";"void swfbutton->addaction(resource action, int flags)";"Adds an action";"void";
"1651";"Ming (flash)";"SWFbutton->addShape";"void swfbutton->addshape(resource shape, int flags)";"Adds a shape to a button";"void";
"1652";"Ming (flash)";"SWFbutton->setAction";"void swfbutton->setaction(resource action)";"Sets the action";"void";
"1653";"Ming (flash)";"SWFbutton->setdown";"void swfbutton->setdown(resource shape)";"Alias for addShape(shape, SWFBUTTON_DOWN)";"void";
"1654";"Ming (flash)";"SWFbutton->setHit";"void swfbutton->sethit(resource shape)";"Alias for addShape(shape, SWFBUTTON_HIT)";"void";
"1655";"Ming (flash)";"SWFbutton->setOver";"void swfbutton->setover(resource shape)";"Alias for addShape(shape, SWFBUTTON_OVER)";"void";
"1656";"Ming (flash)";"SWFbutton->setUp";"void swfbutton->setup(resource shape)";"Alias for addShape(shape, SWFBUTTON_UP)";"void";
"1657";"Ming (flash)";"SWFbutton";"new swfbutton()";"Creates a new Button.";"new";
"1658";"Ming (flash)";"SWFDisplayItem->move";"void swfdisplayitem->move(int dx, int dy)";"Moves object in relative coordinates.";"void";
"1659";"Ming (flash)";"SWFDisplayItem->moveTo";"void swfdisplayitem->moveto(int x, int y)";"Moves object in global coordinates.";"void";
"1660";"Ming (flash)";"SWFDisplayItem->remove";"void swfdisplayitem->remove()";"Removes the object from the movie";"void";
"1661";"Ming (flash)";"SWFDisplayItem->Rotate";"void swfdisplayitem->rotate(float ddegrees)";"Rotates in relative coordinates.";"void";
"1662";"Ming (flash)";"SWFDisplayItem->rotateTo";"void swfdisplayitem->rotateto(float degrees)";"Rotates the object in global coordinates.";"void";
"1663";"Ming (flash)";"SWFDisplayItem->scale";"void swfdisplayitem->scale(int dx, int dy)";"Scales the object in relative coordinates.";"void";
"1664";"Ming (flash)";"SWFDisplayItem->scaleTo";"void swfdisplayitem->scaleto(int x, int y)";"Scales the object in global coordinates.";"void";
"1665";"Ming (flash)";"SWFDisplayItem->setDepth";"void swfdisplayitem->setdepth(float depth)";"Sets z-order";"void";
"1666";"Ming (flash)";"SWFDisplayItem->skewX";"void swfdisplayitem->skewx(float ddegrees)";"Sets the X-skew.";"void";
"1667";"Ming (flash)";"SWFDisplayItem->skewXTo";"void swfdisplayitem->skewxto(float degrees)";"Sets the X-skew.";"void";
"1668";"Ming (flash)";"SWFDisplayItem->skewY";"void swfdisplayitem->skewy(float ddegrees)";"Sets the Y-skew.";"void";
"1669";"Ming (flash)";"SWFDisplayItem->skewYTo";"void swfdisplayitem->skewyto(float degrees)";"Sets the Y-skew.";"void";
"1670";"Ming (flash)";"SWFDisplayItem";"new swfdisplayitem()";"Creates a new displayitem object.";"new";
"1671";"Ming (flash)";"SWFFill->moveTo";"void swffill->moveto(int x, int y)";"Moves fill origin";"void";
"1672";"Ming (flash)";"SWFFill->skewXTo";"void swffill->skewxto(float x)";"Sets fill x-skew";"void";
"1673";"Ming (flash)";"SWFFill->skewYTo";"void swffill->skewyto(float y)";"Sets fill y-skew";"void";
"1674";"Ming (flash)";"SWFFill";"new SWFFill()";"Loads SWFFill object";"new";
"1675";"Ming (flash)";"SWFFont";"new swffont(string filename)";"Loads a font definition";"new";
"1676";"Ming (flash)";"SWFGradient->addEntry";"void swfgradient->addentry(float ratio, int red, int green, int blue[, int a])";"Adds an entry to the gradient list.";"void";
"1677";"Ming (flash)";"SWFGradient";"new swfgradient()";"Creates a gradient object";"new";
"1678";"Ming (flash)";"SWFMorph->getshape1";"mixed swfmorph->getshape1()";"Gets a handle to the starting shape";"mixed";
"1679";"Ming (flash)";"SWFMorph->getshape2";"mixed swfmorph->getshape2()";"Gets a handle to the ending shape";"mixed";
"1680";"Ming (flash)";"SWFMorph";"new swfmorph()";"Creates a new SWFMorph object.";"new";
"1681";"Ming (flash)";"SWFMovie->add";"void swfmovie->add(resource instance)";"Adds any type of data to a movie.";"void";
"1682";"Ming (flash)";"SWFMovie->nextframe";"void swfmovie->nextframe()";"Moves to the next frame of the animation.";"void";
"1683";"Ming (flash)";"SWFMovie->output";"int swfmovie->output([int compression])";"Dumps your lovingly prepared movie out.";"int";
"1684";"Ming (flash)";"swfmovie->remove";"void swfmovie->remove(resource instance)";"Removes the object instance from the display list.";"void";
"1685";"Ming (flash)";"SWFMovie->save";"int swfmovie->save(string filename[, int compression])";"Saves your movie in a file.";"int";
"1686";"Ming (flash)";"SWFMovie->setbackground";"void swfmovie->setbackground(int red, int green, int blue)";"Sets the background color.";"void";
"1687";"Ming (flash)";"SWFMovie->setframes";"void swfmovie->setframes(string numberofframes)";"Sets the total number of frames in the animation.";"void";
"1688";"Ming (flash)";"SWFMovie->streammp3";"void swfmovie->streammp3(string mp3FileName)";"Streams a MP3 file.";"void";
"1689";"Ming (flash)";"SWFMovie";"new swfmovie()";"Creates a new movie object, representing an SWF version 4 movie.";"new";
"1690";"Ming (flash)";"SWFShape->addFill";"void swfshape->addfill(int red, int green, int blue[, int a])void swfshape->addfill(SWFbitmap bitmap[, int flags])void swfshape->addfill(SWFGradient gradient[, int flags])";"Adds a solid fill to the shape.";"void";
"1691";"Ming (flash)";"SWFShape->drawCurve";"void swfshape->drawcurve(int controldx, int controldy, int anchordx, int anchordy)";"Draws a curve (relative).";"void";
"1692";"Ming (flash)";"SWFShape->drawCurveTo";"void swfshape->drawcurveto(int controlx, int controly, int anchorx, int anchory)";"Draws a curve.";"void";
"1693";"Ming (flash)";"SWFShape->drawLine";"void swfshape->drawline(int dx, int dy)";"Draws a line (relative).";"void";
"1694";"Ming (flash)";"SWFShape->drawLineTo";"void swfshape->drawlineto(int x, int y)";"Draws a line.";"void";
"1695";"Ming (flash)";"SWFShape->setLeftFill";"void swfshape->setleftfill(swfgradient fill)void swfshape->setleftfill(int red, int green, int blue[, int a])";"Sets left rasterizing color.";"void";
"1696";"Ming (flash)";"SWFShape->setRightFill";"void swfshape->setrightfill(swfgradient fill)void swfshape->setrightfill(int red, int green, int blue[, int a])";"Sets right rasterizing color.";"void";
"1697";"Ming (flash)";"SWFShape";"new swfshape()";"Creates a new shape object.";"new";
"1698";"Ming (flash)";"swfsprite->add";"void swfsprite->add(resource object)";"Adds an object to a sprite";"void";
"1699";"Ming (flash)";"SWFSprite->nextframe";"void swfsprite->nextframe()";"Moves to the next frame of the animation.";"void";
"1700";"Ming (flash)";"SWFSprite->remove";"void swfsprite->remove(resource object)";"Removes an object to a sprite";"void";
"1701";"Ming (flash)";"SWFSprite->setframes";"void swfsprite->setframes(int numberofframes)";"Sets the total number of frames in the animation.";"void";
"1702";"Ming (flash)";"SWFSprite";"new swfsprite()";"Creates a movie clip (a sprite)";"new";
"1703";"Ming (flash)";"SWFText->addString";"void swftext->addstring(string string)";"Draws a string";"void";
"1704";"Ming (flash)";"SWFText->moveTo";"void swftext->moveto(int x, int y)";"Moves the pen";"void";
"1705";"Ming (flash)";"SWFText->setColor";"void swftext->setcolor(int red, int green, int blue[, int a])";"Sets the current font color";"void";
"1706";"Ming (flash)";"SWFText->setFont";"void swftext->setfont(string font)";"Sets the current font";"void";
"1707";"Ming (flash)";"SWFText->setHeight";"void swftext->setheight(int height)";"Sets the current font height";"void";
"1708";"Ming (flash)";"SWFText->setSpacing";"void swftext->setspacing(float spacing)";"Sets the current font spacing";"void";
"1709";"Ming (flash)";"SWFText";"new swftext()";"Creates a new SWFText object.";"new";
"1710";"Ming (flash)";"SWFTextField->addstring";"void swftextfield->addstring(string string)";"Concatenates the given string to the text field";"void";
"1711";"Ming (flash)";"SWFTextField->align";"void swftextfield->align(int alignement)";"Sets the text field alignment";"void";
"1712";"Ming (flash)";"SWFTextField->setbounds";"void swftextfield->setbounds(int width, int height)";"Sets the text field width and height";"void";
"1713";"Ming (flash)";"SWFTextField->setcolor";"void swftextfield->setcolor(int red, int green, int blue[, int a])";"Sets the color of the text field.";"void";
"1714";"Ming (flash)";"SWFTextField->setFont";"void swftextfield->setfont(string font)";"Sets the text field font";"void";
"1715";"Ming (flash)";"SWFTextField->setHeight";"void swftextfield->setheight(int height)";"Sets the font height of this text field font.";"void";
"1716";"Ming (flash)";"SWFTextField->setindentation";"void swftextfield->setindentation(int width)";"Sets the indentation of the first line.";"void";
"1717";"Ming (flash)";"SWFTextField->setLeftMargin";"void swftextfield->setleftmargin(int width)";"Sets the left margin width of the text field.";"void";
"1718";"Ming (flash)";"SWFTextField->setLineSpacing";"void swftextfield->setlinespacing(int height)";"Sets the line spacing of the text field.";"void";
"1719";"Ming (flash)";"SWFTextField->setMargins";"void swftextfield->setmargins(int left, int right)";"Sets the margins width of the text field.";"void";
"1720";"Ming (flash)";"SWFTextField->setname";"void swftextfield->setname(string name)";"Sets the variable name";"void";
"1721";"Ming (flash)";"SWFTextField->setrightMargin";"void swftextfield->setrightmargin(int width)";"Sets the right margin width of the text field.";"void";
"1722";"Ming (flash)";"SWFTextField";"new swftextfield([int flags])";"Creates a text field object";"new";
"1723";"Misc.";"connection_aborted";"int connection_aborted()";"Returns TRUE if client disconnected";"int";
"1724";"Misc.";"connection_status";"int connection_status()";"Returns connection status bitfield";"int";
"1725";"Misc.";"connection_timeout";"bool connection_timeout()";"Return TRUE if script timed out";"bool";
"1726";"Misc.";"constant";"mixed constant(string name)";"Returns the value of a constant";"mixed";
"1727";"Misc.";"define";"bool define(string name, mixed value[, bool case_insensitive])";"Defines a named constant.";"bool";
"1728";"Misc.";"defined";"bool defined(string name)";"Checks whether a given named constant exists";"bool";
"1729";"Misc.";"die";;"Equivalent to exit";;
"1730";"Misc.";"eval";"mixed eval(string code_str)";"Evaluate a string as PHP code";"mixed";
"1731";"Misc.";"exit";"void exit([string status])void exit(int status)";"Output a message and terminate the current script";"void";
"1732";"Misc.";"highlight_file";"mixed highlight_file(string filename[, bool return])";"Syntax highlighting of a file";"mixed";
"1733";"Misc.";"highlight_string";"mixed highlight_string(string str[, bool return])";"Syntax highlighting of a string";"mixed";
"1734";"Misc.";"ignore_user_abort";"int ignore_user_abort([bool setting])";"Set whether a client disconnect should abort script execution";"int";
"1735";"Misc.";"pack";"string pack(string format[, mixed args])";"Pack data into binary string.";"string";
"1736";"Misc.";"php_check_syntax";"bool php_check_syntax(string file_name[, string error_message])";"Check the syntax of the specified file";"bool";
"1737";"Misc.";"php_strip_whitespace";"string php_strip_whitespace(string file_name)";"Return source with stripped comments and whitespace";"string";
"1738";"Misc.";"show_source";;"Alias of highlight_file";;
"1739";"Misc.";"sleep";"void sleep(int seconds)";"Delay execution";"void";
"1740";"Misc.";"time_nanosleep";"mixed time_nanosleep(int seconds, int nanoseconds)";"Delay for a number of seconds and nano seconds";"mixed";
"1741";"Misc.";"uniqid";"string uniqid(string prefix[, bool lcg])";"Generate a unique ID";"string";
"1742";"Misc.";"unpack";"array unpack(string format, string data)";"Unpack data from binary string";"array";
"1743";"Misc.";"usleep";"void usleep(int micro_seconds)";"Delay execution in microseconds";"void";
"1744";"mnoGoSearch";"udm_add_search_limit";"bool udm_add_search_limit(resource agent, int var, string val)";"Add various search limits";"bool";
"1745";"mnoGoSearch";"udm_alloc_agent_array";"resource udm_alloc_agent_array(array databases)";"Allocate mnoGoSearch session";"resource";
"1746";"mnoGoSearch";"udm_alloc_agent";"resource udm_alloc_agent(string dbaddr[, string dbmode])";"Allocate mnoGoSearch session";"resource";
"1747";"mnoGoSearch";"udm_api_version";"int udm_api_version()";"Get mnoGoSearch API version.";"int";
"1748";"mnoGoSearch";"udm_cat_list";"array udm_cat_list(resource agent, string category)";"Get all the categories on the same level with the current one.";"array";
"1749";"mnoGoSearch";"udm_cat_path";"array udm_cat_path(resource agent, string category)";"Get the path to the current category.";"array";
"1750";"mnoGoSearch";"udm_check_charset";"bool udm_check_charset(resource agent, string charset)";"Check if the given charset is known to mnogosearch";"bool";
"1751";"mnoGoSearch";"udm_check_stored";"int udm_check_stored(resource agent, int link, string doc_id)";"Check connection to stored";"int";
"1752";"mnoGoSearch";"udm_clear_search_limits";"bool udm_clear_search_limits(resource agent)";"Clear all mnoGoSearch search restrictions";"bool";
"1753";"mnoGoSearch";"udm_close_stored";"int udm_close_stored(resource agent, int link)";"Close connection to stored";"int";
"1754";"mnoGoSearch";"udm_crc32";"int udm_crc32(resource agent, string str)";"Return CRC32 checksum of given string";"int";
"1755";"mnoGoSearch";"udm_errno";"int udm_errno(resource agent)";"Get mnoGoSearch error number";"int";
"1756";"mnoGoSearch";"udm_error";"string udm_error(resource agent)";"Get mnoGoSearch error message";"string";
"1757";"mnoGoSearch";"udm_find";"resource udm_find(resource agent, string query)";"Perform search";"resource";
"1758";"mnoGoSearch";"udm_free_agent";"int udm_free_agent(resource agent)";"Free mnoGoSearch session";"int";
"1759";"mnoGoSearch";"udm_free_ispell_data";"bool udm_free_ispell_data(int agent)";"Free memory allocated for ispell data";"bool";
"1760";"mnoGoSearch";"udm_free_res";"bool udm_free_res(resource res)";"Free mnoGoSearch result";"bool";
"1761";"mnoGoSearch";"udm_get_doc_count";"int udm_get_doc_count(resource agent)";"Get total number of documents in database.";"int";
"1762";"mnoGoSearch";"udm_get_res_field";"string udm_get_res_field(resource res, int row, int field)";"Fetch mnoGoSearch result field";"string";
"1763";"mnoGoSearch";"udm_get_res_param";"string udm_get_res_param(resource res, int param)";"Get mnoGoSearch result parameters";"string";
"1764";"mnoGoSearch";"udm_hash32";"int udm_hash32(resource agent, string str)";"Return Hash32 checksum of gived string";"int";
"1765";"mnoGoSearch";"udm_load_ispell_data";"bool udm_load_ispell_data(resource agent, int var, string val1, string val2, int flag)";"Load ispell data";"bool";
"1766";"mnoGoSearch";"udm_open_stored";"int udm_open_stored(resource agent, string storedaddr)";"Open connection to stored";"int";
"1767";"mnoGoSearch";"udm_set_agent_param";"bool udm_set_agent_param(resource agent, int var, string val)";"Set mnoGoSearch agent session parameters";"bool";
"1768";"mSQL";"msql_affected_rows";"int msql_affected_rows(resource query_identifier)";"Returns number of affected rows";"int";
"1769";"mSQL";"msql_close";"int msql_close([resource link_identifier])";"Close mSQL connection";"int";
"1770";"mSQL";"msql_connect";"int msql_connect([string hostname[, string username[, string password]]])";"Open mSQL connection";"int";
"1771";"mSQL";"msql_create_db";"bool msql_create_db(string database_name[, resource link_identifier])";"Create mSQL database";"bool";
"1772";"mSQL";"msql_createdb";;"Alias of msql_create_db";;
"1773";"mSQL";"msql_data_seek";"bool msql_data_seek(resource query_identifier, int row_number)";"Move internal row pointer";"bool";
"1774";"mSQL";"msql";"resouce msql_db_query(string database, string query[, resource link_identifier])";"Send mSQL query";"resouce";
"1775";"mSQL";"msql_dbname";;"Alias of msql_result";;
"1776";"mSQL";"msql_drop_db";"int msql_drop_db(string database_name[, resource link_identifier])";"Drop (delete) mSQL database";"int";
"1777";"mSQL";"msql_error";"string msql_error([resource link_identifier])";"Returns error message of last msql call";"string";
"1778";"mSQL";"msql_fetch_array";"int msql_fetch_array(int query_identifier[, int result_type])";"Fetch row as array";"int";
"1779";"mSQL";"msql_fetch_field";"object msql_fetch_field(resource query_identifier, int field_offset)";"Get field information";"object";
"1780";"mSQL";"msql_fetch_object";"int msql_fetch_object(int query_identifier)";"Fetch row as object";"int";
"1781";"mSQL";"msql_fetch_row";"array msql_fetch_row(resource query_identifier)";"Get row as enumerated array";"array";
"1782";"mSQL";"msql_field_flags";"string msql_field_flags(resource query_identifier, int field_offset)";"Get field flags";"string";
"1783";"mSQL";"msql_field_len";"int msql_field_len(resource query_identifier, int field_offset)";"Get field length";"int";
"1784";"mSQL";"msql_field_name";"string msql_field_name(resource query_identifier, int field)";"Get field name";"string";
"1785";"mSQL";"msql_field_seek";"int msql_field_seek(int query_identifier, int field_offset)";"Set field offset";"int";
"1786";"mSQL";"msql_field_table";"int msql_field_table(int query_identifier, int field)";"Get table name for field";"int";
"1787";"mSQL";"msql_field_type";"string msql_field_type(resource query_identifier, int field_offset)";"Get field type";"string";
"1788";"mSQL";"msql_fieldflags";;"Alias of msql_field_flags";;
"1789";"mSQL";"msql_fieldlen";;"Alias of msql_field_len";;
"1790";"mSQL";"msql_fieldname";;"Alias of msql_field_name";;
"1791";"mSQL";"msql_fieldtable";;"Alias of msql_field_table";;
"1792";"mSQL";"msql_fieldtype";;"Alias of msql_field_type";;
"1793";"mSQL";"msql_free_result";"int msql_free_result(resource query_identifier)";"Free result memory";"int";
"1794";"mSQL";"msql_list_dbs";"resource msql_list_dbs([resource link_identifier])";"List mSQL databases on server";"resource";
"1795";"mSQL";"msql_list_fields";"resource msql_list_fields(string database, string tablename[, resource link_identifier])";"List result fields";"resource";
"1796";"mSQL";"msql_list_tables";"resource msql_list_tables(string database[, resource link_identifier])";"List tables in an mSQL database";"resource";
"1797";"mSQL";"msql_num_fields";"int msql_num_fields(resource query_identifier)";"Get number of fields in result";"int";
"1798";"mSQL";"msql_num_rows";"int msql_num_rows(resource query_identifier)";"Get number of rows in result";"int";
"1799";"mSQL";"msql_numfields";;"Alias of msql_num_fields";;
"1800";"mSQL";"msql_numrows";;"Alias of msql_num_rows";;
"1801";"mSQL";"msql_pconnect";"int msql_pconnect([string server[, string username[, string password]]])";"Open persistent mSQL connection";"int";
"1802";"mSQL";"msql_query";"resource msql_query(string query[, resource link_identifier])";"Send mSQL query";"resource";
"1803";"mSQL";"msql_regcase";;"Alias of sql_regcase";;
"1804";"mSQL";"msql_result";"string msql_result(resource query_identifier, int row[, mixed field])";"Get result data";"string";
"1805";"mSQL";"msql_select_db";"bool msql_select_db(string database_name[, resource link_identifier])";"Select mSQL database";"bool";
"1806";"mSQL";"msql_tablename";;"Alias of msql_result";;
"1807";"mSQL";"msql";;"Alias of msql_db_query";;
"1808";"MySQL";"mysql_affected_rows";"int mysql_affected_rows([resource link_identifier])";"Get number of affected rows in previous MySQL operation";"int";
"1809";"MySQL";"mysql_change_user";"int mysql_change_user(string user, string password[, string database[, resource link_identifier]])";"Change logged in user of the active connection";"int";
"1810";"MySQL";"mysql_client_encoding";"string mysql_client_encoding([resource link_identifier])";"Returns the name of the character set";"string";
"1811";"MySQL";"mysql_close";"bool mysql_close([resource link_identifier])";"Close MySQL connection";"bool";
"1812";"MySQL";"mysql_connect";"resource mysql_connect([string server[, string username[, string password[, bool new_link[, int client_flags]]]]])";"Open a connection to a MySQL Server";"resource";
"1813";"MySQL";"mysql_create_db";"bool mysql_create_db(string database_name[, resource link_identifier])";"Create a MySQL database";"bool";
"1814";"MySQL";"mysql_data_seek";"bool mysql_data_seek(resource result_identifier, int row_number)";"Move internal result pointer";"bool";
"1815";"MySQL";"mysql_db_name";"string mysql_db_name(resource result, int row[, mixed field])";"Get result data";"string";
"1816";"MySQL";"mysql_db_query";"resource mysql_db_query(string database, string query[, resource link_identifier])";"Send a MySQL query";"resource";
"1817";"MySQL";"mysql_drop_db";"bool mysql_drop_db(string database_name[, resource link_identifier])";"Drop (delete) a MySQL database";"bool";
"1818";"MySQL";"mysql_errno";"int mysql_errno([resource link_identifier])";"Returns the numerical value of the error message from previous MySQL operation";"int";
"1819";"MySQL";"mysql_error";"string mysql_error([resource link_identifier])";"Returns the text of the error message from previous MySQL operation";"string";
"1820";"MySQL";"mysql_escape_string";"string mysql_escape_string(string unescaped_string)";"Escapes a string for use in a mysql_query.";"string";
"1821";"MySQL";"mysql_fetch_array";"array mysql_fetch_array(resource result[, int result_type])";"Fetch a result row as an associative array, a numeric array, or both.";"array";
"1822";"MySQL";"mysql_fetch_assoc";"array mysql_fetch_assoc(resource result)";"Fetch a result row as an associative array";"array";
"1823";"MySQL";"mysql_fetch_field";"object mysql_fetch_field(resource result[, int field_offset])";"Get column information from a result and return as an object";"object";
"1824";"MySQL";"mysql_fetch_lengths";"array mysql_fetch_lengths(resource result)";"Get the length of each output in a result";"array";
"1825";"MySQL";"mysql_fetch_object";"object mysql_fetch_object(resource result)";"Fetch a result row as an object";"object";
"1826";"MySQL";"mysql_fetch_row";"array mysql_fetch_row(resource result)";"Get a result row as an enumerated array";"array";
"1827";"MySQL";"mysql_field_flags";"string mysql_field_flags(resource result, int field_offset)";"Get the flags associated with the specified field in a result";"string";
"1828";"MySQL";"mysql_field_len";"int mysql_field_len(resource result, int field_offset)";"Returns the length of the specified field";"int";
"1829";"MySQL";"mysql_field_name";"string mysql_field_name(resource result, int field_index)";"Get the name of the specified field in a result";"string";
"1830";"MySQL";"mysql_field_seek";"int mysql_field_seek(resource result, int field_offset)";"Set result pointer to a specified field offset";"int";
"1831";"MySQL";"mysql_field_table";"string mysql_field_table(resource result, int field_offset)";"Get name of the table the specified field is in";"string";
"1832";"MySQL";"mysql_field_type";"string mysql_field_type(resource result, int field_offset)";"Get the type of the specified field in a result";"string";
"1833";"MySQL";"mysql_free_result";"bool mysql_free_result(resource result)";"Free result memory";"bool";
"1834";"MySQL";"mysql_get_client_info";"string mysql_get_client_info()";"Get MySQL client info";"string";
"1835";"MySQL";"mysql_get_host_info";"string mysql_get_host_info([resource link_identifier])";"Get MySQL host info";"string";
"1836";"MySQL";"mysql_get_proto_info";"int mysql_get_proto_info([resource link_identifier])";"Get MySQL protocol info";"int";
"1837";"MySQL";"mysql_get_server_info";"string mysql_get_server_info([resource link_identifier])";"Get MySQL server info";"string";
"1838";"MySQL";"mysql_info";"string mysql_info([resource link_identifier])";"Get information about the most recent query";"string";
"1839";"MySQL";"mysql_insert_id";"int mysql_insert_id([resource link_identifier])";"Get the ID generated from the previous INSERT operation";"int";
"1840";"MySQL";"mysql_list_dbs";"resource mysql_list_dbs([resource link_identifier])";"List databases available on a MySQL server";"resource";
"1841";"MySQL";"mysql_list_fields";"resource mysql_list_fields(string database_name, string table_name[, resource link_identifier])";"List MySQL table fields";"resource";
"1842";"MySQL";"mysql_list_processes";"resource mysql_list_processes([resource link_identifier])";"List MySQL processes";"resource";
"1843";"MySQL";"mysql_list_tables";"resource mysql_list_tables(string database[, resource link_identifier])";"List tables in a MySQL database";"resource";
"1844";"MySQL";"mysql_num_fields";"int mysql_num_fields(resource result)";"Get number of fields in result";"int";
"1845";"MySQL";"mysql_num_rows";"int mysql_num_rows(resource result)";"Get number of rows in result";"int";
"1846";"MySQL";"mysql_pconnect";"resource mysql_pconnect([string server[, string username[, string password[, int client_flags]]]])";"Open a persistent connection to a MySQL server";"resource";
"1847";"MySQL";"mysql_ping";"bool mysql_ping([resource link_identifier])";"Ping a server connection or reconnect if there is no connection";"bool";
"1848";"MySQL";"mysql_query";"resource mysql_query(string query[, resource link_identifier])";"Send a MySQL query";"resource";
"1849";"MySQL";"mysql_real_escape_string";"string mysql_real_escape_string(string unescaped_string[, resource link_identifier])";"Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection.";"string";
"1850";"MySQL";"mysql_result";"mixed mysql_result(resource result, int row[, mixed field])";"Get result data";"mixed";
"1851";"MySQL";"mysql_select_db";"bool mysql_select_db(string database_name[, resource link_identifier])";"Select a MySQL database";"bool";
"1852";"MySQL";"mysql_stat";"string mysql_stat([resource link_identifier])";"Get current system status";"string";
"1853";"MySQL";"mysql_tablename";"string mysql_tablename(resource result, int i)";"Get table name of field";"string";
"1854";"MySQL";"mysql_thread_id";"int mysql_thread_id([resource link_identifier])";"Return the current thread ID";"int";
"1855";"MySQL";"mysql_unbuffered_query";"resource mysql_unbuffered_query(string query[, resource link_identifier])";"Send an SQL query to MySQL, without fetching and buffering the result rows";"resource";
"1856";"mysqli";"mysqli_affected_rows";"mixed mysqli_affected_rows(object link)";"Gets the number of affected rows in a previous MySQL operation";"mixed";
"1857";"mysqli";"mysqli_autocommit";"bool mysqli_autocommit(object link, bool mode)";"Turns on or off auto-commiting database modifications";"bool";
"1858";"mysqli";"mysqli_bind_param";;"Alias for mysqli_stmt_bind_param";;
"1859";"mysqli";"mysqli_bind_result";;"Alias for mysqli_stmt_bind_result";;
"1860";"mysqli";"mysqli_change_user";"bool mysqli_change_user(object link, string user, string password, string database)";"Changes the user of the specified database connection";"bool";
"1861";"mysqli";"mysqli_character_set_name";"string mysqli_character_set_name(object link)";"Returns the default character set for the database connection";"string";
"1862";"mysqli";"mysqli_client_encoding";;"Alias of mysqli_character_set_name";;
"1863";"mysqli";"mysqli_close";"bool mysqli_close(object link)";"Closes a previously opened database connection";"bool";
"1864";"mysqli";"mysqli_commit";"bool mysqli_commit(object link)";"Commits the current transaction";"bool";
"1865";"mysqli";"mysqli_connect_errno";"int mysqli_connect_errno()";"Returns the error code from last connect call";"int";
"1866";"mysqli";"mysqli_connect_error";"string mysqli_connect_error()";"Returns a string description of the last connect error";"string";
"1867";"mysqli";"mysqli_connect";"object mysqli_connect([string host[, string username[, string passwd[, string dbname[, int port[, string socket]]]]]])";"Open a new connection to the MySQL server";"object";
"1868";"mysqli";"mysqli_data_seek";"bool mysqli_data_seek(object result, int offset)";"Adjusts the result pointer to an arbitary row in the result";"bool";
"1869";"mysqli";"mysqli_debug";"void mysqli_debug(string debug)";"Performs debugging operations";"void";
"1870";"mysqli";"mysqli_disable_reads_from_master";"void mysqli_disable_reads_from_master(resource link)";;"void";
"1871";"mysqli";"mysqli_disable_rpl_parse";"void mysqli_disable_rpl_parse(object link)";;"void";
"1872";"mysqli";"mysqli_dump_debug_info";"bool mysqli_dump_debug_info(object link)";"Dump debugging information into the log";"bool";
"1873";"mysqli";"mysqli_embedded_connect";"object mysqli_embedded_connect()";"Open a connection to an embedded mysql server.";"object";
"1874";"mysqli";"mysqli_enable_reads_from_master";"void mysqli_enable_reads_from_master(object link)";;"void";
"1875";"mysqli";"mysqli_enable_rpl_parse";"void mysqli_enable_rpl_parse(object link)";;"void";
"1876";"mysqli";"mysqli_errno";"int mysqli_errno(object link)";"Returns the error code for the most recent function call";"int";
"1877";"mysqli";"mysqli_error";"string mysqli_error(object link)";"Returns a string description of the last error";"string";
"1878";"mysqli";"mysqli_escape_string";;"Alias of mysqli_real_escape_string";;
"1879";"mysqli";"mysqli_execute";;"Alias for mysqli_stmt_execute";;
"1880";"mysqli";"mysqli_fetch_array";"mixed mysqli_fetch_array(object result[, int resulttype])";"Fetch a result row as an associative, a numeric array, or both.";"mixed";
"1881";"mysqli";"mysqli_fetch_assoc";"array mysqli_fetch_assoc(object result)";"Fetch a result row as an associative array";"array";
"1882";"mysqli";"mysqli_fetch_field_direct";"mixed mysqli_fetch_field_direct(object result, int fieldnr)";"Fetch meta-data for a single field";"mixed";
"1883";"mysqli";"mysqli_fetch_field";"mixed mysqli_fetch_field(object result)";"Returns the next field in the result set";"mixed";
"1884";"mysqli";"mysqli_fetch_fields";"mixed mysqli_fetch_fields(object result)";"Returns an array of objects representing the fields in a result set";"mixed";
"1885";"mysqli";"mysqli_fetch_lengths";"mixed mysqli_fetch_lengths(object result)";"Returns the lengths of the columns of the current row in the result set";"mixed";
"1886";"mysqli";"mysqli_fetch_object";"mixed mysqli_fetch_object(object result)";"Returns the current row of a result set as an object";"mixed";
"1887";"mysqli";"mysqli_fetch_row";"mixed mysqli_fetch_row(object result)";"Get a result row as an enumerated array";"mixed";
"1888";"mysqli";"mysqli_fetch";;"Alias for mysqli_stmt_fetch";;
"1889";"mysqli";"mysqli_field_count";"int mysqli_field_count(object link)";"Returns the number of columns for the most recent query";"int";
"1890";"mysqli";"mysqli_field_seek";"int mysqli_field_seek(object result, int fieldnr)";"Set result pointer to a specified field offset";"int";
"1891";"mysqli";"mysqli_field_tell";"int mysqli_field_tell(object result)";"Get current field offset of a result pointer";"int";
"1892";"mysqli";"mysqli_free_result";"void mysqli_free_result(object result)";"Frees the memory associated with a result";"void";
"1893";"mysqli";"mysqli_get_client_info";"string mysqli_get_client_info()";"Returns the MySQL client version as a string";"string";
"1894";"mysqli";"mysqli_get_client_version";"int mysqli_get_client_version()";"Get MySQL client info.";"int";
"1895";"mysqli";"mysqli_get_host_info";"string mysqli_get_host_info(object link)";"Returns a string representing the type of connection used";"string";
"1896";"mysqli";"mysqli_get_metadata";;"Alias for mysqli_stmt_result_metadata";;
"1897";"mysqli";"mysqli_get_proto_info";"int mysqli_get_proto_info(object link)";"Returns the version of the MySQL protocol used";"int";
"1898";"mysqli";"mysqli_get_server_info";"string mysqli_get_server_info(object link)";"Returns the version of the MySQL server";"string";
"1899";"mysqli";"mysqli_get_server_version";"int mysqli_get_server_version(object link)";"Returns the version of the MySQL server as an integer";"int";
"1900";"mysqli";"mysqli_info";"string mysqli_info(object link)";"Retrieves information about the most recently executed query";"string";
"1901";"mysqli";"mysqli_init";"object mysqli_init()";"Initializes MySQLi and returns an object for use with mysqli_real_connect";"object";
"1902";"mysqli";"mysqli_insert_id";"mixed mysqli_insert_id(object link)";"Returns the auto generated id used in the last query";"mixed";
"1903";"mysqli";"mysqli_kill";"bool mysqli_kill(object link, int processid)";"Asks the server to kill a MySQL thread";"bool";
"1904";"mysqli";"mysqli_master_query";"bool mysqli_master_query(object link, string query)";"Enforce execution of a query on the master in a master/slave setup.";"bool";
"1905";"mysqli";"mysqli_more_results";"bool mysqli_more_results(object link)";"Check if there any more query results from a multi query.";"bool";
"1906";"mysqli";"mysqli_multi_query";"bool mysqli_multi_query(object link, string query)";"Performs a query on the database";"bool";
"1907";"mysqli";"mysqli_next_result";"bool mysqli_next_result(object link)";"prepare next result from multi_query.";"bool";
"1908";"mysqli";"mysqli_num_fields";"int mysqli_num_fields(object result)";"Get the number of fields in a result";"int";
"1909";"mysqli";"mysqli_num_rows";"mixed mysqli_num_rows(object result)";"Gets the number of rows in a result";"mixed";
"1910";"mysqli";"mysqli_options";"bool mysqli_options(object link, int option, mixed value)";"set options";"bool";
"1911";"mysqli";"mysqli_param_count";;"Alias for mysqli_stmt_param_count";;
"1912";"mysqli";"mysqli_ping";"bool mysqli_ping(object link)";"Pings a server connection, or tries to reconnect if the connection has gone down.";"bool";
"1913";"mysqli";"mysqli_prepare";"mixed mysqli_prepare(object link, string query)";"Prepare a SQL statement for execution";"mixed";
"1914";"mysqli";"mysqli_query";"mixed mysqli_query(object link, string query[, int resultmode])";"Performs a query on the database";"mixed";
"1915";"mysqli";"mysqli_real_connect";"bool mysqli_real_connect(object link[, string hostname[, string username[, string passwd[, string dbname[, int port[, string socket[, int flags]]]]]]])";"Opens a connection to a mysql server";"bool";
"1916";"mysqli";"mysqli_real_escape_string";"string mysqli_real_escape_string(object link, string escapestr)";"Escapes special characters in a string for use in a SQL statement, taking into account the current charset of the connection";"string";
"1917";"mysqli";"mysqli_real_query";"bool mysqli_real_query(object link, string query)";"Execute an SQL query";"bool";
"1918";"mysqli";"mysqli_report";"bool mysqli_report(int flags)";"enables or disables internal report functions";"bool";
"1919";"mysqli";"mysqli_rollback";"bool mysqli_rollback(object link)";"Rolls back current transaction";"bool";
"1920";"mysqli";"mysqli_rpl_parse_enabled";"int mysqli_rpl_parse_enabled(object link)";;"int";
"1921";"mysqli";"mysqli_rpl_probe";"bool mysqli_rpl_probe(object link)";;"bool";
"1922";"mysqli";"mysqli_rpl_query_type";"int mysqli_rpl_query_type(string query)";;"int";
"1923";"mysqli";"mysqli_select_db";"bool mysqli_select_db(object link, string dbname)";"Selects the default database for database queries";"bool";
"1924";"mysqli";"mysqli_send_long_data";;"Alias for mysqli_stmt_send_long_data";;
"1925";"mysqli";"mysqli_send_query";"bool mysqli_send_query(resource link, string query)";;"bool";
"1926";"mysqli";"mysqli_server_end";"void mysqli_server_end()";;"void";
"1927";"mysqli";"mysqli_server_init";"bool mysqli_server_init()";"Initialize embedded server.";"bool";
"1928";"mysqli";"mysqli_set_opt";;"Alias of mysqli_options";;
"1929";"mysqli";"mysqli_sqlstate";"string mysqli_sqlstate(object link)";"Returns the SQLSTATE error from previous MySQL operation.";"string";
"1930";"mysqli";"mysqli_ssl_set";"bool mysqli_ssl_set(object link[, string key[, string cert[, string ca[, string capath[, string cipher]]]]])";"Used for establishing secure connections using SSL.";"bool";
"1931";"mysqli";"mysqli_stat";"mixed mysqli_stat(object link)";"Gets the current system status";"mixed";
"1932";"mysqli";"mysqli_stmt_affected_rows";"mixed mysqli_stmt_affected_rows(object stmt)";"Returns the total number of rows changed, deleted, or inserted by the last executed statement";"mixed";
"1933";"mysqli";"mysqli_stmt_bind_param";"bool mysqli_stmt_bind_param(object stmt, string types, mixed var1[, mixed var2, ...])";"Binds variables to a prepared statement as parameters";"bool";
"1934";"mysqli";"mysqli_stmt_bind_result";"bool mysqli_stnt_bind_result(object stmt, mixed var1[, mixed var2, ...])";"Binds variables to a prepared statement for result storage";"bool";
"1935";"mysqli";"mysqli_stmt_close";"bool mysqli_stmt_close(object stmt)";"Closes a prepared statement";"bool";
"1936";"mysqli";"mysqli_stmt_data_seek";"bool mysqli_stmt_data_seek(object statement, int offset)";"Seeks to an arbitray row in statement result set";"bool";
"1937";"mysqli";"mysqli_stmt_errno";"int mysqli_stmt_errno(object stmt)";"Returns the error code for the most recent statement call";"int";
"1938";"mysqli";"mysqli_stmt_error";"string mysqli_stmt_error(object stmt)";"Returns a string description for last statement error";"string";
"1939";"mysqli";"mysqli_stmt_execute";"bool mysqli_stmt_execute(object stmt)";"Executes a prepared Query";"bool";
"1940";"mysqli";"mysqli_stmt_fetch";"mixed mysqli_stmt_fetch(object stmt)";"Fetch results from a prepared statement into the bound variables";"mixed";
"1941";"mysqli";"mysqli_stmt_free_result";"void mysqli_stmt_free_result(object stmt)";"Frees stored result memory for the given statement handle";"void";
"1942";"mysqli";"mysqli_stmt-init";"object mysqli_stmt_init(object link)";"Initializes a statement and returns an object for use with mysqli_stmt_prepare";"object";
"1943";"mysqli";"mysqli_stmt_num_rows";"mixed mysqli_stmt_num_rows(object stmt)";"Return the number of rows in statements result set.";"mixed";
"1944";"mysqli";"mysqli_stmt_param_count";"int mysqli_stmt_param_count(object stmt)";"Returns the number of parameter for the given statement";"int";
"1945";"mysqli";"mysqli_stmt_prepare";"bool mysqli_stmt_prepare(object stmt, string query)";"Prepare a SQL statement for execution";"bool";
"1946";"mysqli";"mysqli_stmt_result_metadata";"mixed mysqli_stmt_result_metadata(object stmt)";"returns result set metadata from a prepared statement";"mixed";
"1947";"mysqli";"mysqli_stmt_send_long_data";"bool mysqli_stmt_send_long_data(object stmt, int param_nr, string data)";"Send data in blocks";"bool";
"1948";"mysqli";"mysqli_stmt_sqlstate";"string mysqli_stmt_sqlstate(object stmt)";"returns SQLSTATE error from previous statement operation";"string";
"1949";"mysqli";"mysqli_stmt_store_result";"bool mysqli_stmt_store_result(object stmt)";"Transfers a result set from a prepared statement";"bool";
"1950";"mysqli";"mysqli_store_result";"object mysqli_store_result(object link)";"Transfers a result set from the last query";"object";
"1951";"mysqli";"mysqli_thread_id";"int mysqli_thread_id(object link)";"Returns the thread ID for the current connection";"int";
"1952";"mysqli";"mysqli_thread_safe";"bool mysqli_thread_safe()";"Returns whether thread safety is given or not";"bool";
"1953";"mysqli";"mysqli_use_result";"mixed mysqli_use_result(object link)";"Initiate a result set retrieval";"mixed";
"1954";"mysqli";"mysqli_warning_count";"int mysqli_warning_count(object link)";"Returns the number of warnings from the last query for the given link";"int";
"1955";"Msession";"msession_connect";"bool msession_connect(string host, string port)";"Connect to msession server";"bool";
"1956";"Msession";"msession_count";"int msession_count()";"Get session count";"int";
"1957";"Msession";"msession_create";"bool msession_create(string session)";"Create a session";"bool";
"1958";"Msession";"msession_destroy";"bool msession_destroy(string name)";"Destroy a session";"bool";
"1959";"Msession";"msession_disconnect";"void msession_disconnect()";"Close connection to msession server";"void";
"1960";"Msession";"msession_find";"array msession_find(string name, string value)";"Find value";"array";
"1961";"Msession";"msession_get_array";"array msession_get_array(string session)";"Get array of ... ?";"array";
"1962";"Msession";"msession_get";"string msession_get(string session, string name, string value)";"Get value from session";"string";
"1963";"Msession";"msession_getdata";"string msession_getdata(string session)";"Get data ... ?";"string";
"1964";"Msession";"msession_inc";"string msession_inc(string session, string name)";"Increment value in session";"string";
"1965";"Msession";"msession_list";"array msession_list()";"List ... ?";"array";
"1966";"Msession";"msession_listvar";"array msession_listvar(string name)";"List sessions with variable";"array";
"1967";"Msession";"msession_lock";"int msession_lock(string name)";"Lock a session";"int";
"1968";"Msession";"msession_plugin";"string msession_plugin(string session, string val[, string param])";"Call an escape function within the msession personality plugin";"string";
"1969";"Msession";"msession_randstr";"string msession_randstr(int param)";"Get random string";"string";
"1970";"Msession";"msession_set_array";"bool msession_set_array(string session, array tuples)";"Set array of ...";"bool";
"1971";"Msession";"msession_set";"bool msession_set(string session, string name, string value)";"Set value in session";"bool";
"1972";"Msession";"msession_setdata";"bool msession_setdata(string session, string value)";"Set data  ... ?";"bool";
"1973";"Msession";"msession_timeout";"int msession_timeout(string session[, int param])";"Set/get session timeout";"int";
"1974";"Msession";"msession_uniq";"string msession_uniq(int param)";"Get uniq id";"string";
"1975";"Msession";"msession_unlock";"int msession_unlock(string session, int key)";"Unlock a session";"int";
"1976";"muscat";"muscat_close";"int muscat_close(resource muscat_handle)";"Shuts down the muscat session and releases any memory back to PHP.";"int";
"1977";"muscat";"muscat_get";"string muscat_get(resource muscat_handle)";"Gets a line back from the core muscat API.";"string";
"1978";"muscat";"muscat_give";"int muscat_give(resource muscat_handle, string string)";"Sends string to the core muscat API";"int";
"1979";"muscat";"muscat_setup_net";"resource muscat_setup_net(string muscat_host, int port)";"Creates a new muscat session and returns the handle.";"resource";
"1980";"muscat";"muscat_setup";"resource muscat_setup(int size[, string muscat_dir])";"Creates a new muscat session and returns the handle.";"resource";
"1981";"Network";"checkdnsrr";"int checkdnsrr(string host[, string type])";"Check DNS records corresponding to a given Internet host name or IP address";"int";
"1982";"Network";"closelog";"int closelog()";"Close connection to system logger";"int";
"1983";"Network";"debugger_off";"int debugger_off()";"Disable internal PHP debugger (PHP 3)";"int";
"1984";"Network";"debugger_on";"int debugger_on(string address)";"Enable internal PHP debugger (PHP 3)";"int";
"1985";"Network";"define_syslog_variables";"void define_syslog_variables()";"Initializes all syslog related constants";"void";
"1986";"Network";"dns_check_record";"int dns_check_record(string host[, string type])";"Synonym for checkdnsrr";"int";
"1987";"Network";"dns_get_mx";"int dns_get_mx(string hostname, array mxhosts[, array &weight])";"Synonym for getmxrr";"int";
"1988";"Network";"dns_get_record";"array dns_get_record(string hostname[, int type[, array &authns, array &addtl]])";"Fetch DNS Resource Records associated with a hostname";"array";
"1989";"Network";"fsockopen";"resource fsockopen(string target, int port[, int errno[, string errstr[, float timeout]]])";"Open Internet or Unix domain socket connection";"resource";
"1990";"Network";"gethostbyaddr";"string gethostbyaddr(string ip_address)";"Get the Internet host name corresponding to a given IP address";"string";
"1991";"Network";"gethostbyname";"string gethostbyname(string hostname)";"Get the IP address corresponding to a given Internet host name";"string";
"1992";"Network";"gethostbynamel";"array gethostbynamel(string hostname)";"Get a list of IP addresses corresponding to a given Internet host name";"array";
"1993";"Network";"getmxrr";"int getmxrr(string hostname, array mxhosts[, array weight])";"Get MX records corresponding to a given Internet host name";"int";
"1994";"Network";"getprotobyname";"int getprotobyname(string name)";"Get protocol number associated with protocol name";"int";
"1995";"Network";"getprotobynumber";"string getprotobynumber(int number)";"Get protocol name associated with protocol number";"string";
"1996";"Network";"getservbyname";"int getservbyname(string service, string protocol)";"Get port number associated with an Internet service and protocol";"int";
"1997";"Network";"getservbyport";"string getservbyport(int port, string protocol)";"Get Internet service which corresponds to port and protocol";"string";
"1998";"Network";"ip2long";"int ip2long(string ip_address)";"Converts a string containing an (IPv4) Internet Protocol dotted address into a proper address.";"int";
"1999";"Network";"long2ip";"string long2ip(int proper_address)";"Converts an (IPv4) Internet network address into a string in Internet standard dotted format";"string";
"2000";"Network";"openlog";"int openlog(string ident, int option, int facility)";"Open connection to system logger";"int";
"2001";"Network";"pfsockopen";"resource pfsockopen(string hostname, int port[, int errno[, string errstr[, int timeout]]])";"Open persistent Internet or Unix domain socket connection";"resource";
"2002";"Network";"socket_get_status";;"Alias of stream_get_meta_data";;
"2003";"Network";"socket_set_blocking";;"Alias of stream_set_blocking";;
"2004";"Network";"socket_set_timeout";;"Alias of stream_set_timeout";;
"2005";"Network";"syslog";"int syslog(int priority, string message)";"Generate a system log message";"int";
"2006";"Ncurses";"ncurses_addch";"int ncurses_addch(int ch)";"Add character at current position and advance cursor";"int";
"2007";"Ncurses";"ncurses_addchnstr";"int ncurses_addchnstr(string s, int n)";"Add attributed string with specified length at current position";"int";
"2008";"Ncurses";"ncurses_addchstr";"int ncurses_addchstr(string s)";"Add attributed string at current position";"int";
"2009";"Ncurses";"ncurses_addnstr";"int ncurses_addnstr(string s, int n)";"Add string with specified length at current position";"int";
"2010";"Ncurses";"ncurses_addstr";"int ncurses_addstr(string text)";"Output text at current position";"int";
"2011";"Ncurses";"ncurses_assume_default_colors";"int ncurses_assume_default_colors(int fg, int bg)";"Define default colors for color 0";"int";
"2012";"Ncurses";"ncurses_attroff";"int ncurses_attroff(int attributes)";"Turn off the given attributes";"int";
"2013";"Ncurses";"ncurses_attron";"int ncurses_attron(int attributes)";"Turn on the given attributes";"int";
"2014";"Ncurses";"ncurses_attrset";"int ncurses_attrset(int attributes)";"Set given attributes";"int";
"2015";"Ncurses";"ncurses_baudrate";"int ncurses_baudrate()";"Returns baudrate of terminal";"int";
"2016";"Ncurses";"ncurses_beep";"int ncurses_beep()";"Let the terminal beep";"int";
"2017";"Ncurses";"ncurses_bkgd";"int ncurses_bkgd(int attrchar)";"Set background property for terminal screen";"int";
"2018";"Ncurses";"ncurses_bkgdset";"void ncurses_bkgdset(int attrchar)";"Control screen background";"void";
"2019";"Ncurses";"ncurses_border";"int ncurses_border(int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)";"Draw a border around the screen using attributed characters";"int";
"2020";"Ncurses";"ncurses_bottom_panel";"int ncurses_bottom_panel(resource panel)";"Moves a visible panel to the bottom of the stack";"int";
"2021";"Ncurses";"ncurses_can_change_color";"bool ncurses_can_change_color()";"Check if we can change terminals colors";"bool";
"2022";"Ncurses";"ncurses_cbreak";"bool ncurses_cbreak()";"Switch of input buffering";"bool";
"2023";"Ncurses";"ncurses_clear";"bool ncurses_clear()";"Clear screen";"bool";
"2024";"Ncurses";"ncurses_clrtobot";"bool ncurses_clrtobot()";"Clear screen from current position to bottom";"bool";
"2025";"Ncurses";"ncurses_clrtoeol";"bool ncurses_clrtoeol()";"Clear screen from current position to end of line";"bool";
"2026";"Ncurses";"ncurses_color_content";"int ncurses_color_content(int color, int &r, int &g, int &b)";"Gets the RGB value for color";"int";
"2027";"Ncurses";"ncurses_color_set";"int ncurses_color_set(int pair)";"Set fore- and background color";"int";
"2028";"Ncurses";"ncurses_curs_set";"int ncurses_curs_set(int visibility)";"Set cursor state";"int";
"2029";"Ncurses";"ncurses_def_prog_mode";"bool ncurses_def_prog_mode()";"Saves terminals (program) mode";"bool";
"2030";"Ncurses";"ncurses_def_shell_mode";"bool ncurses_def_shell_mode()";"Saves terminals (shell) mode";"bool";
"2031";"Ncurses";"ncurses_define_key";"int ncurses_define_key(string definition, int keycode)";"Define a keycode";"int";
"2032";"Ncurses";"ncurses_del_panel";"int ncurses_del_panel(resource panel)";"Remove panel from the stack and delete it (but not the associated window)";"int";
"2033";"Ncurses";"ncurses_delay_output";"int ncurses_delay_output(int milliseconds)";"Delay output on terminal using padding characters";"int";
"2034";"Ncurses";"ncurses_delch";"bool ncurses_delch()";"Delete character at current position, move rest of line left";"bool";
"2035";"Ncurses";"ncurses_deleteln";"bool ncurses_deleteln()";"Delete line at current position, move rest of screen up";"bool";
"2036";"Ncurses";"ncurses_delwin";"int ncurses_delwin(resource window)";"Delete a ncurses window";"int";
"2037";"Ncurses";"ncurses_doupdate";"bool ncurses_doupdate()";"Write all prepared refreshes to terminal";"bool";
"2038";"Ncurses";"ncurses_echo";"bool ncurses_echo()";"Activate keyboard input echo";"bool";
"2039";"Ncurses";"ncurses_echochar";"int ncurses_echochar(int character)";"Single character output including refresh";"int";
"2040";"Ncurses";"ncurses_end";"int ncurses_end()";"Stop using ncurses, clean up the screen";"int";
"2041";"Ncurses";"ncurses_erase";"bool ncurses_erase()";"Erase terminal screen";"bool";
"2042";"Ncurses";"ncurses_erasechar";"string ncurses_erasechar()";"Returns current erase character";"string";
"2043";"Ncurses";"ncurses_filter";"int ncurses_filter()";;"int";
"2044";"Ncurses";"ncurses_flash";"bool ncurses_flash()";"Flash terminal screen (visual bell)";"bool";
"2045";"Ncurses";"ncurses_flushinp";"bool ncurses_flushinp()";"Flush keyboard input buffer";"bool";
"2046";"Ncurses";"ncurses_getch";"int ncurses_getch()";"Read a character from keyboard";"int";
"2047";"Ncurses";"ncurses_getmaxyx";"void ncurses_getmaxyx(resource window, int &y, int &x)";"Returns the size of a window";"void";
"2048";"Ncurses";"ncurses_getmouse";"bool ncurses_getmouse(array mevent)";"Reads mouse event";"bool";
"2049";"Ncurses";"ncurses_getyx";"void ncurses_getyx(resource window, int &y, int &x)";"Returns the current cursor position for a window";"void";
"2050";"Ncurses";"ncurses_halfdelay";"int ncurses_halfdelay(int tenth)";"Put terminal into halfdelay mode";"int";
"2051";"Ncurses";"ncurses_has_colors";"bool ncurses_has_colors()";"Check if terminal has colors";"bool";
"2052";"Ncurses";"ncurses_has_ic";"bool ncurses_has_ic()";"Check for insert- and delete-capabilities";"bool";
"2053";"Ncurses";"ncurses_has_il";"bool ncurses_has_il()";"Check for line insert- and delete-capabilities";"bool";
"2054";"Ncurses";"ncurses_has_key";"int ncurses_has_key(int keycode)";"Check for presence of a function key on terminal keyboard";"int";
"2055";"Ncurses";"ncurses_hide_panel";"int ncurses_hide_panel(resource panel)";"Remove panel from the stack, making it invisible";"int";
"2056";"Ncurses";"ncurses_hline";"int ncurses_hline(int charattr, int n)";"Draw a horizontal line at current position using an attributed character and max. n characters long";"int";
"2057";"Ncurses";"ncurses_inch";"string ncurses_inch()";"Get character and attribute at current position";"string";
"2058";"Ncurses";"ncurses_init_color";"int ncurses_init_color(int color, int r, int g, int b)";"Set new RGB value for color";"int";
"2059";"Ncurses";"ncurses_init_pair";"int ncurses_init_pair(int pair, int fg, int bg)";"Allocate a color pair";"int";
"2060";"Ncurses";"ncurses_init";"int ncurses_init()";"Initialize ncurses";"int";
"2061";"Ncurses";"ncurses_insch";"int ncurses_insch(int character)";"Insert character moving rest of line including character at current position";"int";
"2062";"Ncurses";"ncurses_insdelln";"int ncurses_insdelln(int count)";"Insert lines before current line scrolling down (negative numbers delete and scroll up)";"int";
"2063";"Ncurses";"ncurses_insertln";"bool ncurses_insertln()";"Insert a line, move rest of screen down";"bool";
"2064";"Ncurses";"ncurses_insstr";"int ncurses_insstr(string text)";"Insert string at current position, moving rest of line right";"int";
"2065";"Ncurses";"ncurses_instr";"int ncurses_instr(string buffer)";"Reads string from terminal screen";"int";
"2066";"Ncurses";"ncurses_isendwin";"bool ncurses_isendwin()";"Ncurses is in endwin mode, normal screen output may be performed";"bool";
"2067";"Ncurses";"ncurses_keyok";"int ncurses_keyok(int keycode, bool enable)";"Enable or disable a keycode";"int";
"2068";"Ncurses";"ncurses_keypad";"int ncurses_keypad(resource window, bool bf)";"Turns keypad on or off";"int";
"2069";"Ncurses";"ncurses_killchar";"bool ncurses_killchar()";"Returns current line kill character";"bool";
"2070";"Ncurses";"ncurses_longname";"string ncurses_longname()";"Returns terminals description";"string";
"2071";"Ncurses";"ncurses_meta";"long ncurses_meta(resource window, bool 8bit)";"Enables/Disable 8-bit meta key information";"long";
"2072";"Ncurses";"ncurses_mouse_trafo";"bool ncurses_mouse_trafo(int &y, int &x, bool toscreen)";"Transforms coordinates";"bool";
"2073";"Ncurses";"ncurses_mouseinterval";"int ncurses_mouseinterval(int milliseconds)";"Set timeout for mouse button clicks";"int";
"2074";"Ncurses";"ncurses_mousemask";"int ncurses_mousemask(int newmask, int oldmask)";"Sets mouse options";"int";
"2075";"Ncurses";"ncurses_move_panel";"int ncurses_move_panel(resource panel, int startx, int starty)";"Moves a panel so that its upper-left corner is at [startx, starty]";"int";
"2076";"Ncurses";"ncurses_move";"int ncurses_move(int y, int x)";"Move output position";"int";
"2077";"Ncurses";"ncurses_mvaddch";"int ncurses_mvaddch(int y, int x, int c)";"Move current position and add character";"int";
"2078";"Ncurses";"ncurses_mvaddchnstr";"int ncurses_mvaddchnstr(int y, int x, string s, int n)";"Move position and add attributed string with specified length";"int";
"2079";"Ncurses";"ncurses_mvaddchstr";"int ncurses_mvaddchstr(int y, int x, string s)";"Move position and add attributed string";"int";
"2080";"Ncurses";"ncurses_mvaddnstr";"int ncurses_mvaddnstr(int y, int x, string s, int n)";"Move position and add string with specified length";"int";
"2081";"Ncurses";"ncurses_mvaddstr";"int ncurses_mvaddstr(int y, int x, string s)";"Move position and add string";"int";
"2082";"Ncurses";"ncurses_mvcur";"int ncurses_mvcur(int old_y, int old_x, int new_y, int new_x)";"Move cursor immediately";"int";
"2083";"Ncurses";"ncurses_mvdelch";"int ncurses_mvdelch(int y, int x)";"Move position and delete character, shift rest of line left";"int";
"2084";"Ncurses";"ncurses_mvgetch";"int ncurses_mvgetch(int y, int x)";"Move position and get character at new position";"int";
"2085";"Ncurses";"ncurses_mvhline";"int ncurses_mvhline(int y, int x, int attrchar, int n)";"Set new position and draw a horizontal line using an attributed character and max. n characters long";"int";
"2086";"Ncurses";"ncurses_mvinch";"int ncurses_mvinch(int y, int x)";"Move position and get attributed character at new position";"int";
"2087";"Ncurses";"ncurses_mvvline";"int ncurses_mvvline(int y, int x, int attrchar, int n)";"Set new position and draw a vertical line using an attributed character and max. n characters long";"int";
"2088";"Ncurses";"ncurses_mvwaddstr";"int ncurses_mvwaddstr(resource window, int y, int x, string text)";"Add string at new position in window";"int";
"2089";"Ncurses";"ncurses_napms";"int ncurses_napms(int milliseconds)";"Sleep";"int";
"2090";"Ncurses";"ncurses_new_panel";"resource ncurses_new_panel(resource window)";"Create a new panel and associate it with window";"resource";
"2091";"Ncurses";"ncurses_newpad";"resource ncurses_newpad(int rows, int cols)";"Creates a new pad (window)";"resource";
"2092";"Ncurses";"ncurses_newwin";"resource ncurses_newwin(int rows, int cols, int y, int x)";"Create a new window";"resource";
"2093";"Ncurses";"ncurses_nl";"bool ncurses_nl()";"Translate newline and carriage return / line feed";"bool";
"2094";"Ncurses";"ncurses_nocbreak";"bool ncurses_nocbreak()";"Switch terminal to cooked mode";"bool";
"2095";"Ncurses";"ncurses_noecho";"bool ncurses_noecho()";"Switch off keyboard input echo";"bool";
"2096";"Ncurses";"ncurses_nonl";"bool ncurses_nonl()";"Do not translate newline and carriage return / line feed";"bool";
"2097";"Ncurses";"ncurses_noqiflush";"int ncurses_noqiflush()";"Do not flush on signal characters";"int";
"2098";"Ncurses";"ncurses_noraw";"bool ncurses_noraw()";"Switch terminal out of raw mode";"bool";
"2099";"Ncurses";"ncurses_pair_content";"int ncurses_pair_content(int pair, int &f, int &b)";"Gets the RGB value for color";"int";
"2100";"Ncurses";"ncurses_panel_above";"int ncurses_panel_above(resource panel)";"Returns the panel above panel. If panel is null, returns the bottom panel in the stack";"int";
"2101";"Ncurses";"ncurses_panel_below";"int ncurses_panel_below(resource panel)";"Returns the panel below panel. If panel is null, returns the top panel in the stack";"int";
"2102";"Ncurses";"ncurses_panel_window";"int ncurses_panel_window(resource panel)";"Returns the window associated with panel";"int";
"2103";"Ncurses";"ncurses_pnoutrefresh";"int ncurses_pnoutrefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)";"Copies a region from a pad into the virtual screen";"int";
"2104";"Ncurses";"ncurses_prefresh";"int ncurses_prefresh(resource pad, int pminrow, int pmincol, int sminrow, int smincol, int smaxrow, int smaxcol)";"Copies a region from a pad into the virtual screen";"int";
"2105";"Ncurses";"ncurses_putp";"int ncurses_putp(string text)";;"int";
"2106";"Ncurses";"ncurses_qiflush";"int ncurses_qiflush()";"Flush on signal characters";"int";
"2107";"Ncurses";"ncurses_raw";"bool ncurses_raw()";"Switch terminal into raw mode";"bool";
"2108";"Ncurses";"ncurses_refresh";"int ncurses_refresh(int ch)";"Refresh screen";"int";
"2109";"Ncurses";"ncurses_replace_panel";"int ncurses_replace_panel(resource panel, resource window)";"Replaces the window associated with panel";"int";
"2110";"Ncurses";"ncurses_reset_prog_mode";"int ncurses_reset_prog_mode()";"Resets the prog mode saved by def_prog_mode";"int";
"2111";"Ncurses";"ncurses_reset_shell_mode";"int ncurses_reset_shell_mode()";"Resets the shell mode saved by def_shell_mode";"int";
"2112";"Ncurses";"ncurses_resetty";"bool ncurses_resetty()";"Restores saved terminal state";"bool";
"2113";"Ncurses";"ncurses_savetty";"bool ncurses_savetty()";"Saves terminal state";"bool";
"2114";"Ncurses";"ncurses_scr_dump";"int ncurses_scr_dump(string filename)";"Dump screen content to file";"int";
"2115";"Ncurses";"ncurses_scr_init";"int ncurses_scr_init(string filename)";"Initialize screen from file dump";"int";
"2116";"Ncurses";"ncurses_scr_restore";"int ncurses_scr_restore(string filename)";"Restore screen from file dump";"int";
"2117";"Ncurses";"ncurses_scr_set";"int ncurses_scr_set(string filename)";"Inherit screen from file dump";"int";
"2118";"Ncurses";"ncurses_scrl";"int ncurses_scrl(int count)";"Scroll window content up or down without changing current position";"int";
"2119";"Ncurses";"ncurses_show_panel";"int ncurses_show_panel(resource panel)";"Places an invisible panel on top of the stack, making it visible";"int";
"2120";"Ncurses";"ncurses_slk_attr";"bool ncurses_slk_attr()";"Returns current soft label key attribute";"bool";
"2121";"Ncurses";"ncurses_slk_attroff";"int ncurses_slk_attroff(int intarg)";;"int";
"2122";"Ncurses";"ncurses_slk_attron";"int ncurses_slk_attron(int intarg)";;"int";
"2123";"Ncurses";"ncurses_slk_attrset";"int ncurses_slk_attrset(int intarg)";;"int";
"2124";"Ncurses";"ncurses_slk_clear";"bool ncurses_slk_clear()";"Clears soft labels from screen";"bool";
"2125";"Ncurses";"ncurses_slk_color";"int ncurses_slk_color(int intarg)";"Sets color for soft label keys";"int";
"2126";"Ncurses";"ncurses_slk_init";"bool ncurses_slk_init(int format)";"Initializes soft label key functions";"bool";
"2127";"Ncurses";"ncurses_slk_noutrefresh";"bool ncurses_slk_noutrefresh()";"Copies soft label keys to virtual screen";"bool";
"2128";"Ncurses";"ncurses_slk_refresh";"bool ncurses_slk_refresh()";"Copies soft label keys to screen";"bool";
"2129";"Ncurses";"ncurses_slk_restore";"bool ncurses_slk_restore()";"Restores soft label keys";"bool";
"2130";"Ncurses";"ncurses_slk_set";"bool ncurses_slk_set(int labelnr, string label, int format)";"Sets function key labels";"bool";
"2131";"Ncurses";"ncurses_slk_touch";"bool ncurses_slk_touch()";"Forces output when ncurses_slk_noutrefresh is performed";"bool";
"2132";"Ncurses";"ncurses_start_color";"int ncurses_start_color()";"Start using colors";"int";
"2133";"Ncurses";"ncurses_termattrs";"bool ncurses_termattrs()";"Returns a logical OR of all attribute flags supported by terminal";"bool";
"2134";"Ncurses";"ncurses_termname";"string ncurses_termname()";"Returns terminals (short)-name";"string";
"2135";"Ncurses";"ncurses_timeout";"void ncurses_timeout(int millisec)";"Set timeout for special key sequences";"void";
"2136";"Ncurses";"ncurses_top_panel";"int ncurses_top_panel(resource panel)";"Moves a visible panel to the top of the stack";"int";
"2137";"Ncurses";"ncurses_typeahead";"int ncurses_typeahead(int fd)";"Specify different filedescriptor for typeahead checking";"int";
"2138";"Ncurses";"ncurses_ungetch";"int ncurses_ungetch(int keycode)";"Put a character back into the input stream";"int";
"2139";"Ncurses";"ncurses_ungetmouse";"bool ncurses_ungetmouse(array mevent)";"Pushes mouse event to queue";"bool";
"2140";"Ncurses";"ncurses_update_panels";"void ncurses_update_panels()";"Refreshes the virtual screen to reflect the relations between panels in the stack.";"void";
"2141";"Ncurses";"ncurses_use_default_colors";"bool ncurses_use_default_colors()";"Assign terminal default colors to color id -1";"bool";
"2142";"Ncurses";"ncurses_use_env";"void ncurses_use_env(bool flag)";"Control use of environment information about terminal size";"void";
"2143";"Ncurses";"ncurses_use_extended_names";"int ncurses_use_extended_names(bool flag)";"Control use of extended names in terminfo descriptions";"int";
"2144";"Ncurses";"ncurses_vidattr";"int ncurses_vidattr(int intarg)";;"int";
"2145";"Ncurses";"ncurses_vline";"int ncurses_vline(int charattr, int n)";"Draw a vertical line at current position using an attributed character and max. n characters long";"int";
"2146";"Ncurses";"ncurses_waddch";"int ncurses_waddch(resource window, int ch)";"Adds character at current position in a window and advance cursor";"int";
"2147";"Ncurses";"ncurses_waddstr";"int ncurses_waddstr(resource window, string str[, int n])";"Outputs text at current postion in window";"int";
"2148";"Ncurses";"ncurses_wattroff";"int ncurses_wattroff(resource window, int attrs)";"Turns off attributes for a window";"int";
"2149";"Ncurses";"ncurses_wattron";"int ncurses_wattron(resource window, int attrs)";"Turns on attributes for a window";"int";
"2150";"Ncurses";"ncurses_wattrset";"int ncurses_wattrset(resource window, int attrs)";"Set the attributes for a window";"int";
"2151";"Ncurses";"ncurses_wborder";"int ncurses_wborder(resource window, int left, int right, int top, int bottom, int tl_corner, int tr_corner, int bl_corner, int br_corner)";"Draws a border around the window using attributed characters";"int";
"2152";"Ncurses";"ncurses_wclear";"int ncurses_wclear(resource window)";"Clears window";"int";
"2153";"Ncurses";"ncurses_wcolor_set";"int ncurses_wcolor_set(resource window, int color_pair)";"Sets windows color pairings";"int";
"2154";"Ncurses";"ncurses_werase";"long ncurses_werase(resource window)";"Erase window contents";"long";
"2155";"Ncurses";"ncurses_wgetch";"int ncurses_wgetch(resource window)";"Reads a character from keyboard (window)";"int";
"2156";"Ncurses";"ncurses_whline";"int ncurses_whline(resource window, int charattr, int n)";"Draws a horizontal line in a window at current position using an attributed character and max. n characters long";"int";
"2157";"Ncurses";"ncurses_wmouse_trafo";"bool ncurses_wmouse_trafo(resource window, int &y, int &x, bool toscreen)";"Transforms window/stdscr coordinates";"bool";
"2158";"Ncurses";"ncurses_wmove";"int ncurses_wmove(resource window, int y, int x)";"Moves windows output position";"int";
"2159";"Ncurses";"ncurses_wnoutrefresh";"int ncurses_wnoutrefresh(resource window)";"Copies window to virtual screen";"int";
"2160";"Ncurses";"ncurses_wrefresh";"int ncurses_wrefresh(resource window)";"Refresh window on terminal screen";"int";
"2161";"Ncurses";"ncurses_wstandend";"int ncurses_wstandend(resource window)";"End standout mode for a window";"int";
"2162";"Ncurses";"ncurses_wstandout";"int ncurses_wstandout(resource window)";"Enter standout mode for a window";"int";
"2163";"Ncurses";"ncurses_wvline";"int ncurses_wvline(resource window, int charattr, int n)";"Draws a vertical line in a window at current position using an attributed character and max. n characters long";"int";
"2164";"Lotus Notes";"notes_body";"array notes_body(string server, string mailbox, int msg_number)";"Open the message msg_number in the specified mailbox on the specified server (leave serv";"array";
"2165";"Lotus Notes";"notes_copy_db";"string notes_copy_db(string from_database_name, string to_database_name)";"Create a note using form form_name";"string";
"2166";"Lotus Notes";"notes_create_db";"bool notes_create_db(string database_name)";"Create a Lotus Notes database";"bool";
"2167";"Lotus Notes";"notes_create_note";"string notes_create_note(string database_name, string form_name)";"Create a note using form form_name";"string";
"2168";"Lotus Notes";"notes_drop_db";"bool notes_drop_db(string database_name)";"Drop a Lotus Notes database";"bool";
"2169";"Lotus Notes";"notes_find_note";"bool notes_find_note(string database_name, string name[, string type])";"Returns a note id found in database_name. Specify the name of the note. Leaving type bla";"bool";
"2170";"Lotus Notes";"notes_header_info";"object notes_header_info(string server, string mailbox, int msg_number)";"Open the message msg_number in the specified mailbox on the specified server (leave serv";"object";
"2171";"Lotus Notes";"notes_list_msgs";"bool notes_list_msgs(string db)";"Returns the notes from a selected database_name";"bool";
"2172";"Lotus Notes";"notes_mark_read";"string notes_mark_read(string database_name, string user_name, string note_id)";"Mark a note_id as read for the User user_name";"string";
"2173";"Lotus Notes";"notes_mark_unread";"string notes_mark_unread(string database_name, string user_name, string note_id)";"Mark a note_id as unread for the User user_name";"string";
"2174";"Lotus Notes";"notes_nav_create";"bool notes_nav_create(string database_name, string name)";"Create a navigator name, in database_name";"bool";
"2175";"Lotus Notes";"notes_search";"string notes_search(string database_name, string keywords)";"Find notes that match keywords in database_name";"string";
"2176";"Lotus Notes";"notes_version";"string notes_version(string database_name)";"Get the version Lotus Notes";"string";
"2177";"NSAPI";"nsapi_request_headers";"array nsapi_request_headers()";"Fetch all HTTP request headers";"array";
"2178";"NSAPI";"nsapi_response_headers";"array nsapi_response_headers()";"Fetch all HTTP response headers";"array";
"2179";"NSAPI";"nsapi_virtual";"int nsapi_virtual(string uri)";"Perform an NSAPI sub-request";"int";
"2180";"ODBC";"odbc_autocommit";"bool odbc_autocommit(resource connection_id[, bool OnOff])";"Toggle autocommit behaviour";"bool";
"2181";"ODBC";"odbc_binmode";"int odbc_binmode(resource result_id, int mode)";"Handling of binary column data";"int";
"2182";"ODBC";"odbc_close_all";"void odbc_close_all()";"Close all ODBC connections";"void";
"2183";"ODBC";"odbc_close";"void odbc_close(resource connection_id)";"Close an ODBC connection";"void";
"2184";"ODBC";"odbc_columnprivileges";"int odbc_columnprivileges(resource connection_id[, string qualifier[, string owner[, string table_name[, string column_name]]]])";"Returns a result identifier that can be used to fetch a list of columns and associated privileges";"int";
"2185";"ODBC";"odbc_columns";"resource odbc_columns(resource connection_id[, string qualifier[, string schema[, string table_name[, string column_name]]]])";"Lists the column names in specified tables. Returns a result identifier containing the information.";"resource";
"2186";"ODBC";"odbc_commit";"bool odbc_commit(resource connection_id)";"Commit an ODBC transaction";"bool";
"2187";"ODBC";"odbc_connect";"resource odbc_connect(string dsn, string user, string password[, int cursor_type])";"Connect to a datasource";"resource";
"2188";"ODBC";"odbc_cursor";"string odbc_cursor(resource result_id)";"Get cursorname";"string";
"2189";"ODBC";"odbc_data_source";"resource odbc_data_source(resource connection_id, constant fetch_type)";"Returns information about a current connection";"resource";
"2190";"ODBC";"odbc_do";"resource odbc_do(resource conn_id, string query)";"Synonym for odbc_exec";"resource";
"2191";"ODBC";"odbc_error";"string odbc_error([resource connection_id])";"Get the last error code";"string";
"2192";"ODBC";"odbc_errormsg";"string odbc_errormsg([resource connection_id])";"Get the last error message";"string";
"2193";"ODBC";"odbc_exec";"resource odbc_exec(resource connection_id, string query_string)";"Prepare and execute a SQL statement";"resource";
"2194";"ODBC";"odbc_execute";"bool odbc_execute(resource result_id[, array parameters_array])";"Execute a prepared statement";"bool";
"2195";"ODBC";"odbc_fetch_array";"array odbc_fetch_array(resource result[, int rownumber])";"Fetch a result row as an associative array";"array";
"2196";"ODBC";"odbc_fetch_into";"bool odbc_fetch_into(resource result_id[, int rownumber, array result_array])resource odbc_fetch_into(resource result_id, array result_array[, int rownumber])";"Fetch one result row into array";"bool";
"2197";"ODBC";"odbc_fetch_object";"object odbc_fetch_object(resource result[, int rownumber])";"Fetch a result row as an object";"object";
"2198";"ODBC";"odbc_fetch_row";"bool odbc_fetch_row(resource result_id[, int row_number])";"Fetch a row";"bool";
"2199";"ODBC";"odbc_field_len";"int odbc_field_len(resource result_id, int field_number)";"Get the length (precision) of a field";"int";
"2200";"ODBC";"odbc_field_name";"string odbc_field_name(resource result_id, int field_number)";"Get the columnname";"string";
"2201";"ODBC";"odbc_field_num";"int odbc_field_num(resource result_id, string field_name)";"Return column number";"int";
"2202";"ODBC";"odbc_field_precision";"string odbc_field_precision(resource result_id, int field_number)";"Synonym for odbc_field_len";"string";
"2203";"ODBC";"odbc_field_scale";"string odbc_field_scale(resource result_id, int field_number)";"Get the scale of a field";"string";
"2204";"ODBC";"odbc_field_type";"string odbc_field_type(resource result_id, int field_number)";"Datatype of a field";"string";
"2205";"ODBC";"odbc_foreignkeys";"resource odbc_foreignkeys(resource connection_id, string pk_qualifier, string pk_owner, string pk_table, string fk_qualifier, string fk_owner, string fk_table)";"Returns a list of foreign keys in the specified table or a list of foreign keys in other tables that refer to the primary key in the specified table";"resource";
"2206";"ODBC";"odbc_free_result";"bool odbc_free_result(resource result_id)";"Free resources associated with a result";"bool";
"2207";"ODBC";"odbc_gettypeinfo";"int odbc_gettypeinfo(resource connection_id[, int data_type])";"Returns a result identifier containing information about data types supported by the data source.";"int";
"2208";"ODBC";"odbc_longreadlen";"int odbc_longreadlen(resource result_id, int length)";"Handling of LONG columns";"int";
"2209";"ODBC";"odbc_next_result";"bool odbc_next_result(resource result_id)";"Checks if multiple results are available";"bool";
"2210";"ODBC";"odbc_num_fields";"int odbc_num_fields(resource result_id)";"Number of columns in a result";"int";
"2211";"ODBC";"odbc_num_rows";"int odbc_num_rows(resource result_id)";"Number of rows in a result";"int";
"2212";"ODBC";"odbc_pconnect";"resource odbc_pconnect(string dsn, string user, string password[, int cursor_type])";"Open a persistent database connection";"resource";
"2213";"ODBC";"odbc_prepare";"resource odbc_prepare(resource connection_id, string query_string)";"Prepares a statement for execution";"resource";
"2214";"ODBC";"odbc_primarykeys";"resource odbc_primarykeys(resource connection_id, string qualifier, string owner, string table)";"Returns a result identifier that can be used to fetch the column names that comprise the primary key for a table";"resource";
"2215";"ODBC";"odbc_procedurecolumns";"resource odbc_procedurecolumns(resource connection_id[, string qualifier[, string owner[, string proc[, string column]]]])";"Retrieve information about parameters to procedures";"resource";
"2216";"ODBC";"odbc_procedures";"resource odbc_procedures(resource connection_id[, string qualifier[, string owner[, string name]]])";"Get the list of procedures stored in a specific data source. Returns a result identifier containing the information.";"resource";
"2217";"ODBC";"odbc_result_all";"int odbc_result_all(resource result_id[, string format])";"Print result as HTML table";"int";
"2218";"ODBC";"odbc_result";"string odbc_result(resource result_id, mixed field)";"Get result data";"string";
"2219";"ODBC";"odbc_rollback";"int odbc_rollback(resource connection_id)";"Rollback a transaction";"int";
"2220";"ODBC";"odbc_setoption";"int odbc_setoption(resource id, int function, int option, int param)";"Adjust ODBC settings. Returns FALSE if an error occurs, otherwise TRUE.";"int";
"2221";"ODBC";"odbc_specialcolumns";"resource odbc_specialcolumns(resource connection_id, int type, string qualifier, string owner, string table, int scope, int nullable)";"Returns either the optimal set of columns that uniquely identifies a row in the table or columns that are automatically updated when any value in the row is updated by a transaction";"resource";
"2222";"ODBC";"odbc_statistics";"resource odbc_statistics(resource connection_id, string qualifier, string owner, string table_name, int unique, int accuracy)";"Retrieve statistics about a table";"resource";
"2223";"ODBC";"odbc_tableprivileges";"int odbc_tableprivileges(resource connection_id[, string qualifier[, string owner[, string name]]])";"Lists tables and the privileges associated with each table";"int";
"2224";"ODBC";"odbc_tables";"int odbc_tables(resource connection_id[, string qualifier[, string owner[, string name[, string types]]]])";"Get the list of table names stored in a specific data source. Returns a result identifier containing the information.";"int";
"2225";"Object Aggregation";"aggregate_info";"array aggregate_info(object object)";"Returns an associative array of the methods and properties from each class that has been aggregated to the object.";"array";
"2226";"Object Aggregation";"aggregate_methods_by_list";"void aggregate_methods_by_list(object object, string class_name, array methods_list[, bool exclude])";"Selective dynamic class methods aggregation to an object";"void";
"2227";"Object Aggregation";"aggregate_methods_by_regexp";"void aggregate_methods_by_regexp(object object, string class_name, string regexp[, bool exclude])";"Selective class methods aggregation to an object using a regular expression";"void";
"2228";"Object Aggregation";"aggregate_methods";"void aggregate_methods(object object, string class_name)";"Dynamic class and object aggregation of methods";"void";
"2229";"Object Aggregation";"aggregate_properties_by_list";"void aggregate_properties_by_list(object object, string class_name, array properties_list[, bool exclude])";"Selective dynamic class properties aggregation to an object";"void";
"2230";"Object Aggregation";"aggregate_properties_by_regexp";"void aggregate_properties_by_regexp(object object, string class_name, string regexp[, bool exclude])";"Selective class properties aggregation to an object using a regular expression";"void";
"2231";"Object Aggregation";"aggregate_properties";"void aggregate_properties(object object, string class_name)";"Dynamic aggregation of  class properties to an object";"void";
"2232";"Object Aggregation";"aggregate";"void aggregate(object object, string class_name)";"Dynamic class and object aggregation of methods and properties";"void";
"2233";"Object Aggregation";"aggregation_info";;"Alias of aggregate_info";;
"2234";"Object Aggregation";"deaggregate";"void deaggregate(object object[, string class_name])";"Removes the aggregated methods and properties from an object";"void";
"2235";"OCI8";"oci_bind_by_name";"bool oci_bind_by_name(resource stmt, string ph_name, mixed &variable[, int maxlength[, int type]])";"Binds the PHP variable to the Oracle placeholder";"bool";
"2236";"OCI8";"oci_cancel";"bool oci_cancel(resource stmt)";"Cancels reading from cursor";"bool";
"2237";"OCI8";"oci_close";"bool oci_close(resource connection)";"Closes Oracle connection";"bool";
"2238";"OCI8";"collection->append";"bool collection->append(mixed value)";"Appends an object to the collection";"bool";
"2239";"OCI8";"collection->assign";"bool collection->assign(object from)";"Assigns a value to the collection from another existing collection";"bool";
"2240";"OCI8";"collection->assignElem";"bool collection->assignElem(int index, mixed value)";"Assigns a value to the element of the collection";"bool";
"2241";"OCI8";"collection->getElem";"mixed collection->getElem(int index)";"Returns value of the element";"mixed";
"2242";"OCI8";"collection->max";"int collection->max()";"Gets the maximum number of elements in the collection";"int";
"2243";"OCI8";"collection->size";"int collection->size()";"Returns size of the collection";"int";
"2244";"OCI8";"collection->trim";"bool collection->trim(int num)";"Trims elements from the end of the collection";"bool";
"2245";"OCI8";"oci_commit";"bool oci_commit(resource connection)";"Commits outstanding statements";"bool";
"2246";"OCI8";"oci_connect";"resource oci_connect(string username, string password[, string db])";"Establishes a connection to Oracle server";"resource";
"2247";"OCI8";"oci_define_by_name";"bool oci_define_by_name(resource statement, string column_name, mixed &variable[, int type])";"Uses a PHP variable for the define-step during a SELECT";"bool";
"2248";"OCI8";"oci_error";"array ocierror([resource source])";"Returns the last error found";"array";
"2249";"OCI8";"oci_execute";"bool oci_execute(resource stmt[, int mode])";"Executes a statement";"bool";
"2250";"OCI8";"oci_fetch_all";"int oci_fetch_all(resource statement, array &output[, int skip[, int maxrows[, int flags]]])";"Fetches all rows of result data into an array";"int";
"2251";"OCI8";"oci_fetch_array";"array oci_fetch_array(resource statement[, int mode])";"Returns the next row from the result data as an associative or numeric array, or both";"array";
"2252";"OCI8";"oci_fetch_assoc";"array oci_fetch_assoc(resource statement)";"Returns the next row from the result data as an associative array";"array";
"2253";"OCI8";"oci_fetch_object";"object oci_fetch_object(resource statement)";"Returns the next row from the result data as an object";"object";
"2254";"OCI8";"oci_fetch_row";"array oci_fetch_row(resource statement)";"Returns the next row from the result data as a numeric array";"array";
"2255";"OCI8";"oci_fetch";"bool oci_fetch(resource statement)";"Fetches the next row into result-buffer";"bool";
"2256";"OCI8";"oci_field_is_null";"bool oci_field_is_null(resource stmt, mixed field)";"Checks if the field is NULL";"bool";
"2257";"OCI8";"oci_field_name";"string oci_field_name(resource statement, int field)";"Returns the name of a field from the statement";"string";
"2258";"OCI8";"oci_field_precision";"int oci_field_precision(resource statement, int field)";"Tell the precision of a field";"int";
"2259";"OCI8";"oci_field_scale";"int oci_field_scale(resource statement, int field)";"Tell the scale of the field";"int";
"2260";"OCI8";"oci_field_type_raw";"int oci_field_type_raw(resource statement, int field)";"Tell the raw Oracle data type of the field";"int";
"2261";"OCI8";"collection->free";"bool collection->free()";"Frees resources associated with collection object";"bool";
"2262";"OCI8";"descriptor->free";"bool descriptor->free()";"Frees resources associated with descriptor";"bool";
"2263";"OCI8";"oci_free_statement";"bool oci_free_statement(resource statement)";"Frees all resources associated with statement or cursor";"bool";
"2264";"OCI8";"oci_internal_debug";"void oci_internal_debug(int onoff)";"Enables or disables internal debug output";"void";
"2265";"OCI8";"lob->append";"bool lob->append(object lob_from)";"Appends data from the large object to another large object";"bool";
"2266";"OCI8";"lob->close";"bool lob->close()";"Closes LOB descriptor";"bool";
"2267";"OCI8";"oci_lob_copy";"bool oci_lob_copy([int length])";"Copies large object";"bool";
"2268";"OCI8";"lob->erase";"int lob->erase([int offset[, int length]])";"Erases a specified portion of the internal LOB data";"int";
"2269";"OCI8";"lob->flush";"bool lob->flush([int flag])";"Flushes/writes buffer of the LOB to the server";"bool";
"2270";"OCI8";"lob->import";"bool lob->import(string filename)";"Imports file data to the LOB";"bool";
"2271";"OCI8";"oci_lob_is_equal";"bool oci_lob_is_equal(object lob1, object lob2)";"Compares two LOB/FILE locators for equality";"bool";
"2272";"OCI8";"lob->read";"string lob->read(int length)";"Reads part of large object";"string";
"2273";"OCI8";"lob->rewind";"bool lob->rewind()";"Moves the internal pointer to the beginning of the large object";"bool";
"2274";"OCI8";"lob->save";"bool lob->save(string data[, int offset])";"Saves data to the large object";"bool";
"2275";"OCI8";"lob->seek";"bool lob->seek(int offset[, int whence])";"Sets the internal pointer of the large object";"bool";
"2276";"OCI8";"lob->size";"int lob->size()";"Returns size of large object";"int";
"2277";"OCI8";"lob->tell";"int lob->tell()";"Returns current position of internal pointer of large object";"int";
"2278";"OCI8";"lob->truncate";"bool lob->truncate([int length])";"Truncates large object";"bool";
"2279";"OCI8";"lob->writeTemporary";"bool lob->writeTemporary(string data[, int lob_type])";"Writes temporary large object";"bool";
"2280";"OCI8";"lob->write";"int lob->write(string data[, int length])";"Writes data to the large object";"int";
"2281";"OCI8";"oci_new_collection";"object oci_new_collection(resource connection, string tdo[, string schema])";"Allocates new collection object";"object";
"2282";"OCI8";"oci_new_connect";"resource oci_new_connect(string username, string password[, string db])";"Establishes a new connection to the Oracle server";"resource";
"2283";"OCI8";"oci_new_cursor";"resource oci_new_cursor(resource connection)";"Allocates and returns a new cursor (statement handle)";"resource";
"2284";"OCI8";"oci_new_descriptor";"object oci_new_descriptor(resource connection[, int type])";"Initializes a new empty LOB or FILE descriptor";"object";
"2285";"OCI8";"oci_num_fields";"int oci_num_fields(resource statement)";"Returns the number of result columns in a statement";"int";
"2286";"OCI8";"oci_num_rows";"int oci_num_rows(resource stmt)";"Returns number of rows affected during statement execution";"int";
"2287";"OCI8";"oci_parse";"resource oci_parse(resource connection, string query)";"Prepares Oracle statement for execution";"resource";
"2288";"OCI8";"oci_pconnect";"resource oci_pconnect(string username, string password[, string db])";"Connect to an Oracle database using a persistent connection";"resource";
"2289";"OCI8";"oci_rollback";"bool oci_rollback(resource connection)";"Rolls back outstanding transaction";"bool";
"2290";"OCI8";"oci_server_version";"string oci_server_version(resource connection)";"Returns server version";"string";
"2291";"OCI8";"oci_set_prefetch";"bool oci_set_prefetch(resource statement[, int rows])";"Sets number of rows to be prefetched";"bool";
"2292";"OCI8";"oci_statement_type";"string oci_statement_type(resource statement)";"Returns the type of an OCI statement";"string";
"2293";"OCI8";"ocibindbyname";"bool ocibindbyname(resource stmt, string ph_name, mixed &variable[, int maxlength[, int type]])";"Bind a PHP variable to an Oracle Placeholder";"bool";
"2294";"OCI8";"ocicancel";"bool ocicancel(resource stmt)";"Cancel reading from cursor";"bool";
"2295";"OCI8";"ocicloselob";"bool ocicloselob()";"Closes lob descriptor";"bool";
"2296";"OCI8";"ocicollappend";"bool ocicollappend(string value)";"Append an object to the collection";"bool";
"2297";"OCI8";"ocicollassign";"bool ocicollassign(object from)";"Assign a collection from another existing collection";"bool";
"2298";"OCI8";"ocicollassignelem";"bool ocicollassignelem(int ndx, string val)";"Assign element val to collection at index ndx";"bool";
"2299";"OCI8";"ocicollgetelem";"string ocicollgetelem(int ndx)";"Retrieve the value at collection index ndx";"string";
"2300";"OCI8";"ocicollmax";"int ocicollmax()";"Return the max value of a collection. For a varray this is the maximum length of the array";"int";
"2301";"OCI8";"ocicollsize";"int ocicollsize()";"Return the size of a collection";"int";
"2302";"OCI8";"ocicolltrim";"bool ocicolltrim(int num)";"Trim num elements from the end of a collection";"bool";
"2303";"OCI8";"ocicolumnisnull";"bool ocicolumnisnull(resource stmt, mixed col)";"Test whether a result column is NULL";"bool";
"2304";"OCI8";"ocicolumnname";"string ocicolumnname(resource stmt, int col)";"Returns the name of a column";"string";
"2305";"OCI8";"ocicolumnprecision";"int ocicolumnprecision(resource stmt, int col)";"Tell the precision of a column";"int";
"2306";"OCI8";"ocicolumnscale";"int ocicolumnscale(resource stmt, int col)";"Tell the scale of a column";"int";
"2307";"OCI8";"ocicolumnsize";"int ocicolumnsize(resource stmt, mixed column)";"Return result column size";"int";
"2308";"OCI8";"ocicolumntype";"mixed ocicolumntype(resource stmt, int col)";"Returns the data type of a column";"mixed";
"2309";"OCI8";"ocicolumntyperaw";"mixed ocicolumntyperaw(resource stmt, int col)";"Tell the raw oracle data type of a column";"mixed";
"2310";"OCI8";"ocicommit";"bool ocicommit(resource connection)";"Commits outstanding transactions";"bool";
"2311";"OCI8";"ocidefinebyname";"bool ocidefinebyname(resource stmt, string column_name, mixed &variable[, int type])";"Use a PHP variable for the define-step during a SELECT";"bool";
"2312";"OCI8";"ocierror";"array ocierror([resource stmt|conn|global])";"Return the last error of stmt|conn|global";"array";
"2313";"OCI8";"ociexecute";"bool ociexecute(resource stmt[, int mode])";"Execute a statement";"bool";
"2314";"OCI8";"ocifetch";"bool ocifetch(resource stmt)";"Fetches the next row into result-buffer";"bool";
"2315";"OCI8";"ocifetchinto";"int ocifetchinto(resource statement, array &result[, int mode])";"Fetches the next row into an array";"int";
"2316";"OCI8";"ocifetchstatement";"int ocifetchstatement(resource stmt, array &output[, int skip[, int maxrows[, int flags]]])";"Fetch all rows of result data into an array";"int";
"2317";"OCI8";"ocifreecollection";"bool ocifreecollection()";"Deletes collection object";"bool";
"2318";"OCI8";"ocifreecursor";"bool ocifreecursor(resource stmt)";"Free all resources associated with a cursor";"bool";
"2319";"OCI8";"ocifreedesc";"bool ocifreedesc()";"Deletes a large object descriptor";"bool";
"2320";"OCI8";"ocifreestatement";"bool ocifreestatement(resource stmt)";"Free all resources associated with a statement";"bool";
"2321";"OCI8";"lob->getBuffering";"bool lob->getBuffering()";"Returns current state of buffering for large object";"bool";
"2322";"OCI8";"ociinternaldebug";"void ociinternaldebug(int onoff)";"Enables or disables internal debug output";"void";
"2323";"OCI8";"ociloadlob";"string ociloadlob()";"Loads a large object";"string";
"2324";"OCI8";"ocilogoff";"bool ocilogoff(resource connection)";"Disconnects from Oracle server";"bool";
"2325";"OCI8";"ocilogon";"resource ocilogon(string username, string password[, string db])";"Establishes a connection to Oracle";"resource";
"2326";"OCI8";"ocinewcollection";"object ocinewcollection(resource connection, string tdo[, string schema])";"Initialize a new collection";"object";
"2327";"OCI8";"ocinewcursor";"resource ocinewcursor(resource conn)";"Return a new cursor (Statement-Handle)";"resource";
"2328";"OCI8";"ocinewdescriptor";"object ocinewdescriptor(resource connection[, int type])";"Initialize a new empty LOB or FILE descriptor";"object";
"2329";"OCI8";"ocinlogon";"resource ocinlogon(string username, string password[, string db])";"Establishes a new connection to Oracle";"resource";
"2330";"OCI8";"ocinumcols";"int ocinumcols(resource stmt)";"Return the number of result columns in a statement";"int";
"2331";"OCI8";"ociparse";"resource ociparse(resource conn, string query)";"Parse a query and return an Oracle statement";"resource";
"2332";"OCI8";"ociplogon";"resource ociplogon(string username, string password[, string db])";"Connect to an Oracle database using a persistent connection";"resource";
"2333";"OCI8";"ociresult";"mixed ociresult(resource statement, mixed col)";"Returns column value for fetched row";"mixed";
"2334";"OCI8";"ocirollback";"bool ocirollback(resource connection)";"Rolls back outstanding transactions";"bool";
"2335";"OCI8";"ocirowcount";"int ocirowcount(resource stmt)";"Gets the number of affected rows";"int";
"2336";"OCI8";"ocisavelob";"bool ocisavelob()";"Saves a large object";"bool";
"2337";"OCI8";"ocisavelobfile";"bool ocisavelobfile()";"Saves a large object file";"bool";
"2338";"OCI8";"ociserverversion";"string ociserverversion(resource conn)";"Return a string containing server version information";"string";
"2339";"OCI8";"lob->setBuffering";"bool lob->setBuffering(bool on_off)";"Changes current state of buffering for large object";"bool";
"2340";"OCI8";"ocisetprefetch";"bool ocisetprefetch(resource stmt, int rows)";"Sets number of rows to be prefetched";"bool";
"2341";"OCI8";"ocistatementtype";"string ocistatementtype(resource stmt)";"Return the type of an OCI statement";"string";
"2342";"OCI8";"ociwritelobtofile";"bool ociwritelobtofile([string filename[, int start[, int length]]])";"Saves a large object file";"bool";
"2343";"OCI8";"ociwritetemporarylob";"bool ociwritetemporarylob(string var[, int lob_type])";"Writes temporary blob";"bool";
"2344";"OpenSSL";"openssl_csr_export_to_file";"bool openssl_csr_export_to_file(resource csr, string outfilename[, bool notext])";"Exports a CSR to a file";"bool";
"2345";"OpenSSL";"openssl_csr_export";"bool openssl_csr_export(resource csr, string &out[, bool notext])";"Exports a CSR as a string";"bool";
"2346";"OpenSSL";"openssl_csr_new";"bool openssl_csr_new(array dn, resource privkey[, array configargs[, array extraattribs]])";"Generates a CSR";"bool";
"2347";"OpenSSL";"openssl_csr_sign";"resource openssl_csr_sign(mixed csr, mixed cacert, mixed priv_key, int days[, array configargs[, int serial]])";"Sign a CSR with another certificate (or itself) and generate a certificate";"resource";
"2348";"OpenSSL";"openssl_error_string";"mixed openssl_error_string()";"Return openSSL error message";"mixed";
"2349";"OpenSSL";"openssl_free_key";"void openssl_free_key(resource key_identifier)";"Free key resource";"void";
"2350";"OpenSSL";"openssl_get_privatekey";"resource openssl_get_privatekey(mixed key[, string passphrase])";"Get a private key";"resource";
"2351";"OpenSSL";"openssl_get_publickey";"resource openssl_get_publickey(mixed certificate)";"Extract public key from certificate and prepare it for use";"resource";
"2352";"OpenSSL";"openssl_open";"bool openssl_open(string sealed_data, string &open_data, string env_key, mixed priv_key_id)";"Open sealed data";"bool";
"2353";"OpenSSL";"openssl_pkcs7_decrypt";"bool openssl_pkcs7_decrypt(string infilename, string outfilename, mixed recipcert[, mixed recipkey])";"Decrypts an S/MIME encrypted message";"bool";
"2354";"OpenSSL";"openssl_pkcs7_encrypt";"bool openssl_pkcs7_encrypt(string infile, string outfile, mixed recipcerts, array headers[, int flags])";"Encrypt an S/MIME message";"bool";
"2355";"OpenSSL";"openssl_pkcs7_sign";"bool openssl_pkcs7_sign(string infilename, string outfilename, mixed signcert, mixed privkey, array headers[, int flags[, string extracerts]])";"sign an S/MIME message";"bool";
"2356";"OpenSSL";"openssl_pkcs7_verify";"bool openssl_pkcs7_verify(string filename, int flags[, string outfilename[, array cainfo[, string extracerts]]])";"Verifies the signature of an S/MIME signed message";"bool";
"2357";"OpenSSL";"openssl_pkey_export_to_file";"bool openssl_pkey_export_to_file(mixed key, string outfilename[, string passphrase[, array configargs]])";"Gets an exportable representation of a key into a file";"bool";
"2358";"OpenSSL";"openssl_pkey_export";"bool openssl_pkey_export(mixed key, string &out[, string passphrase[, array configargs]])";"Gets an exportable representation of a key into a string";"bool";
"2359";"OpenSSL";"openssl_pkey_get_private";"resource openssl_get_privatekey(mixed key[, string passphrase])";"Get a private key";"resource";
"2360";"OpenSSL";"openssl_pkey_get_public";"resource openssl_pkey_get_public(mixed certificate)";"Extract public key from certificate and prepare it for use";"resource";
"2361";"OpenSSL";"openssl_pkey_new";"resource openssl_pkey_new([array configargs])";"Generates a new private key";"resource";
"2362";"OpenSSL";"openssl_private_decrypt";"bool openssl_private_decrypt(string data, string &decrypted, mixed key[, int padding])";"Decrypts data with private key";"bool";
"2363";"OpenSSL";"openssl_private_encrypt";"bool openssl_private_encrypt(string data, string &crypted, mixed key[, int padding])";"Encrypts data with private key";"bool";
"2364";"OpenSSL";"openssl_public_decrypt";"bool openssl_public_decrypt(string data, string &decrypted, mixed key[, int padding])";"Decrypts data with public key";"bool";
"2365";"OpenSSL";"openssl_public_encrypt";"bool openssl_public_encrypt(string data, string &crypted, mixed key[, int padding])";"Encrypts data with public key";"bool";
"2366";"OpenSSL";"openssl_seal";"int openssl_seal(string data, string &sealed_data, array &env_keys, array pub_key_ids)";"Seal (encrypt) data";"int";
"2367";"OpenSSL";"openssl_sign";"bool openssl_sign(string data, string signature, mixed priv_key_id)";"Generate signature";"bool";
"2368";"OpenSSL";"openssl_verify";"int openssl_verify(string data, string signature, mixed pub_key_id)";"Verify signature";"int";
"2369";"OpenSSL";"openssl_x509_check_private_key";"bool openssl_x509_check_private_key(mixed cert, mixed key)";"Checks if a private key corresponds to a certificate";"bool";
"2370";"OpenSSL";"openssl_x509_checkpurpose";"bool openssl_x509_checkpurpose(mixed x509cert, int purpose, array cainfo[, string untrustedfile])";"Verifies if a certificate can be used for a particular purpose";"bool";
"2371";"OpenSSL";"openssl_x509_export_to_file";"bool openssl_x509_export_to_file(mixed x509, string outfilename[, bool notext])";"Exports a certificate to file";"bool";
"2372";"OpenSSL";"openssl_x509_export";"bool openssl_x509_export(mixed x509, string &output[, bool notext])";"Exports a certificate as a string";"bool";
"2373";"OpenSSL";"openssl_x509_free";"void openssl_x509_free(resource x509cert)";"Free certificate resource";"void";
"2374";"OpenSSL";"openssl_x509_parse";"array openssl_x509_parse(mixed x509cert[, bool shortnames])";"Parse an X509 certificate and return the information as an array";"array";
"2375";"OpenSSL";"openssl_x509_read";"resource openssl_x509_read(mixed x509certdata)";"Parse an X.509 certificate and return a resource identifier for it";"resource";
"2376";"Oracle";"ora_bind";"bool ora_bind(resource cursor, string PHP_variable_name, string SQL_parameter_name, int length[, int type])";"Binds a PHP variable to an Oracle parameter";"bool";
"2377";"Oracle";"ora_close";"bool ora_close(resource cursor)";"Closes an Oracle cursor";"bool";
"2378";"Oracle";"ora_columnname";"string ora_columnname(resource cursor, int column)";"Gets the name of an Oracle result column";"string";
"2379";"Oracle";"ora_columnsize";"int ora_columnsize(resource cursor, int column)";"Returns the size of an Oracle result column";"int";
"2380";"Oracle";"ora_columntype";"string ora_columntype(resource cursor, int column)";"Gets the type of an Oracle result column";"string";
"2381";"Oracle";"ora_commit";"bool ora_commit(resource conn)";"Commit an Oracle transaction";"bool";
"2382";"Oracle";"ora_commitoff";"bool ora_commitoff(resource conn)";"Disable automatic commit";"bool";
"2383";"Oracle";"ora_commiton";"bool ora_commiton(resource conn)";"Enable automatic commit";"bool";
"2384";"Oracle";"ora_do";"resource ora_do(resource conn, string query)";"Parse, Exec, Fetch";"resource";
"2385";"Oracle";"ora_error";"string ora_error(resource cursor_or_connection)";"Gets an Oracle error message";"string";
"2386";"Oracle";"ora_errorcode";"int ora_errorcode(resource cursor_or_connection)";"Gets an Oracle error code";"int";
"2387";"Oracle";"ora_exec";"bool ora_exec(resource cursor)";"Execute a parsed statement on an Oracle cursor";"bool";
"2388";"Oracle";"ora_fetch_into";"int ora_fetch_into(resource cursor, array result[, int flags])";"Fetch a row into the specified result array";"int";
"2389";"Oracle";"ora_fetch";"bool ora_fetch(resource cursor)";"Fetch a row of data from a cursor";"bool";
"2390";"Oracle";"ora_getcolumn";"mixed ora_getcolumn(resource cursor, int column)";"Get data from a fetched column";"mixed";
"2391";"Oracle";"ora_logoff";"bool ora_logoff(resource connection)";"Close an Oracle connection";"bool";
"2392";"Oracle";"ora_logon";"resource ora_logon(string user, string password)";"Open an Oracle connection";"resource";
"2393";"Oracle";"ora_numcols";"int ora_numcols(resource cursor)";"Returns the number of columns";"int";
"2394";"Oracle";"ora_numrows";"int ora_numrows(resource cursor)";"Returns the number of rows";"int";
"2395";"Oracle";"ora_open";"resource ora_open(resource connection)";"Opens an Oracle cursor";"resource";
"2396";"Oracle";"ora_parse";"bool ora_parse(resource cursor, string sql_statement, int defer)";"Parse an SQL statement with Oracle";"bool";
"2397";"Oracle";"ora_plogon";"resource ora_plogon(string user, string password)";"Open a persistent Oracle connection";"resource";
"2398";"Oracle";"ora_rollback";"bool ora_rollback(resource connection)";"Rolls back a transaction";"bool";
"2399";"OvrimosSQL";"ovrimos_close";"void ovrimos_close(int connection)";"Closes the connection to ovrimos";"void";
"2400";"OvrimosSQL";"ovrimos_commit";"bool ovrimos_commit(int connection_id)";"Commits the transaction";"bool";
"2401";"OvrimosSQL";"ovrimos_connect";"int ovrimos_connect(string host, string db, string user, string password)";"Connect to the specified database";"int";
"2402";"OvrimosSQL";"ovrimos_cursor";"string ovrimos_cursor(int result_id)";"Returns the name of the cursor";"string";
"2403";"OvrimosSQL";"ovrimos_exec";"int ovrimos_exec(int connection_id, string query)";"Executes an SQL statement";"int";
"2404";"OvrimosSQL";"ovrimos_execute";"bool ovrimos_execute(int result_id[, array parameters_array])";"Executes a prepared SQL statement";"bool";
"2405";"OvrimosSQL";"ovrimos_fetch_into";"bool ovrimos_fetch_into(int result_id, array result_array[, string how[, int rownumber]])";"Fetches a row from the result set";"bool";
"2406";"OvrimosSQL";"ovrimos_fetch_row";"bool ovrimos_fetch_row(int result_id[, int how[, int row_number]])";"Fetches a row from the result set";"bool";
"2407";"OvrimosSQL";"ovrimos_field_len";"int ovrimos_field_len(int result_id, int field_number)";"Returns the length of the output column";"int";
"2408";"OvrimosSQL";"ovrimos_field_name";"string ovrimos_field_name(int result_id, int field_number)";"Returns the output column name";"string";
"2409";"OvrimosSQL";"ovrimos_field_num";"int ovrimos_field_num(int result_id, string field_name)";"Returns the (1-based) index of the output column";"int";
"2410";"OvrimosSQL";"ovrimos_field_type";"int ovrimos_field_type(int result_id, int field_number)";"Returns the (numeric) type of the output column";"int";
"2411";"OvrimosSQL";"ovrimos_free_result";"bool ovrimos_free_result(int result_id)";"Frees the specified result_id";"bool";
"2412";"OvrimosSQL";"ovrimos_longreadlen";"bool ovrimos_longreadlen(int result_id, int length)";"Specifies how many bytes are to be retrieved from long datatypes";"bool";
"2413";"OvrimosSQL";"ovrimos_num_fields";"int ovrimos_num_fields(int result_id)";"Returns the number of columns";"int";
"2414";"OvrimosSQL";"ovrimos_num_rows";"int ovrimos_num_rows(int result_id)";"Returns the number of rows affected by update operations";"int";
"2415";"OvrimosSQL";"ovrimos_prepare";"int ovrimos_prepare(int connection_id, string query)";"Prepares an SQL statement";"int";
"2416";"OvrimosSQL";"ovrimos_result_all";"int ovrimos_result_all(int result_id[, string format])";"Prints the whole result set as an HTML table";"int";
"2417";"OvrimosSQL";"ovrimos_result";"string ovrimos_result(int result_id, mixed field)";"Retrieves the output column";"string";
"2418";"OvrimosSQL";"ovrimos_rollback";"bool ovrimos_rollback(int connection_id)";"Rolls back the transaction";"bool";
"2419";"Output Control";"flush";"void flush()";"Flush the output buffer";"void";
"2420";"Output Control";"ob_clean";"void ob_clean()";"Clean (erase) the output buffer";"void";
"2421";"Output Control";"ob_end_clean";"bool ob_end_clean()";"Clean (erase) the output buffer and turn off output buffering";"bool";
"2422";"Output Control";"ob_end_flush";"bool ob_end_flush()";"Flush (send) the output buffer and turn off output buffering";"bool";
"2423";"Output Control";"ob_flush";"void ob_flush()";"Flush (send) the output buffer";"void";
"2424";"Output Control";"ob_get_clean";"string ob_get_clean()";"Get current buffer contents and delete current output buffer";"string";
"2425";"Output Control";"ob_get_contents";"string ob_get_contents()";"Return the contents of the output buffer";"string";
"2426";"Output Control";"ob_get_flush";"string ob_get_flush()";"Flush the output buffer, return it as a string and turn off output buffering";"string";
"2427";"Output Control";"ob_get_length";"int ob_get_length()";"Return the length of the output buffer";"int";
"2428";"Output Control";"ob_get_level";"int ob_get_level()";"Return the nesting level of the output buffering mechanism";"int";
"2429";"Output Control";"ob_get_status";"array ob_get_status([bool full_status])";"Get status of output buffers";"array";
"2430";"Output Control";"ob_gzhandler";"string ob_gzhandler(string buffer[, int mode])";"ob_start callback function to gzip output buffer";"string";
"2431";"Output Control";"ob_implicit_flush";"void ob_implicit_flush([int flag])";"Turn implicit flush on/off";"void";
"2432";"Output Control";"ob_list_handlers";"array ob_list_handlers()";"List all output handlers in use";"array";
"2433";"Output Control";"ob_start";"bool ob_start([callback output_callback])";"Turn on output buffering";"bool";
"2434";"Output Control";"output_add_rewrite_var";"bool output_add_rewrite_var(string name, string value)";"Add URL rewriter values";"bool";
"2435";"Output Control";"output_reset_rewrite_vars";"bool output_reset_rewrite_vars()";"Reset URL rewriter values";"bool";
"2436";"Object overloading";"overload";"void overload([string class_name])";"Enable property and method call overloading for a class";"void";
"2437";"PDF";"pdf_add_annotation";;"Deprecated: Adds annotation";;
"2438";"PDF";"pdf_add_bookmark";"int pdf_add_bookmark(resource pdfdoc, string text[, int parent[, int open]])";"Adds bookmark for current page";"int";
"2439";"PDF";"pdf_add_launchlink";"bool pdf_add_launchlink(resource pdfdoc, float llx, float lly, float urx, float ury, string filename)";"Add a launch annotation for current page";"bool";
"2440";"PDF";"pdf_add_locallink";"bool pdf_add_locallink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, int page, string dest)";"Add a link annotation for current page";"bool";
"2441";"PDF";"pdf_add_note";"bool pdf_add_note(resource pdfdoc, float llx, float lly, float urx, float ury, string contents, string title, string icon, int open)";"Sets annotation for current page";"bool";
"2442";"PDF";"pdf_add_outline";;"Deprecated: Adds bookmark for current page";;
"2443";"PDF";"pdf_add_pdflink";"bool pdf_add_pdflink(resource pdfdoc, float bottom_left_x, float bottom_left_y, float up_right_x, float up_right_y, string filename, int page, string dest)";"Adds file link annotation for current page";"bool";
"2444";"PDF";"pdf_add_thumbnail";"bool pdf_add_thumbnail(resource pdfdoc, int image)";"Adds thumbnail for current page";"bool";
"2445";"PDF";"pdf_add_weblink";"bool pdf_add_weblink(resource pdfdoc, float lowerleftx, float lowerlefty, float upperrightx, float upperrighty, string url)";"Adds weblink for current page";"bool";
"2446";"PDF";"pdf_arc";"bool pdf_arc(resource pdfdoc, float x, float y, float r, float alpha, float beta)";"Draws an arc (counterclockwise)";"bool";
"2447";"PDF";"pdf_arcn";"bool pdf_arcn(resource pdfdoc, float x, float y, float r, float alpha, float beta)";"Draws an arc (clockwise)";"bool";
"2448";"PDF";"pdf_attach_file";"bool pdf_attach_file(resource pdfdoc, float llx, float lly, float urx, float ury, string filename, string description, string author, string mimetype, string icon)";"Adds a file attachment for current page";"bool";
"2449";"PDF";"pdf_begin_page";"bool pdf_begin_page(resource pdfdoc, float width, float height)";"Starts new page";"bool";
"2450";"PDF";"pdf_begin_pattern";"int pdf_begin_pattern(resource pdfdoc, float width, float height, float xstep, float ystep, int painttype)";"Starts new pattern";"int";
"2451";"PDF";"pdf_begin_template";"int pdf_begin_template(resource pdfdoc, float width, float height)";"Starts new template";"int";
"2452";"PDF";"pdf_circle";"bool pdf_circle(resource pdfdoc, float x, float y, float r)";"Draws a circle";"bool";
"2453";"PDF";"pdf_clip";"bool pdf_clip(resource pdfdoc)";"Clips to current path";"bool";
"2454";"PDF";"pdf_close_image";"void pdf_close_image(resource pdfdoc, int image)";"Closes an image";"void";
"2455";"PDF";"pdf_close_pdi_page";"bool pdf_close_pdi_page(resource pdfdoc, int pagehandle)";"Close the page handle";"bool";
"2456";"PDF";"pdf_close_pdi";"bool pdf_close_pdi(resource pdfdoc, int dochandle)";"Close the input PDF document";"bool";
"2457";"PDF";"pdf_close";"bool pdf_close(resource pdfdoc)";"Closes a pdf resource";"bool";
"2458";"PDF";"pdf_closepath_fill_stroke";"bool pdf_closepath_fill_stroke(resource pdfdoc)";"Closes, fills and strokes current path";"bool";
"2459";"PDF";"pdf_closepath_stroke";"bool pdf_closepath_stroke(resource pdfdoc)";"Closes path and draws line along path";"bool";
"2460";"PDF";"pdf_closepath";"bool pdf_closepath(resource pdfdoc)";"Closes path";"bool";
"2461";"PDF";"pdf_concat";"bool pdf_concat(resource pdfdoc, float a, float b, float c, float d, float e, float f)";"Concatenate a matrix to the CTM";"bool";
"2462";"PDF";"pdf_continue_text";"bool pdf_continue_text(resource pdfdoc, string text)";"Outputs text in next line";"bool";
"2463";"PDF";"pdf_curveto";"bool pdf_curveto(resource pdfdoc, float x1, float y1, float x2, float y2, float x3, float y3)";"Draws a curve";"bool";
"2464";"PDF";"pdf_delete";"bool pdf_delete(resource pdfdoc)";"Deletes a PDF object";"bool";
"2465";"PDF";"pdf_end_page";"bool pdf_end_page(resource pdfdoc)";"Ends a page";"bool";
"2466";"PDF";"pdf_end_pattern";"bool pdf_end_pattern(resource pdfdoc)";"Finish pattern";"bool";
"2467";"PDF";"pdf_end_template";"bool pdf_end_template(resource pdfdoc)";"Finish template";"bool";
"2468";"PDF";"pdf_endpath";;"Deprecated: Ends current path";;
"2469";"PDF";"pdf_fill_stroke";"bool pdf_fill_stroke(resource pdfdoc)";"Fills and strokes current path";"bool";
"2470";"PDF";"pdf_fill";"bool pdf_fill(resource pdfdoc)";"Fills current path";"bool";
"2471";"PDF";"pdf_findfont";"int pdf_findfont(resource pdfdoc, string fontname, string encoding[, int embed])";"Prepare font for later use with pdf_setfont.";"int";
"2472";"PDF";"pdf_get_buffer";"string pdf_get_buffer(resource pdfdoc)";"Fetch the buffer containing the generated PDF data.";"string";
"2473";"PDF";"pdf_get_font";;"Deprecated: font handling";;
"2474";"PDF";"pdf_get_fontname";;"Deprecated: font handling";;
"2475";"PDF";"pdf_get_fontsize";;"Deprecated: font handling";;
"2476";"PDF";"pdf_get_image_height";;"Deprecated: returns height of an image";;
"2477";"PDF";"pdf_get_image_width";;"Deprecated: Returns width of an image";;
"2478";"PDF";"pdf_get_majorversion";"int pdf_get_majorversion()";"Returns the major version number of the PDFlib";"int";
"2479";"PDF";"pdf_get_minorversion";"int pdf_get_minorversion()";"Returns the minor version number of the PDFlib";"int";
"2480";"PDF";"pdf_get_parameter";"string pdf_get_parameter(resource pdfdoc, string key[, float modifier])";"Gets certain parameters";"string";
"2481";"PDF";"pdf_get_pdi_parameter";"string pdf_get_pdi_parameter(resource pdfdoc, string key, int document, int page, int index)";"Get some PDI string parameters";"string";
"2482";"PDF";"pdf_get_pdi_value";"string pdf_get_pdi_value(resource pdfdoc, string key, int doc, int page, int index)";"Gets some PDI numerical parameters";"string";
"2483";"PDF";"pdf_get_value";"float pdf_get_value(resource pdfdoc, string key[, float modifier])";"Gets certain numerical value";"float";
"2484";"PDF";"pdf_initgraphics";"bool pdf_initgraphics(resource pdfdoc)";"Resets graphic state";"bool";
"2485";"PDF";"pdf_lineto";"bool pdf_lineto(resource pdfdoc, float x, float y)";"Draws a line";"bool";
"2486";"PDF";"pdf_makespotcolor";"bool pdf_makespotcolor(resource pdfdoc, string spotname)";"Makes a spotcolor";"bool";
"2487";"PDF";"pdf_moveto";"bool pdf_moveto(resource pdfdoc, float x, float y)";"Sets current point";"bool";
"2488";"PDF";"pdf_new";"resource pdf_new( )";"Creates a new pdf resource";"resource";
"2489";"PDF";"pdf_open_CCITT";"int pdf_open_CCITT(resource pdfdoc, string filename, int width, int height, int BitReverse, int k, int Blackls1)";"Opens a new image file with raw CCITT data";"int";
"2490";"PDF";"pdf_open_file";"bool pdf_open_file(resource pdfdoc[, string filename])";"Opens a new pdf object";"bool";
"2491";"PDF";"pdf_open_gif";;"Deprecated: Opens a GIF image";;
"2492";"PDF";"pdf_open_image_file";"int pdf_open_image_file(resource pdfdoc, string imagetype, string filename[, string stringparam[, string intparam]])";"Reads an image from a file";"int";
"2493";"PDF";"pdf_open_image";"int pdf_open_image(resource PDF-document, string imagetype, string source, string data, long length, int width, int height, int components, int bpc, string params)";"Versatile function for images";"int";
"2494";"PDF";"pdf_open_jpeg";;"Deprecated: Opens a JPEG image";;
"2495";"PDF";"pdf_open_pdi_page";"int pdf_open_pdi_page(resource pdfdoc, int dochandle, int pagenumber, string pagelabel)";"Prepare a page";"int";
"2496";"PDF";"pdf_open_pdi";"int pdf_open_pdi(resource pdfdoc, string filename, string stringparam, int intparam)";"Opens a PDF file";"int";
"2497";"PDF";"pdf_open_png";;"Deprecated: Opens a PNG image";;
"2498";"PDF";"pdf_open_tiff";;"Deprecated: Opens a TIFF image";;
"2499";"PDF";"pdf_open";;"Deprecated: Open a new pdf object";;
"2500";"PDF";"pdf_place_image";"bool pdf_place_image(resource pdfdoc, int image, float x, float y, float scale)";"Places an image on the page";"bool";
"2501";"PDF";"pdf_place_pdi_page";"bool pdf_place_pdi_page(resource pdfdoc, int page, float x, float y, float sx, float sy)";"Places an image on the page";"bool";
"2502";"PDF";"pdf_rect";"bool pdf_rect(resource pdfdoc, float x, float y, float width, float height)";"Draws a rectangle";"bool";
"2503";"PDF";"pdf_restore";"bool pdf_restore(resource pdfdoc)";"Restores formerly saved environment";"bool";
"2504";"PDF";"pdf_rotate";"bool pdf_rotate(resource pdfdoc, float phi)";"Sets rotation";"bool";
"2505";"PDF";"pdf_save";"bool pdf_save(resource pdfdoc)";"Saves the current environment";"bool";
"2506";"PDF";"pdf_scale";"bool pdf_scale(resource pdfdoc, float x-scale, float y-scale)";"Sets scaling";"bool";
"2507";"PDF";"pdf_set_border_color";"bool pdf_set_border_color(resource pdfdoc, float red, float green, float blue)";"Sets color of border around links and annotations";"bool";
"2508";"PDF";"pdf_set_border_dash";"bool pdf_set_border_dash(resource pdfdoc, float black, float white)";"Sets dash style of border around links and annotations";"bool";
"2509";"PDF";"pdf_set_border_style";"bool pdf_set_border_style(resource pdfdoc, string style, float width)";"Sets style of border around links and annotations";"bool";
"2510";"PDF";"pdf_set_char_spacing";;"Deprecated: Sets character spacing";;
"2511";"PDF";"pdf_set_duration";;"Deprecated: Sets duration between pages";;
"2512";"PDF";"pdf_set_font";;"Deprecated: Selects a font face and size";;
"2513";"PDF";"pdf_set_horiz_scaling";;"Sets horizontal scaling of text [deprecated]";;
"2514";"PDF";"pdf_set_info_author";;"Deprecated: Fills the author field of the document";;
"2515";"PDF";"pdf_set_info_creator";;"Deprecated: Fills the creator field of the document";;
"2516";"PDF";"pdf_set_info_keywords";;"Deprecated: Fills the keywords field of the document";;
"2517";"PDF";"pdf_set_info_subject";;"Deprecated: Fills the subject field of the document";;
"2518";"PDF";"pdf_set_info_title";;"Deprecated: Fills the title field of the document";;
"2519";"PDF";"pdf_set_info";"bool pdf_set_info(resource pdfdoc, string key, string value)";"Fills a field of the document information";"bool";
"2520";"PDF";"pdf_set_leading";;"Deprecated: Sets distance between text lines";;
"2521";"PDF";"pdf_set_parameter";"bool pdf_set_parameter(resource pdfdoc, string key, string value)";"Sets certain parameters";"bool";
"2522";"PDF";"pdf_set_text_matrix";;"Deprecated: Sets the text matrix";;
"2523";"PDF";"pdf_set_text_pos";"bool pdf_set_text_pos(resource pdfdoc, float x, float y)";"Sets text position";"bool";
"2524";"PDF";"pdf_set_text_rendering";;"Deprecated: Determines how text is rendered";;
"2525";"PDF";"pdf_set_text_rise";;"Deprecated: Sets the text rise";;
"2526";"PDF";"pdf_set_value";"bool pdf_set_value(resource pdfdoc, string key, float value)";"Sets certain numerical value";"bool";
"2527";"PDF";"pdf_set_word_spacing";;"Deprecated: Sets spacing between words";;
"2528";"PDF";"pdf_setcolor";"bool pdf_setcolor(resource pdfdoc, string type, string colorspace, float c1[, float c2[, float c3[, float c4]]])";"Sets fill and stroke color";"bool";
"2529";"PDF";"pdf_setdash";"bool pdf_setdash(resource pdfdoc, float b, float w)";"Sets dash pattern";"bool";
"2530";"PDF";"pdf_setflat";"bool pdf_setflat(resource pdfdoc, float flatness)";"Sets flatness";"bool";
"2531";"PDF";"pdf_setfont";"bool pdf_setfont(resource pdfdoc, int font, float size)";"Set the current font";"bool";
"2532";"PDF";"pdf_setgray_fill";"bool pdf_setgray_fill(resource pdfdoc, float gray)";"Sets filling color to gray value";"bool";
"2533";"PDF";"pdf_setgray_stroke";"bool pdf_setgray_stroke(resource pdfdoc, float gray)";"Sets drawing color to gray value";"bool";
"2534";"PDF";"pdf_setgray";"bool pdf_setgray(resource pdfdoc, float gray)";"Sets drawing and filling color to gray value";"bool";
"2535";"PDF";"pdf_setlinecap";"void pdf_setlinecap(resource pdfdoc, int linecap)";"Sets linecap parameter";"void";
"2536";"PDF";"pdf_setlinejoin";"bool pdf_setlinejoin(resource pdfdoc, int value)";"Sets linejoin parameter";"bool";
"2537";"PDF";"pdf_setlinewidth";"void pdf_setlinewidth(resource pdfdoc, float width)";"Sets line width";"void";
"2538";"PDF";"pdf_setmatrix";"bool pdf_setmatrix(resource pdfdoc, float a, float b, float c, float d, float e, float f)";"Sets current transformation matrix";"bool";
"2539";"PDF";"pdf_setmiterlimit";"bool pdf_setmiterlimit(resource pdfdoc, float miter)";"Sets miter limit";"bool";
"2540";"PDF";"pdf_setpolydash";;"Deprecated: Sets complicated dash pattern";;
"2541";"PDF";"pdf_setrgbcolor_fill";"bool pdf_setrgbcolor_fill(resource pdfdoc, float red_value, float green_value, float blue_value)";"Sets filling color to rgb color value";"bool";
"2542";"PDF";"pdf_setrgbcolor_stroke";"bool pdf_setrgbcolor_stroke(resource pdfdoc, float red_value, float green_value, float blue_value)";"Sets drawing color to rgb color value";"bool";
"2543";"PDF";"pdf_setrgbcolor";"bool pdf_setrgbcolor(resource pdfdoc, float red_value, float green_value, float blue_value)";"Sets drawing and filling color to rgb color value";"bool";
"2544";"PDF";"pdf_show_boxed";"int pdf_show_boxed(resource pdfdoc, string text, float left, float top, float width, float height, string mode[, string feature])";"Output text in a box";"int";
"2545";"PDF";"pdf_show_xy";"bool pdf_show_xy(resource pdfdoc, string text, float x, float y)";"Output text at given position";"bool";
"2546";"PDF";"pdf_show";"bool pdf_show(resource pdfdoc, string text)";"Output text at current position";"bool";
"2547";"PDF";"pdf_skew";"bool pdf_skew(resource pdfdoc, float alpha, float beta)";"Skews the coordinate system";"bool";
"2548";"PDF";"pdf_stringwidth";"float pdf_stringwidth(resource pdfdoc, string text[, int font[, float size]])";"Returns width of text using current font";"float";
"2549";"PDF";"pdf_stroke";"bool pdf_stroke(resource pdfdoc)";"Draws line along path";"bool";
"2550";"PDF";"pdf_translate";"bool pdf_translate(resource pdfdoc, float tx, float ty)";"Sets origin of coordinate system";"bool";
"2551";"Verisign Payflow Pro";"pfpro_cleanup";"void pfpro_cleanup()";"Shuts down the Payflow Pro library";"void";
"2552";"Verisign Payflow Pro";"pfpro_init";"void pfpro_init()";"Initialises the Payflow Pro library";"void";
"2553";"Verisign Payflow Pro";"pfpro_process_raw";"string pfpro_process_raw(string parameters[, string address[, int port[, int timeout[, string proxy_address[, int proxy_port[, string proxy_logon[, string proxy_password]]]]]]])";"Process a raw transaction with Payflow Pro";"string";
"2554";"Verisign Payflow Pro";"pfpro_process";"array pfpro_process(array parameters[, string address[, int port[, int timeout[, string proxy_address[, int proxy_port[, string proxy_logon[, string proxy_password]]]]]]])";"Process a transaction with Payflow Pro";"array";
"2555";"Verisign Payflow Pro";"pfpro_version";"string pfpro_version()";"Returns the version of the Payflow Pro software";"string";
"2556";"PHP Options/Info";"assert_options";"mixed assert_options(int what[, mixed value])";"Set/get the various assert flags";"mixed";
"2557";"PHP Options/Info";"assert";"int assert(mixed assertion)";"Checks if assertion is FALSE";"int";
"2558";"PHP Options/Info";"dl";"int dl(string library)";"Loads a PHP extension at runtime";"int";
"2559";"PHP Options/Info";"extension_loaded";"bool extension_loaded(string name)";"Find out whether an extension is loaded";"bool";
"2560";"PHP Options/Info";"get_cfg_var";"string get_cfg_var(string varname)";"Gets the value of a PHP configuration option";"string";
"2561";"PHP Options/Info";"get_current_user";"string get_current_user()";"Gets the name of the owner of the current PHP script";"string";
"2562";"PHP Options/Info";"get_defined_constants";"array get_defined_constants()";"Returns an associative array with the names of all the constants and their values";"array";
"2563";"PHP Options/Info";"get_extension_funcs";"array get_extension_funcs(string module_name)";"Returns an array with the names of the functions of a module";"array";
"2564";"PHP Options/Info";"get_include_path";"string get_include_path()";"Gets the current include_path configuration option";"string";
"2565";"PHP Options/Info";"get_included_files";"array get_included_files()";"Returns an array with the names of included or required files";"array";
"2566";"PHP Options/Info";"get_loaded_extensions";"array get_loaded_extensions()";"Returns an array with the names of all modules compiled and loaded";"array";
"2567";"PHP Options/Info";"get_magic_quotes_gpc";"int get_magic_quotes_gpc()";"Gets the current active configuration setting of magic quotes gpc";"int";
"2568";"PHP Options/Info";"get_magic_quotes_runtime";"int get_magic_quotes_runtime()";"Gets the current active configuration setting of magic_quotes_runtime";"int";
"2569";"PHP Options/Info";"get_required_files";;"Alias of get_included_files";;
"2570";"PHP Options/Info";"getenv";"string getenv(string varname)";"Gets the value of an environment variable";"string";
"2571";"PHP Options/Info";"getlastmod";"int getlastmod()";"Gets time of last page modification";"int";
"2572";"PHP Options/Info";"getmyinode";"int getmyinode()";"Gets the inode of the current script";"int";
"2573";"PHP Options/Info";"getopt";"array getopt(string options)";"Gets options from the command line argument list";"array";
"2574";"PHP Options/Info";"getrusage";"array getrusage([int who])";"Gets the current resource usages";"array";
"2575";"PHP Options/Info";"ini_alter";;"Alias of ini_set";;
"2576";"PHP Options/Info";"ini_get_all";"array ini_get_all([string extension])";"Gets all configuration options";"array";
"2577";"PHP Options/Info";"ini_get";"string ini_get(string varname)";"Gets the value of a configuration option";"string";
"2578";"PHP Options/Info";"ini_restore";"void ini_restore(string varname)";"Restores the value of a configuration option";"void";
"2579";"PHP Options/Info";"ini_set";"string ini_set(string varname, string newvalue)";"Sets the value of a configuration option";"string";
"2580";"PHP Options/Info";"main";;"Dummy for main";;
"2581";"PHP Options/Info";"memory_get_usage";"int memory_get_usage()";"Returns the amount of memory allocated to PHP";"int";
"2582";"PHP Options/Info";"php_ini_scanned_files";"string php_ini_scanned_files()";"Return a list of .ini files parsed from the additional ini dir";"string";
"2583";"PHP Options/Info";"php_logo_guid";"string php_logo_guid()";"Gets the logo guid";"string";
"2584";"PHP Options/Info";"php_sapi_name";"string php_sapi_name()";"Returns the type of interface between web server and PHP";"string";
"2585";"PHP Options/Info";"php_uname";"string php_uname()";"Returns information about the operating system PHP was built on";"string";
"2586";"PHP Options/Info";"phpcredits";"void phpcredits([int flag])";"Prints out the credits for PHP";"void";
"2587";"PHP Options/Info";"phpinfo";"int phpinfo([int what])";"Outputs lots of PHP information";"int";
"2588";"PHP Options/Info";"phpversion";"string phpversion()";"Gets the current PHP version";"string";
"2589";"PHP Options/Info";"putenv";"void putenv(string setting)";"Sets the value of an environment variable";"void";
"2590";"PHP Options/Info";"restore_include_path";"void restore_include_path()";"Restores the value of the include_path configuration option";"void";
"2591";"PHP Options/Info";"set_include_path";"string set_include_path(string new_include_path)";"Sets the include_path configuration option";"string";
"2592";"PHP Options/Info";"set_magic_quotes_runtime";"bool set_magic_quotes_runtime(int new_setting)";"Sets the current active configuration setting of magic_quotes_runtime";"bool";
"2593";"PHP Options/Info";"set_time_limit";"void set_time_limit(int seconds)";"Limits the maximum execution time";"void";
"2594";"PHP Options/Info";"version_compare";"int version_compare(string version1, string version2[, string operator])";"Compares two PHP-standardized version number strings";"int";
"2595";"PHP Options/Info";"zend_logo_guid";"string zend_logo_guid()";"Gets the Zend guid";"string";
"2596";"PHP Options/Info";"zend_version";"string zend_version()";"Gets the version of the current Zend engine";"string";
"2597";"POSIX";"posix_ctermid";"string posix_ctermid()";"Get path name of controlling terminal";"string";
"2598";"POSIX";"posix_get_last_error";"int posix_get_last_error()";"Retrieve the error number set by the last posix function that failed.";"int";
"2599";"POSIX";"posix_getcwd";"string posix_getcwd()";"Pathname of current directory";"string";
"2600";"POSIX";"posix_getegid";"int posix_getegid()";"Return the effective group ID of the current process";"int";
"2601";"POSIX";"posix_geteuid";"int posix_geteuid()";"Return the effective user ID of the current process";"int";
"2602";"POSIX";"posix_getgid";"int posix_getgid()";"Return the real group ID of the current process";"int";
"2603";"POSIX";"posix_getgrgid";"array posix_getgrgid(int gid)";"Return info about a group by group id";"array";
"2604";"POSIX";"posix_getgrnam";"array posix_getgrnam(string name)";"Return info about a group by name";"array";
"2605";"POSIX";"posix_getgroups";"array posix_getgroups()";"Return the group set of the current process";"array";
"2606";"POSIX";"posix_getlogin";"string posix_getlogin()";"Return login name";"string";
"2607";"POSIX";"posix_getpgid";"int posix_getpgid(int pid)";"Get process group id for job control";"int";
"2608";"POSIX";"posix_getpgrp";"int posix_getpgrp()";"Return the current process group identifier";"int";
"2609";"POSIX";"posix_getpid";"int posix_getpid()";"Return the current process identifier";"int";
"2610";"POSIX";"posix_getppid";"int posix_getppid()";"Return the parent process identifier";"int";
"2611";"POSIX";"posix_getpwnam";"array posix_getpwnam(string username)";"Return info about a user by username";"array";
"2612";"POSIX";"posix_getpwuid";"array posix_getpwuid(int uid)";"Return info about a user by user id";"array";
"2613";"POSIX";"posix_getrlimit";"array posix_getrlimit()";"Return info about system resource limits";"array";
"2614";"POSIX";"posix_getsid";"int posix_getsid(int pid)";"Get the current sid of the process";"int";
"2615";"POSIX";"posix_getuid";"int posix_getuid()";"Return the real user ID of the current process";"int";
"2616";"POSIX";"posix_isatty";"bool posix_isatty(int fd)";"Determine if a file descriptor is an interactive terminal";"bool";
"2617";"POSIX";"posix_kill";"bool posix_kill(int pid, int sig)";"Send a signal to a process";"bool";
"2618";"POSIX";"posix_mkfifo";"bool posix_mkfifo(string pathname, int mode)";"Create a fifo special file (a named pipe)";"bool";
"2619";"POSIX";"posix_setegid";"bool posix_setegid(int gid)";"Set the effective GID of the current process";"bool";
"2620";"POSIX";"posix_seteuid";"bool posix_seteuid(int uid)";"Set the effective UID of the current process";"bool";
"2621";"POSIX";"posix_setgid";"bool posix_setgid(int gid)";"Set the GID of the current process";"bool";
"2622";"POSIX";"posix_setpgid";"int posix_setpgid(int pid, int pgid)";"set process group id for job control";"int";
"2623";"POSIX";"posix_setsid";"int posix_setsid()";"Make the current process a session leader";"int";
"2624";"POSIX";"posix_setuid";"bool posix_setuid(int uid)";"Set the UID of the current process";"bool";
"2625";"POSIX";"posix_strerror";"string posix_strerror(int errno)";"Retrieve the system error message associated with the given errno.";"string";
"2626";"POSIX";"posix_times";"array posix_times()";"Get process times";"array";
"2627";"POSIX";"posix_ttyname";"string posix_ttyname(int fd)";"Determine terminal device name";"string";
"2628";"POSIX";"posix_uname";"array posix_uname()";"Get system name";"array";
"2629";"PostgreSQL";"pg_affected_rows";"int pg_affected_rows(resource result)";"Returns number of affected records (tuples)";"int";
"2630";"PostgreSQL";"pg_cancel_query";"bool pg_cancel_query(resource connection)";"Cancel asynchronous query";"bool";
"2631";"PostgreSQL";"pg_client_encoding";"string pg_client_encoding([resource connection])";"Gets the client encoding";"string";
"2632";"PostgreSQL";"pg_close";"bool pg_close(resource connection)";"Closes a PostgreSQL connection";"bool";
"2633";"PostgreSQL";"pg_connect";"resource pg_connect(string connection_string)";"Open a PostgreSQL connection";"resource";
"2634";"PostgreSQL";"pg_connection_busy";"bool pg_connection_busy(resource connection)";"Get connection is busy or not";"bool";
"2635";"PostgreSQL";"pg_connection_reset";"bool pg_connection_reset(resource connection)";"Reset connection (reconnect)";"bool";
"2636";"PostgreSQL";"pg_connection_status";"int pg_connection_status(resource connection)";"Get connection status";"int";
"2637";"PostgreSQL";"pg_convert";"array pg_convert(resource connection, string table_name, array assoc_array[, int options])";"Convert associative array value into suitable for SQL statement.";"array";
"2638";"PostgreSQL";"pg_copy_from";"bool pg_copy_from(resource connection, string table_name, array rows[, string delimiter[, string null_as]])";"Insert records into a table from an array";"bool";
"2639";"PostgreSQL";"pg_copy_to";"array pg_copy_to(resource connection, string table_name[, string delimiter[, string null_as]])";"Copy a table to an array";"array";
"2640";"PostgreSQL";"pg_dbname";"string pg_dbname(resource connection)";"Get the database name";"string";
"2641";"PostgreSQL";"pg_delete";"mixed pg_delete(resource connection, string table_name, array assoc_array[, int options])";"Deletes records.";"mixed";
"2642";"PostgreSQL";"pg_end_copy";"bool pg_end_copy([resource connection])";"Sync with PostgreSQL backend";"bool";
"2643";"PostgreSQL";"pg_escape_bytea";"string pg_escape_bytea(string data)";"Escape binary for bytea type";"string";
"2644";"PostgreSQL";"pg_escape_string";"string pg_escape_string(string data)";"Escape string for text/char type";"string";
"2645";"PostgreSQL";"pg_fetch_all";"array pg_fetch_all(resource result)";"Fetches all rows from a result as an array";"array";
"2646";"PostgreSQL";"pg_fetch_array";"array pg_fetch_array(resource result[, int row[, int result_type]])";"Fetch a row as an array";"array";
"2647";"PostgreSQL";"pg_fetch_assoc";"array pg_fetch_assoc(resource result[, int row])";"Fetch a row as an associative array";"array";
"2648";"PostgreSQL";"pg_fetch_object";"object pg_fetch_object(resource result[, int row[, int result_type]])";"Fetch a row as an object";"object";
"2649";"PostgreSQL";"pg_fetch_result";"mixed pg_fetch_result(resource result, int row, mixed field)";"Returns values from a result resource";"mixed";
"2650";"PostgreSQL";"pg_fetch_row";"array pg_fetch_row(resource result, int row)";"Get a row as an enumerated array";"array";
"2651";"PostgreSQL";"pg_field_is_null";"int pg_field_is_null(resource result, int row, mixed field)";"Test if a field is NULL";"int";
"2652";"PostgreSQL";"pg_field_name";"string pg_field_name(resource result, int field_number)";"Returns the name of a field";"string";
"2653";"PostgreSQL";"pg_field_num";"int pg_field_num(resource result, string field_name)";"Returns the field number of the named field";"int";
"2654";"PostgreSQL";"pg_field_prtlen";"int pg_field_prtlen(resource result, int row_number, string field_name)";"Returns the printed length";"int";
"2655";"PostgreSQL";"pg_field_size";"int pg_field_size(resource result, int field_number)";"Returns the internal storage size of the named field";"int";
"2656";"PostgreSQL";"pg_field_type";"string pg_field_type(resource result, int field_number)";"Returns the type name for the corresponding field number";"string";
"2657";"PostgreSQL";"pg_free_result";"bool pg_free_result(resource result)";"Free result memory";"bool";
"2658";"PostgreSQL";"pg_get_notify";"array pg_get_notify(resource connection[, int result_type])";"Ping database connection";"array";
"2659";"PostgreSQL";"pg_get_pid";"int pg_get_pid(resource connection)";"Ping database connection";"int";
"2660";"PostgreSQL";"pg_get_result";"resource pg_get_result([resource connection])";"Get asynchronous query result";"resource";
"2661";"PostgreSQL";"pg_host";"string pg_host(resource connection)";"Returns the host name associated with the connection";"string";
"2662";"PostgreSQL";"pg_insert";"bool pg_insert(resource connection, string table_name, array assoc_array[, int options])";"Insert array into table.";"bool";
"2663";"PostgreSQL";"pg_last_error";"string pg_last_error([resource connection])";"Get the last error message string of a connection";"string";
"2664";"PostgreSQL";"pg_last_notice";"string pg_last_notice(resource connection)";"Returns the last notice message from PostgreSQL server";"string";
"2665";"PostgreSQL";"pg_lo_close";"bool pg_lo_close(resource large_object)";"Close a large object";"bool";
"2666";"PostgreSQL";"pg_lo_create";"int pg_lo_create(resource connection)";"Create a large object";"int";
"2667";"PostgreSQL";"pg_lo_export";"bool pg_lo_export([resource connection, int oid, string pathname])";"Export a large object to file";"bool";
"2668";"PostgreSQL";"pg_lo_import";"int pg_lo_import([resource connection, string pathname])int pg_lo_import(string pathname[, resource connection])";"Import a large object from file";"int";
"2669";"PostgreSQL";"pg_lo_open";"resource pg_lo_open(resource connection, int oid, string mode)";"Open a large object";"resource";
"2670";"PostgreSQL";"pg_lo_read_all";"int pg_lo_read_all(resource large_object)";"Reads an entire large object and send straight to browser";"int";
"2671";"PostgreSQL";"pg_lo_read";"string pg_lo_read(resource large_object, int len)";"Read a large object";"string";
"2672";"PostgreSQL";"pg_lo_seek";"bool pg_lo_seek(resource large_object, int offset[, int whence])";"Seeks position of large object";"bool";
"2673";"PostgreSQL";"pg_lo_tell";"int pg_lo_tell(resource large_object)";"Returns current position of large object";"int";
"2674";"PostgreSQL";"pg_lo_unlink";"bool pg_lo_unlink(resource connection, int oid)";"Delete a large object";"bool";
"2675";"PostgreSQL";"pg_lo_write";"int pg_lo_write(resource large_object, string data)";"Write a large object";"int";
"2676";"PostgreSQL";"pg_meta_data";"array pg_meta_data(resource connection, string table_name)";"Get meta data for table.";"array";
"2677";"PostgreSQL";"pg_num_fields";"int pg_num_fields(resource result)";"Returns the number of fields";"int";
"2678";"PostgreSQL";"pg_num_rows";"int pg_num_rows(resource result)";"Returns the number of rows";"int";
"2679";"PostgreSQL";"pg_options";"string pg_options(resource connection)";"Get the options associated with the connection";"string";
"2680";"PostgreSQL";"pg_parameter_status";"string|false pg_parameter_status([resource connection[, string param_name]])";"Returns the value of a server parameter";"string|false";
"2681";"PostgreSQL";"pg_pconnect";"resource pg_pconnect(string connection_string)";"Open a persistent PostgreSQL connection";"resource";
"2682";"PostgreSQL";"pg_ping";"bool pg_ping(resource connection)";"Ping database connection";"bool";
"2683";"PostgreSQL";"pg_port";"int pg_port(resource connection)";"Return the port number associated with the connection";"int";
"2684";"PostgreSQL";"pg_put_line";"bool pg_put_line([resource connection, string data])";"Send a NULL-terminated string to PostgreSQL backend";"bool";
"2685";"PostgreSQL";"pg_query";"resource pg_query(resource connection, string query)";"Execute a query";"resource";
"2686";"PostgreSQL";"pg_result_error";"string pg_result_error(resource result)";"Get error message associated with result";"string";
"2687";"PostgreSQL";"pg_result_seek";"array pg_result_seek(resource result, int offset)";"Set internal row offset in result resource";"array";
"2688";"PostgreSQL";"pg_result_status";"int pg_result_status(resource result)";"Get status of query result";"int";
"2689";"PostgreSQL";"pg_select";"array pg_select(resource connection, string table_name, array assoc_array[, int options])";"Select records.";"array";
"2690";"PostgreSQL";"pg_send_query";"bool pg_send_query(resource connection, string query)bool pg_send_query(string query)";"Sends asynchronous query";"bool";
"2691";"PostgreSQL";"pg_set_client_encoding";"int pg_set_client_encoding([resource connection, string encoding])";"Set the client encoding";"int";
"2692";"PostgreSQL";"pg_trace";"bool pg_trace(string pathname[, string mode[, resource connection]])";"Enable tracing a PostgreSQL connection";"bool";
"2693";"PostgreSQL";"pg_tty";"string pg_tty(resource connection)";"Return the tty name associated with the connection";"string";
"2694";"PostgreSQL";"pg_unescape_bytea";"string pg_unescape_bytea(string data)";"Unescape binary for bytea type";"string";
"2695";"PostgreSQL";"pg_untrace";"bool pg_untrace([resource connection])";"Disable tracing of a PostgreSQL connection";"bool";
"2696";"PostgreSQL";"pg_update";"mixed pg_update(resource connection, string table_name, array data, array condition[, int options])";"Update table.";"mixed";
"2697";"PostgreSQL";"pg_version";"array pg_version([resource connection])";"Returns an array with client, protocol and server version (when available)";"array";
"2698";"PCNTL";"pcntl_alarm";"int pcntl_alarm(int seconds)";"Set an alarm clock for delivery of a signal";"int";
"2699";"PCNTL";"pcntl_exec";"bool pcntl_exec(string path[, array args[, array envs]])";"Executes specified program in current process space";"bool";
"2700";"PCNTL";"pcntl_fork";"int pcntl_fork()";"Forks the currently running process";"int";
"2701";"PCNTL";"pcntl_getpriority";"int pcntl_getpriority([int pid])";"Get the priority of any process";"int";
"2702";"PCNTL";"pcntl_setpriority";"bool pcntl_setpriority(int priority[, int pid])";"Change the priority of any process";"bool";
"2703";"PCNTL";"pcntl_signal";"bool pcntl_signal(int signo, callback handle[, bool restart_syscalls])";"Installs a signal handler";"bool";
"2704";"PCNTL";"pcntl_wait";"int pcntl_wait(int &status[, int options])";"Waits on or returns the status of a forked child";"int";
"2705";"PCNTL";"pcntl_waitpid";"int pcntl_waitpid(int pid, int &status, int options)";"Waits on or returns the status of a forked child";"int";
"2706";"PCNTL";"pcntl_wexitstatus";"int pcntl_wexitstatus(int status)";"Returns the return code of a terminated child";"int";
"2707";"PCNTL";"pcntl_wifexited";"int pcntl_wifexited(int status)";"Returns TRUE if status code represents a successful exit";"int";
"2708";"PCNTL";"pcntl_wifsignaled";"int pcntl_wifsignaled(int status)";"Returns TRUE if status code represents a termination due to a signal";"int";
"2709";"PCNTL";"pcntl_wifstopped";"int pcntl_wifstopped(int status)";"Returns TRUE if child process is currently stopped";"int";
"2710";"PCNTL";"pcntl_wstopsig";"int pcntl_wstopsig(int status)";"Returns the signal which caused the child to stop";"int";
"2711";"PCNTL";"pcntl_wtermsig";"int pcntl_wtermsig(int status)";"Returns the signal which caused the child to terminate";"int";
"2712";"Program Execution";"escapeshellarg";"string escapeshellarg(string arg)";"escape a string to be used as a shell argument";"string";
"2713";"Program Execution";"escapeshellcmd";"string escapeshellcmd(string command)";"escape shell metacharacters";"string";
"2714";"Program Execution";"exec";"string exec(string command[, array output[, int return_var]])";"Execute an external program";"string";
"2715";"Program Execution";"passthru";"void passthru(string command[, int return_var])";"Execute an external program and display raw output";"void";
"2716";"Program Execution";"proc_close";"int proc_close(resource process)";"Close a process opened by proc_open and return the exit code of that process";"int";
"2717";"Program Execution";"proc_get_status";"array proc_get_status(resource process)";"Get information about a process opened by proc_open";"array";
"2718";"Program Execution";"proc_nice";"bool proc_nice(int priority)";"Change the priority of the current process";"bool";
"2719";"Program Execution";"proc_open";"resource proc_open(string cmd, array descriptorspec, array pipes)";"Execute a command and open file pointers for input/output";"resource";
"2720";"Program Execution";"proc_terminate";"int proc_terminate(resource process[, int signal])";"kills a process opened by proc_open";"int";
"2721";"Program Execution";"shell_exec";"string shell_exec(string cmd)";"Execute command via shell and return the complete output as a string";"string";
"2722";"Program Execution";"system";"string system(string command[, int return_var])";"Execute an external program and display the output";"string";
"2723";"Printer";"printer_close";"void printer_close(resource handle)";"Close an open printer connection";"void";
"2724";"Printer";"printer_create_brush";"mixed printer_create_brush(int style, string color)";"Create a new brush";"mixed";
"2725";"Printer";"printer_create_dc";"void printer_create_dc(resource handle)";"Create a new device context";"void";
"2726";"Printer";"printer_create_font";"mixed printer_create_font(string face, int height, int width, int font_weight, bool italic, bool underline, bool strikeout, int orientaton)";"Create a new font";"mixed";
"2727";"Printer";"printer_create_pen";"mixed printer_create_pen(int style, int width, string color)";"Create a new pen";"mixed";
"2728";"Printer";"printer_delete_brush";"bool printer_delete_brush(resource handle)";"Delete a brush";"bool";
"2729";"Printer";"printer_delete_dc";"bool printer_delete_dc(resource handle)";"Delete a device context";"bool";
"2730";"Printer";"printer_delete_font";"bool printer_delete_font(resource handle)";"Delete a font";"bool";
"2731";"Printer";"printer_delete_pen";"bool printer_delete_pen(resource handle)";"Delete a pen";"bool";
"2732";"Printer";"printer_draw_bmp";"void printer_draw_bmp(resource handle, string filename, int x, int y)";"Draw a bmp";"void";
"2733";"Printer";"printer_draw_chord";"void printer_draw_chord(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad_x, int rad_y, int rad_x1, int rad_y1)";"Draw a chord";"void";
"2734";"Printer";"printer_draw_elipse";"void printer_draw_elipse(resource handle, int ul_x, int ul_y, int lr_x, int lr_y)";"Draw an ellipse";"void";
"2735";"Printer";"printer_draw_line";"void printer_draw_line(resource printer_handle, int from_x, int from_y, int to_x, int to_y)";"Draw a line";"void";
"2736";"Printer";"printer_draw_pie";"void printer_draw_pie(resource handle, int rec_x, int rec_y, int rec_x1, int rec_y1, int rad1_x, int rad1_y, int rad2_x, int rad2_y)";"Draw a pie";"void";
"2737";"Printer";"printer_draw_rectangle";"void printer_draw_rectangle(resource handle, int ul_x, int ul_y, int lr_x, int lr_y)";"Draw a rectangle";"void";
"2738";"Printer";"printer_draw_roundrect";"void printer_draw_roundrect(resource handle, int ul_x, int ul_y, int lr_x, int lr_y, int width, int height)";"Draw a rectangle with rounded corners";"void";
"2739";"Printer";"printer_draw_text";"void printer_draw_text(resource printer_handle, string text, int x, int y)";"Draw text";"void";
"2740";"Printer";"printer_end_doc";"bool printer_end_doc(resource handle)";"Close document";"bool";
"2741";"Printer";"printer_end_page";"bool printer_end_page(resource handle)";"Close active page";"bool";
"2742";"Printer";"printer_get_option";"mixed printer_get_option(resource handle, string option)";"Retrieve printer configuration data";"mixed";
"2743";"Printer";"printer_list";"array printer_list(int enumtype[, string name[, int level]])";"Return an array of printers attached to the server";"array";
"2744";"Printer";"printer_logical_fontheight";"int printer_logical_fontheight(resource handle, int height)";"Get logical font height";"int";
"2745";"Printer";"printer_open";"mixed printer_open([string devicename])";"Open connection to a printer";"mixed";
"2746";"Printer";"printer_select_brush";"void printer_select_brush(resource printer_handle, resource brush_handle)";"Select a brush";"void";
"2747";"Printer";"printer_select_font";"void printer_select_font(resource printer_handle, resource font_handle)";"Select a font";"void";
"2748";"Printer";"printer_select_pen";"void printer_select_pen(resource printer_handle, resource pen_handle)";"Select a pen";"void";
"2749";"Printer";"printer_set_option";"bool printer_set_option(resource handle, int option, mixed value)";"Configure the printer connection";"bool";
"2750";"Printer";"printer_start_doc";"bool printer_start_doc(resource handle[, string document])";"Start a new document";"bool";
"2751";"Printer";"printer_start_page";"bool printer_start_page(resource handle)";"Start a new page";"bool";
"2752";"Printer";"printer_write";"bool printer_write(resource handle, string content)";"Write data to the printer";"bool";
"2753";"Pspell";"pspell_add_to_personal";"int pspell_add_to_personal(int dictionary_link, string word)";"Add the word to a personal wordlist";"int";
"2754";"Pspell";"pspell_add_to_session";"int pspell_add_to_session(int dictionary_link, string word)";"Add the word to the wordlist in the current session";"int";
"2755";"Pspell";"pspell_check";"bool pspell_check(int dictionary_link, string word)";"Check a word";"bool";
"2756";"Pspell";"pspell_clear_session";"int pspell_clear_session(int dictionary_link)";"Clear the current session";"int";
"2757";"Pspell";"pspell_config_create";"int pspell_config_create(string language[, string spelling[, string jargon[, string encoding]]])";"Create a config used to open a dictionary";"int";
"2758";"Pspell";"pspell_config_data_dir";"bool pspell_config_data_dir(int conf, string directory)";"location of language data files";"bool";
"2759";"Pspell";"pspell_config_dict_dir";"bool pspell_config_dict_dir(int conf, string directory)";"Location of the main word list";"bool";
"2760";"Pspell";"pspell_config_ignore";"int pspell_config_ignore(int dictionary_link, int n)";"Ignore words less than N characters long";"int";
"2761";"Pspell";"pspell_config_mode";"int pspell_config_mode(int dictionary_link, int mode)";"Change the mode number of suggestions returned";"int";
"2762";"Pspell";"pspell_config_personal";"int pspell_config_personal(int dictionary_link, string file)";"Set a file that contains personal wordlist";"int";
"2763";"Pspell";"pspell_config_repl";"int pspell_config_repl(int dictionary_link, string file)";"Set a file that contains replacement pairs";"int";
"2764";"Pspell";"pspell_config_runtogether";"int pspell_config_runtogether(int dictionary_link, bool flag)";"Consider run-together words as valid compounds";"int";
"2765";"Pspell";"pspell_config_save_repl";"int pspell_config_save_repl(int dictionary_link, bool flag)";"Determine whether to save a replacement pairs list along with the wordlist";"int";
"2766";"Pspell";"pspell_new_config";"int pspell_new_config(int config)";"Load a new dictionary with settings based on a given config";"int";
"2767";"Pspell";"pspell_new_personal";"int pspell_new_personal(string personal, string language[, string spelling[, string jargon[, string encoding[, int mode]]]])";"Load a new dictionary with personal wordlist";"int";
"2768";"Pspell";"pspell_new";"int pspell_new(string language[, string spelling[, string jargon[, string encoding[, int mode]]]])";"Load a new dictionary";"int";
"2769";"Pspell";"pspell_save_wordlist";"int pspell_save_wordlist(int dictionary_link)";"Save the personal wordlist to a file";"int";
"2770";"Pspell";"pspell_store_replacement";"int pspell_store_replacement(int dictionary_link, string misspelled, string correct)";"Store a replacement pair for a word";"int";
"2771";"Pspell";"pspell_suggest";"array pspell_suggest(int dictionary_link, string word)";"Suggest spellings of a word";"array";
"2772";"Readline";"readline_add_history";"void readline_add_history(string line)";"Adds a line to the history";"void";
"2773";"Readline";"readline_clear_history";"bool readline_clear_history()";"Clears the history";"bool";
"2774";"Readline";"readline_completion_function";"bool readline_completion_function(string line)";"Registers a completion function";"bool";
"2775";"Readline";"readline_info";"mixed readline_info([string varname[, string newvalue]])";"Gets/sets various internal readline variables";"mixed";
"2776";"Readline";"readline_list_history";"array readline_list_history()";"Lists the history";"array";
"2777";"Readline";"readline_read_history";"bool readline_read_history(string filename)";"Reads the history";"bool";
"2778";"Readline";"readline_write_history";"bool readline_write_history(string filename)";"Writes the history";"bool";
"2779";"Readline";"readline";"string readline([string prompt])";"Reads a line";"string";
"2780";"Recode";"recode_file";"bool recode_file(string request, resource input, resource output)";"Recode from file to file according to recode request";"bool";
"2781";"Recode";"recode_string";"string recode_string(string request, string string)";"Recode a string according to a recode request";"string";
"2782";"Recode";"recode";;"Alias of recode_string";;
"2783";"PCRE";"Pattern Modifiers";;"Describes possible modifiers in regex patterns";;
"2784";"PCRE";"Pattern Syntax";;"Describes PCRE regex syntax";;
"2785";"PCRE";"preg_grep";"array preg_grep(string pattern, array input[, int flags])";"Return array entries that match the pattern";"array";
"2786";"PCRE";"preg_match_all";"int preg_match_all(string pattern, string subject, array matches[, int flags[, int offset]])";"Perform a global regular expression match";"int";
"2787";"PCRE";"preg_match";"mixed preg_match(string pattern, string subject[, array matches[, int flags[, int offset]]])";"Perform a regular expression match";"mixed";
"2788";"PCRE";"preg_quote";"string preg_quote(string str[, string delimiter])";"Quote regular expression characters";"string";
"2789";"PCRE";"preg_replace_callback";"mixed preg_replace_callback(mixed pattern, callback callback, mixed subject[, int limit])";"Perform a regular expression search and replace using a callback";"mixed";
"2790";"PCRE";"preg_replace";"mixed preg_replace(mixed pattern, mixed replacement, mixed subject[, int limit])";"Perform a regular expression search and replace";"mixed";
"2791";"PCRE";"preg_split";"array preg_split(string pattern, string subject[, int limit[, int flags]])";"Split string by a regular expression";"array";
"2792";"qtdom";"qdom_error";"string qdom_error()";"Returns the error string from the last QDOM operation or FALSE if no errors occurred";"string";
"2793";"qtdom";"qdom_tree";"object qdom_tree(string )";"Creates a tree of an XML string";"object";
"2794";"Regexps";"ereg_replace";"string ereg_replace(string pattern, string replacement, string string)";"Replace regular expression";"string";
"2795";"Regexps";"ereg";"bool ereg(string pattern, string string[, array regs])";"Regular expression match";"bool";
"2796";"Regexps";"eregi_replace";"string eregi_replace(string pattern, string replacement, string string)";"replace regular expression case insensitive";"string";
"2797";"Regexps";"eregi";"bool eregi(string pattern, string string[, array regs])";"case insensitive regular expression match";"bool";
"2798";"Regexps";"split";"array split(string pattern, string string[, int limit])";"split string into array by regular expression";"array";
"2799";"Regexps";"spliti";"array spliti(string pattern, string string[, int limit])";"Split string into array by regular expression case insensitive";"array";
"2800";"Regexps";"sql_regcase";"string sql_regcase(string string)";"Make regular expression for case insensitive match";"string";
"2801";"Semaphore";"ftok";"int ftok(string pathname, string proj)";"Convert a pathname and a project identifier to a System V IPC key";"int";
"2802";"Semaphore";"msg_get_queue";"resource msg_get_queue(int key[, int perms])";"Create or attach to a message queue";"resource";
"2803";"Semaphore";"msg_receive";"bool msg_receive(resource queue, int desiredmsgtype, int msgtype, int maxsize, mixed message[, bool unserialize[, int flags[, int errorcode]]])";"Receive a message from a message queue";"bool";
"2804";"Semaphore";"msg_remove_queue";"bool msg_remove_queue(resource queue)";"Destroy a message queue";"bool";
"2805";"Semaphore";"msg_send";"bool msg_send(resource queue, int msgtype, mixed message[, bool serialize[, bool blocking[, int errorcode]]])";"Send a message to a message queue";"bool";
"2806";"Semaphore";"msg_set_queue";"bool msg_set_queue(resource queue, array data)";"Set information in the message queue data structure";"bool";
"2807";"Semaphore";"msg_stat_queue";"array msg_stat_queue(resource queue)";"Returns information from the message queue data structure";"array";
"2808";"Semaphore";"sem_acquire";"bool sem_acquire(resource sem_identifier)";"Acquire a semaphore";"bool";
"2809";"Semaphore";"sem_get";"resource sem_get(int key[, int max_acquire[, int perm]])";"Get a semaphore id";"resource";
"2810";"Semaphore";"sem_release";"bool sem_release(resource sem_identifier)";"Release a semaphore";"bool";
"2811";"Semaphore";"sem_remove";"bool sem_remove(resource sem_identifier)";"Remove a semaphore";"bool";
"2812";"Semaphore";"shm_attach";"int shm_attach(int key[, int memsize[, int perm]])";"Creates or open a shared memory segment";"int";
"2813";"Semaphore";"shm_detach";"bool shm_detach(int shm_identifier)";"Disconnects from shared memory segment";"bool";
"2814";"Semaphore";"shm_get_var";"mixed shm_get_var(int shm_identifier, int variable_key)";"Returns a variable from shared memory";"mixed";
"2815";"Semaphore";"shm_put_var";"bool shm_put_var(int shm_identifier, int variable_key, mixed variable)";"Inserts or updates a variable in shared memory";"bool";
"2816";"Semaphore";"shm_remove_var";"int shm_remove_var(int shm_identifier, int variable_key)";"Removes a variable from shared memory";"int";
"2817";"Semaphore";"shm_remove";"int shm_remove(int shm_identifier)";"Removes shared memory from Unix systems";"int";
"2818";"SESAM";"sesam_affected_rows";"int sesam_affected_rows(string result_id)";"Get number of rows affected by an immediate query";"int";
"2819";"SESAM";"sesam_commit";"bool sesam_commit()";"Commit pending updates to the SESAM database";"bool";
"2820";"SESAM";"sesam_connect";"bool sesam_connect(string catalog, string schema, string user)";"Open SESAM database connection";"bool";
"2821";"SESAM";"sesam_diagnostic";"array sesam_diagnostic()";"Return status information for last SESAM call";"array";
"2822";"SESAM";"sesam_disconnect";"bool sesam_disconnect()";"Detach from SESAM connection";"bool";
"2823";"SESAM";"sesam_errormsg";"string sesam_errormsg()";"Returns error message of last SESAM call";"string";
"2824";"SESAM";"sesam_execimm";"string sesam_execimm(string query)";"Execute an immediate SQL-statement";"string";
"2825";"SESAM";"sesam_fetch_array";"array sesam_fetch_array(string result_id[, int whence[, int offset]])";"Fetch one row as an associative array";"array";
"2826";"SESAM";"sesam_fetch_result";"mixed sesam_fetch_result(string result_id[, int max_rows])";"Return all or part of a query result";"mixed";
"2827";"SESAM";"sesam_fetch_row";"array sesam_fetch_row(string result_id[, int whence[, int offset]])";"Fetch one row as an array";"array";
"2828";"SESAM";"sesam_field_array";"array sesam_field_array(string result_id)";"Return meta information about individual columns in a result";"array";
"2829";"SESAM";"sesam_field_name";"int sesam_field_name(string result_id, int index)";"Return one column name of the result set";"int";
"2830";"SESAM";"sesam_free_result";"int sesam_free_result(string result_id)";"Releases resources for the query";"int";
"2831";"SESAM";"sesam_num_fields";"int sesam_num_fields(string result_id)";"Return the number of fields/columns in a result set";"int";
"2832";"SESAM";"sesam_query";"string sesam_query(string query[, bool scrollable])";"Perform a SESAM SQL query and prepare the result";"string";
"2833";"SESAM";"sesam_rollback";"bool sesam_rollback()";"Discard any pending updates to the SESAM database";"bool";
"2834";"SESAM";"sesam_seek_row";"bool sesam_seek_row(string result_id, int whence[, int offset])";"Set scrollable cursor mode for subsequent fetches";"bool";
"2835";"SESAM";"sesam_settransaction";"bool sesam_settransaction(int isolation_level, int read_only)";"Set SESAM transaction parameters";"bool";
"2836";"Sessions";"session_cache_expire";"int session_cache_expire([int new_cache_expire])";"Return current cache expire";"int";
"2837";"Sessions";"session_cache_limiter";"string session_cache_limiter([string cache_limiter])";"Get and/or set the current cache limiter";"string";
"2838";"Sessions";"session_commit";;"Alias of session_write_close";;
"2839";"Sessions";"session_decode";"bool session_decode(string data)";"Decodes session data from a string";"bool";
"2840";"Sessions";"session_destroy";"bool session_destroy()";"Destroys all data registered to a session";"bool";
"2841";"Sessions";"session_encode";"string session_encode()";"Encodes the current session data as a string";"string";
"2842";"Sessions";"session_get_cookie_params";"array session_get_cookie_params()";"Get the session cookie parameters";"array";
"2843";"Sessions";"session_id";"string session_id([string id])";"Get and/or set the current session id";"string";
"2844";"Sessions";"session_is_registered";"bool session_is_registered(string name)";"Find out whether a global variable is registered in a session";"bool";
"2845";"Sessions";"session_module_name";"string session_module_name([string module])";"Get and/or set the current session module";"string";
"2846";"Sessions";"session_name";"string session_name([string name])";"Get and/or set the current session name";"string";
"2847";"Sessions";"session_regenerate_id";"bool session_regenerate_id()";"Update the current session id with a newly generated one";"bool";
"2848";"Sessions";"session_register";"bool session_register(mixed name[, mixed ...])";"Register one or more global variables with the current session";"bool";
"2849";"Sessions";"session_save_path";"string session_save_path([string path])";"Get and/or set the current session save path";"string";
"2850";"Sessions";"session_set_cookie_params";"void session_set_cookie_params(int lifetime[, string path[, string domain[, bool secure]]])";"Set the session cookie parameters";"void";
"2851";"Sessions";"session_set_save_handler";"bool session_set_save_handler(string open, string close, string read, string write, string destroy, string gc)";"Sets user-level session storage functions";"bool";
"2852";"Sessions";"session_start";"bool session_start()";"Initialize session data";"bool";
"2853";"Sessions";"session_unregister";"bool session_unregister(string name)";"Unregister a global variable from the current session";"bool";
"2854";"Sessions";"session_unset";"void session_unset()";"Free all session variables";"void";
"2855";"Sessions";"session_write_close";"void session_write_close()";"Write session data and end session";"void";
"2856";"shmop";"shmop_close";"int shmop_close(int shmid)";"Close shared memory block";"int";
"2857";"shmop";"shmop_delete";"int shmop_delete(int shmid)";"Delete shared memory block";"int";
"2858";"shmop";"shmop_open";"int shmop_open(int key, string flags, int mode, int size)";"Create or open shared memory block";"int";
"2859";"shmop";"shmop_read";"string shmop_read(int shmid, int start, int count)";"Read data from shared memory block";"string";
"2860";"shmop";"shmop_size";"int shmop_size(int shmid)";"Get size of shared memory block";"int";
"2861";"shmop";"shmop_write";"int shmop_write(int shmid, string data, int offset)";"Write data into shared memory block";"int";
"2862";"SimpleXML";"simplexml_element->asXML";"string simplexml_element->asXML()";"Return a well-formed XML string based on SimpleXML element.";"string";
"2863";"SimpleXML";"simplexml_element->children";"object simplexml_element simplexml_element->children()";"Finds children of given node.";"object simplexml_element";
"2864";"SimpleXML";"simplexml_element->xpath";"array simplexml_element->xpath(string path)";"Runs Xpath query on XML data.";"array";
"2865";"SimpleXML";"simplexml_import_dom";"object simplexml_element simplexml_import_dom(domNode node)";"Get a simplexml_element object from a DOM node.";"object simplexml_element";
"2866";"SimpleXML";"simplexml_load_file";"object simplexml_element simplexml_load_file(string filename)";"Interprets an XML file into an object.";"object simplexml_element";
"2867";"SimpleXML";"simplexml_load_string";"object simplexml_element simplexml_load_string(string data)";"Interprets a string of XML into an object.";"object simplexml_element";
"2868";"SOAP";"SoapClient::SoapClient";"object SoapClient::SoapClient(mixed wsdl[, array options])";"SoapClient constructor";"object";
"2869";"SOAP";"SoapClient::__call";"mixed SoapClient::__call(string function_name[, array arguments[, array options[, array input_headers[, array output_headers]]]])";"Calls a SOAP function";"mixed";
"2870";"SOAP";"SoapClient::__getFunctions";"array SoapClient::__getFunctions()";"Returns list of SOAP functions";"array";
"2871";"SOAP";"SoapClient::__getLastRequest";"string SoapClient::__getLastRequest()";"Returns last SOAP request";"string";
"2872";"SOAP";"SoapClient::__getLastResponse";"object SoapClient::__getLastResponse()";"Returns last SOAP response";"object";
"2873";"SOAP";"SoapClient::__getTypes";"array SoapClient::__getTypes()";"Returns list of SOAP types";"array";
"2874";"SOAP";"SoapFault::SoapFault";"object SoapFault::SoapFault(string faultcode, string faultstring[, string faultactor[, mixed detail[, string faultname[, mixed headerfault]]]])";"SoapFault constructor";"object";
"2875";"SOAP";"SoapHeader::SoapHeader";"object SoapHeader::SoapHeader(string namespace, string name[, mixed data[, bool mustUnderstand[, mixed actor]]])";"SoapHeader constructor";"object";
"2876";"SOAP";"SoapParam::SoapParam";"object SoapParam::SoapParam(mixed data, string name)";"SoapParam constructor";"object";
"2877";"SOAP";"SoapServer::SoapServer";"object SoapServer::SoapServer(mixed wsdl[, array options])";"SoapServer constructor";"object";
"2878";"SOAP";"SoapServer::addFunction";"void SoapServer::addFunction(mixed functions)";"Adds one or several functions those will handle SOAP requests";"void";
"2879";"SOAP";"SoapServer::getFunctions";"array SoapServer::getFunctions()";"Returns list of defined functions";"array";
"2880";"SOAP";"SoapServer::handle";"void SoapServer::handle([string soap_request])";"Handles a SOAP request";"void";
"2881";"SOAP";"SoapServer::setClass";"void SoapServer::setClass(string class_name[, mixed args])";"Sets class which will handle SOAP requests";"void";
"2882";"SOAP";"SoapServer::setPersistence";"void SoapServer::setPersistence(int mode)";"Sets persistence mode of SoapServer";"void";
"2883";"SOAP";"SoapVar::SoapVar";"object SoapVar::SoapVar(mixed data, int encoding[, string type_name[, string type_namespace[, string node_name[, string node_namespace]]]])";"SoapVar constructor";"object";
"2884";"SOAP";"is_soap_fault";"bool is_soap_fault(mixed obj)";"Checks if SOAP call was failed";"bool";
"2885";"SQLite";"sqlite_array_query";"array sqlite_array_query(resource dbhandle, string query[, int result_type[, bool decode_binary]])array sqlite_array_query(string query, resource dbhandle[, int result_type[, bool decode_binary]])";"Execute a query against a given database and returns an array.";"array";
"2886";"SQLite";"sqlite_busy_timeout";"void sqlite_busy_timeout(resource dbhandle, int milliseconds)";"Set busy timeout duration, or disable busy handlers.";"void";
"2887";"SQLite";"sqlite_changes";"int sqlite_changes(resource dbhandle)";"Returns the number of rows that were changed by the most recent SQL statement.";"int";
"2888";"SQLite";"sqlite_close";"void sqlite_close(resource dbhandle)";"Closes an open SQLite database.";"void";
"2889";"SQLite";"sqlite_column";"mixed sqlite_column(resource result, mixed index_or_name[, bool decode_binary])";"Fetches a column from the current row of a result set.";"mixed";
"2890";"SQLite";"sqlite_create_aggregate";"bool sqlite_create_aggregate(resource dbhandle, string function_name, mixed step_func, mixed finalize_func[, int num_args])";"Register an aggregating UDF for use in SQL statements.";"bool";
"2891";"SQLite";"sqlite_create_function";"bool sqlite_create_function(resource dbhandle, string function_name, mixed callback[, int num_args])";"Registers a regular User Defined Function for use in SQL statements.";"bool";
"2892";"SQLite";"sqlite_current";"array sqlite_current(resource result[, int result_type[, bool decode_binary]])";"Fetches the current row from a result set as an array.";"array";
"2893";"SQLite";"sqlite_error_string";"string sqlite_error_string(int error_code)";"Returns the textual description of an error code.";"string";
"2894";"SQLite";"sqlite_escape_string";"string sqlite_escape_string(string item)";"Escapes a string for use as a query parameter";"string";
"2895";"SQLite";"sqlite_exec";"bool sqlite_exec(resource dbhandle, string query)bool sqlite_exec(string query, resource dbhandle)";"Executes a result-less query against a given database.";"bool";
"2896";"SQLite";"sqlite_factory";"object sqlite_factory(string filename[, int mode[, string &error_message]])";"Opens a SQLite database and creates an object for it";"object";
"2897";"SQLite";"sqlite_fetch_all";"array sqlite_fetch_all(resource result[, int result_type[, bool decode_binary]])";"Fetches all rows from a result set as an array of arrays";"array";
"2898";"SQLite";"sqlite_fetch_array";"array sqlite_fetch_array(resource result[, int result_type[, bool decode_binary]])";"Fetches the next row from a result set as an array.";"array";
"2899";"SQLite";"sqlite_fetch_column_types";"resource sqlite_fetch_column_types(string table_name, resource db)";"Return an array of column types from a particular table.";"resource";
"2900";"SQLite";"sqlite_fetch_object";"object sqlite_fetch_object(resource result[, string class_name[, array ctor_params[, bool decode_binary]]])";"Fetches the next row from a result set as an object";"object";
"2901";"SQLite";"sqlite_fetch_single";"string sqlite_fetch_single(resource result[, int result_type[, bool decode_binary]])";"Fetches the first column of a result set as a string.";"string";
"2902";"SQLite";"sqlite_fetch_string";;"Alias of sqlite_fetch_single";;
"2903";"SQLite";"sqlite_field_name";"string sqlite_field_name(resource result, int field_index)";"Returns the name of a particular field.";"string";
"2904";"SQLite";"sqlite_has_more";"bool sqlite_has_more(resource result)";"Returns whether or not more rows are available.";"bool";
"2905";"SQLite";"sqlite_last_error";"int sqlite_last_error(resource dbhandle)";"Returns the error code of the last error for a database.";"int";
"2906";"SQLite";"sqlite_last_insert_rowid";"int sqlite_last_insert_rowid(resource dbhandle)";"Returns the rowid of the most recently inserted row.";"int";
"2907";"SQLite";"sqlite_libencoding";"string sqlite_libencoding()";"Returns the encoding of the linked SQLite library.";"string";
"2908";"SQLite";"sqlite_libversion";"string sqlite_libversion()";"Returns the version of the linked SQLite library.";"string";
"2909";"SQLite";"sqlite_next";"bool sqlite_next(resource result)";"Seek to the next row number.";"bool";
"2910";"SQLite";"sqlite_num_fields";"int sqlite_num_fields(resource result)";"Returns the number of fields in a result set.";"int";
"2911";"SQLite";"sqlite_num_rows";"int sqlite_num_rows(resource result)";"Returns the number of rows in a buffered result set.";"int";
"2912";"SQLite";"sqlite_open";"resource sqlite_open(string filename[, int mode[, string &error_message]])";"Opens a SQLite database.  Will create the database if it does not exist";"resource";
"2913";"SQLite";"sqlite_popen";"resource sqlite_popen(string filename[, int mode[, string &error_message]])";"Opens a persistent handle to an SQLite database.  Will create the database if it does not exist.";"resource";
"2914";"SQLite";"sqlite_query";"resource sqlite_query(resource dbhandle, string query)resource sqlite_query(string query, resource dbhandle)";"Executes a query against a given database and returns a result handle.";"resource";
"2915";"SQLite";"sqlite_rewind";"bool sqlite_rewind(resource result)";"Seek to the first row number.";"bool";
"2916";"SQLite";"sqlite_seek";"bool sqlite_seek(resource result, int rownum)";"Seek to a particular row number of a buffered result set.";"bool";
"2917";"SQLite";"sqlite_single_query";"mixed sqlite_single_query(resource db, string query[, bool first_row_only[, bool decode_binary]])";"Executes a query and returns either an array for one single column or the value of the first row";"mixed";
"2918";"SQLite";"sqlite_udf_decode_binary";"string sqlite_udf_decode_binary(string data)";"Decode binary data passed as parameters to an UDF.";"string";
"2919";"SQLite";"sqlite_udf_encode_binary";"string sqlite_udf_encode_binary(string data)";"Encode binary data before returning it from an UDF.";"string";
"2920";"SQLite";"sqlite_unbuffered_query";"resource sqlite_unbuffered_query(resource dbhandle, string query)resource sqlite_unbuffered_query(string query, resource dbhandle)";"Execute a query that does not prefetch and buffer all data";"resource";
"2921";"SWF";"swf_actiongeturl";"void swf_actiongeturl(string url, string target)";"Get a URL from a Shockwave Flash movie";"void";
"2922";"SWF";"swf_actiongotoframe";"void swf_actiongotoframe(int framenumber)";"Play a frame and then stop";"void";
"2923";"SWF";"swf_actiongotolabel";"void swf_actiongotolabel(string label)";"Display a frame with the specified label";"void";
"2924";"SWF";"swf_actionnextframe";"void swf_actionnextframe()";"Go forward one frame";"void";
"2925";"SWF";"swf_actionplay";"void swf_actionplay()";"Start playing the flash movie from the current frame";"void";
"2926";"SWF";"swf_actionprevframe";"void swf_actionprevframe()";"Go backwards one frame";"void";
"2927";"SWF";"swf_actionsettarget";"void swf_actionsettarget(string target)";"Set the context for actions";"void";
"2928";"SWF";"swf_actionstop";"void swf_actionstop()";"Stop playing the flash movie at the current frame";"void";
"2929";"SWF";"swf_actiontogglequality";"void swf_actiontogglequality()";"Toggle between low and high quality";"void";
"2930";"SWF";"swf_actionwaitforframe";"void swf_actionwaitforframe(int framenumber, int skipcount)";"Skip actions if a frame has not been loaded";"void";
"2931";"SWF";"swf_addbuttonrecord";"void swf_addbuttonrecord(int states, int shapeid, int depth)";"Controls location, appearance and active area of the current button";"void";
"2932";"SWF";"swf_addcolor";"void swf_addcolor(float r, float g, float b, float a)";"Set the global add color to the rgba value specified";"void";
"2933";"SWF";"swf_closefile";"void swf_closefile([int return_file])";"Close the current Shockwave Flash file";"void";
"2934";"SWF";"swf_definebitmap";"void swf_definebitmap(int objid, string image_name)";"Define a bitmap";"void";
"2935";"SWF";"swf_definefont";"void swf_definefont(int fontid, string fontname)";"Defines a font";"void";
"2936";"SWF";"swf_defineline";"void swf_defineline(int objid, float x1, float y1, float x2, float y2, float width)";"Define a line";"void";
"2937";"SWF";"swf_definepoly";"void swf_definepoly(int objid, array coords, int npoints, float width)";"Define a polygon";"void";
"2938";"SWF";"swf_definerect";"void swf_definerect(int objid, float x1, float y1, float x2, float y2, float width)";"Define a rectangle";"void";
"2939";"SWF";"swf_definetext";"void swf_definetext(int objid, string str, int docenter)";"Define a text string";"void";
"2940";"SWF";"swf_endbutton";"void swf_endbutton()";"End the definition of the current button";"void";
"2941";"SWF";"swf_enddoaction";"void swf_enddoaction()";"End the current action";"void";
"2942";"SWF";"swf_endshape";"void swf_endshape()";"Completes the definition of the current shape";"void";
"2943";"SWF";"swf_endsymbol";"void swf_endsymbol()";"End the definition of a symbol";"void";
"2944";"SWF";"swf_fontsize";"void swf_fontsize(float size)";"Change the font size";"void";
"2945";"SWF";"swf_fontslant";"void swf_fontslant(float slant)";"Set the font slant";"void";
"2946";"SWF";"swf_fonttracking";"void swf_fonttracking(float tracking)";"Set the current font tracking";"void";
"2947";"SWF";"swf_getbitmapinfo";"array swf_getbitmapinfo(int bitmapid)";"Get information about a bitmap";"array";
"2948";"SWF";"swf_getfontinfo";"array swf_getfontinfo()";"The height in pixels of a capital A and a lowercase x";"array";
"2949";"SWF";"swf_getframe";"int swf_getframe()";"Get the frame number of the current frame";"int";
"2950";"SWF";"swf_labelframe";"void swf_labelframe(string name)";"Label the current frame";"void";
"2951";"SWF";"swf_lookat";"void swf_lookat(float view_x, float view_y, float view_z, float reference_x, float reference_y, float reference_z, float twist)";"Define a viewing transformation";"void";
"2952";"SWF";"swf_modifyobject";"void swf_modifyobject(int depth, int how)";"Modify an object";"void";
"2953";"SWF";"swf_mulcolor";"void swf_mulcolor(float r, float g, float b, float a)";"Sets the global multiply color to the rgba value specified";"void";
"2954";"SWF";"swf_nextid";"int swf_nextid()";"Returns the next free object id";"int";
"2955";"SWF";"swf_oncondition";"void swf_oncondition(int transition)";"Describe a transition used to trigger an action list";"void";
"2956";"SWF";"swf_openfile";"void swf_openfile(string filename, float width, float height, float framerate, float r, float g, float b)";"Open a new Shockwave Flash file";"void";
"2957";"SWF";"swf_ortho2";"void swf_ortho2(float xmin, float xmax, float ymin, float ymax)";"Defines 2D orthographic mapping of user coordinates onto the current viewport";"void";
"2958";"SWF";"swf_ortho";"void swf_ortho(float xmin, float xmax, float ymin, float ymax, float zmin, float zmax)";"Defines an orthographic mapping of user coordinates onto the current viewport";"void";
"2959";"SWF";"swf_perspective";"void swf_perspective(float fovy, float aspect, float near, float far)";"Define a perspective projection transformation";"void";
"2960";"SWF";"swf_placeobject";"void swf_placeobject(int objid, int depth)";"Place an object onto the screen";"void";
"2961";"SWF";"swf_popmatrix";"void swf_popmatrix()";"Restore a previous transformation matrix";"void";
"2962";"SWF";"swf_posround";"void swf_posround(int round)";"Enables or Disables the rounding of the translation when objects are placed or moved";"void";
"2963";"SWF";"swf_pushmatrix";"void swf_pushmatrix()";"Push the current transformation matrix back unto the stack";"void";
"2964";"SWF";"swf_removeobject";"void swf_removeobject(int depth)";"Remove an object";"void";
"2965";"SWF";"swf_rotate";"void swf_rotate(float angle, string axis)";"Rotate the current transformation";"void";
"2966";"SWF";"swf_scale";"void swf_scale(float x, float y, float z)";"Scale the current transformation";"void";
"2967";"SWF";"swf_setfont";"void swf_setfont(int fontid)";"Change the current font";"void";
"2968";"SWF";"swf_setframe";"void swf_setframe(int framenumber)";"Switch to a specified frame";"void";
"2969";"SWF";"swf_shapearc";"void swf_shapearc(float x, float y, float r, float ang1, float ang2)";"Draw a circular arc";"void";
"2970";"SWF";"swf_shapecurveto3";"void swf_shapecurveto3(float x1, float y1, float x2, float y2, float x3, float y3)";"Draw a cubic bezier curve";"void";
"2971";"SWF";"swf_shapecurveto";"void swf_shapecurveto(float x1, float y1, float x2, float y2)";"Draw a quadratic bezier curve between two points";"void";
"2972";"SWF";"swf_shapefillbitmapclip";"void swf_shapefillbitmapclip(int bitmapid)";"Set current fill mode to clipped bitmap";"void";
"2973";"SWF";"swf_shapefillbitmaptile";"void swf_shapefillbitmaptile(int bitmapid)";"Set current fill mode to tiled bitmap";"void";
"2974";"SWF";"swf_shapefilloff";"void swf_shapefilloff()";"Turns off filling";"void";
"2975";"SWF";"swf_shapefillsolid";"void swf_shapefillsolid(float r, float g, float b, float a)";"Set the current fill style to the specified color";"void";
"2976";"SWF";"swf_shapelinesolid";"void swf_shapelinesolid(float r, float g, float b, float a, float width)";"Set the current line style";"void";
"2977";"SWF";"swf_shapelineto";"void swf_shapelineto(float x, float y)";"Draw a line";"void";
"2978";"SWF";"swf_shapemoveto";"void swf_shapemoveto(float x, float y)";"Move the current position";"void";
"2979";"SWF";"swf_showframe";"void swf_showframe()";"Display the current frame";"void";
"2980";"SWF";"swf_startbutton";"void swf_startbutton(int objid, int type)";"Start the definition of a button";"void";
"2981";"SWF";"swf_startdoaction";"void swf_startdoaction()";"Start a description of an action list for the current frame";"void";
"2982";"SWF";"swf_startshape";"void swf_startshape(int objid)";"Start a complex shape";"void";
"2983";"SWF";"swf_startsymbol";"void swf_startsymbol(int objid)";"Define a symbol";"void";
"2984";"SWF";"swf_textwidth";"float swf_textwidth(string str)";"Get the width of a string";"float";
"2985";"SWF";"swf_translate";"void swf_translate(float x, float y, float z)";"Translate the current transformations";"void";
"2986";"SWF";"swf_viewport";"void swf_viewport(float xmin, float xmax, float ymin, float ymax)";"Select an area for future drawing";"void";
"2987";"SNMP";"snmp_get_valueretrieval";"int snmp_get_valueretrieval()";"Return the method how the SNMP values will be returned";"int";
"2988";"SNMP";"snmp_read_mib";"int snmp_read_mib(string filename)";"Reads and parses a MIB file into the active MIB tree.";"int";
"2989";"SNMP";"snmp_set_enum_print";"void snmp_set_enum_print(int enum_print)";"Return all values that are enums with their enum value instead of the raw integer";"void";
"2990";"SNMP";"snmp_set_oid_numeric_print";"void snmp_set_oid_numeric_print(int oid_numeric_print)";"Return all objects including their respective object id within the specified one";"void";
"2991";"SNMP";"snmp_set_quick_print";"void snmp_set_quick_print(bool quick_print)";"Set the value of quick_print within the UCD SNMP library";"void";
"2992";"SNMP";"snmp_set_valueretrieval";"int snmp_set_valueretrieval(int method)";"Specify the method how the SNMP values will be returned";"int";
"2993";"SNMP";"snmpget";"string snmpget(string hostname, string community, string object_id[, int timeout[, int retries]])";"Fetch an SNMP object";"string";
"2994";"SNMP";"snmpgetnext";"string snmpgetnext(string host, string community, string object_id[, int timeout[, int retries]])";"Fetch a SNMP object";"string";
"2995";"SNMP";"snmprealwalk";"array snmprealwalk(string host, string community, string object_id[, int timeout[, int retries]])";"Return all objects including their respective object ID within the specified one";"array";
"2996";"SNMP";"snmpset";"bool snmpset(string hostname, string community, string object_id, string type, mixed value[, int timeout[, int retries]])";"Set an SNMP object";"bool";
"2997";"SNMP";"snmpwalk";"array snmpwalk(string hostname, string community, string object_id[, int timeout[, int retries]])";"Fetch all the SNMP objects from an agent";"array";
"2998";"SNMP";"snmpwalkoid";"array snmpwalkoid(string hostname, string community, string object_id[, int timeout[, int retries]])";"Query for a tree of information about a network entity";"array";
"2999";"Sockets";"socket_accept";"resource socket_accept(resource socket)";"Accepts a connection on a socket";"resource";
"3000";"Sockets";"socket_bind";"bool socket_bind(resource socket, string address[, int port])";"Binds a name to a socket";"bool";
"3001";"Sockets";"socket_clear_error";"void socket_clear_error([resource socket])";"Clears the error on the socket or the last error code";"void";
"3002";"Sockets";"socket_close";"void socket_close(resource socket)";"Closes a socket resource";"void";
"3003";"Sockets";"socket_connect";"bool socket_connect(resource socket, string address[, int port])";"Initiates a connection on a socket";"bool";
"3004";"Sockets";"socket_create_listen";"resource socket_create_listen(int port[, int backlog])";"Opens a socket on port to accept connections";"resource";
"3005";"Sockets";"socket_create_pair";"bool socket_create_pair(int domain, int type, int protocol, array &fd)";"Creates a pair of indistinguishable sockets and stores them in an array.";"bool";
"3006";"Sockets";"socket_create";"resource socket_create(int domain, int type, int protocol)";"Create a socket (endpoint for communication)";"resource";
"3007";"Sockets";"socket_get_option";"mixed socket_get_option(resource socket, int level, int optname)";"Gets socket options for the socket";"mixed";
"3008";"Sockets";"socket_getpeername";"bool socket_getpeername(resource socket, string &addr[, int &port])";"Queries the remote side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.";"bool";
"3009";"Sockets";"socket_getsockname";"bool socket_getsockname(resource socket, string &addr[, int &port])";"Queries the local side of the given socket which may either result in host/port or in a Unix filesystem path, dependent on its type.";"bool";
"3010";"Sockets";"socket_iovec_add";"bool socket_iovec_add(resource iovec, int iov_len)";"Adds a new vector to the scatter/gather array";"bool";
"3011";"Sockets";"socket_iovec_delete";"bool socket_iovec_delete(resource iovec, int iov_pos)";"Deletes a vector from an array of vectors";"bool";
"3012";"Sockets";"socket_iovec_fetch";"string socket_iovec_fetch(resource iovec, int iovec_position)";"Returns the data held in the iovec specified by iovec_id[iovec_position]";"string";
"3013";"Sockets";"socket_iovec_free";"bool socket_iovec_free(resource iovec)";"Frees the iovec specified by iovec_id";"bool";
"3014";"Sockets";"socket_iovec_set";"bool socket_iovec_set(resource iovec, int iovec_position, string new_val)";"Sets the data held in iovec_id[iovec_position] to new_val";"bool";
"3015";"Sockets";"socket_last_error";"int socket_last_error([resource socket])";"Returns the last error on the socket";"int";
"3016";"Sockets";"socket_listen";"bool socket_listen(resource socket[, int backlog])";"Listens for a connection on a socket";"bool";
"3017";"Sockets";"socket_read";"string socket_read(resource socket, int length[, int type])";"Reads a maximum of length bytes from a socket";"string";
"3018";"Sockets";"socket_readv";"bool socket_readv(resource socket, resource iovec_id)";"Reads from an fd, using the scatter-gather array defined by iovec_id";"bool";
"3019";"Sockets";"socket_recv";"int socket_recv(resource socket, string &buf, int len, int flags)";"Receives data from a connected socket";"int";
"3020";"Sockets";"socket_recvfrom";"int socket_recvfrom(resource socket, string &buf, int len, int flags, string &name[, int &port])";"Receives data from a socket, connected or not";"int";
"3021";"Sockets";"socket_recvmsg";"bool socket_recvmsg(resource socket, resource iovec, array &control, int &controllen, int &flags, string &addr[, int &port])";"Used to receive messages on a socket, whether connection-oriented or not";"bool";
"3022";"Sockets";"socket_select";"int socket_select(array &read, array &write, array &except, int tv_sec[, int tv_usec])";"Runs the select() system call on the given arrays of sockets with a specified timeout";"int";
"3023";"Sockets";"socket_send";"int socket_send(resource socket, string buf, int len, int flags)";"Sends data to a connected socket";"int";
"3024";"Sockets";"socket_sendmsg";"bool socket_sendmsg(resource socket, resource iovec, int flags, string addr[, int port])";"Sends a message to a socket, regardless of whether it is connection-oriented or not";"bool";
"3025";"Sockets";"socket_sendto";"int socket_sendto(resource socket, string buf, int len, int flags, string addr[, int port])";"Sends a message to a socket, whether it is connected or not";"int";
"3026";"Sockets";"socket_set_block";"bool socket_set_block(resource socket)";"Sets blocking mode on a socket resource";"bool";
"3027";"Sockets";"socket_set_nonblock";"bool socket_set_nonblock(resource socket)";"Sets nonblocking mode for file descriptor fd";"bool";
"3028";"Sockets";"socket_set_option";"bool socket_set_option(resource socket, int level, int optname, mixed optval)";"Sets socket options for the socket";"bool";
"3029";"Sockets";"socket_shutdown";"bool socket_shutdown(resource socket[, int how])";"Shuts down a socket for receiving, sending, or both.";"bool";
"3030";"Sockets";"socket_strerror";"string socket_strerror(int errno)";"Return a string describing a socket error";"string";
"3031";"Sockets";"socket_write";"int socket_write(resource socket, string buffer[, int length])";"Write to a socket";"int";
"3032";"Sockets";"socket_writev";"bool socket_writev(resource socket, resource iovec_id)";"Writes to a file descriptor, fd, using the scatter-gather array defined by iovec_id";"bool";
"3033";"spl";"ArrayIterator::current";"mixed ArrayIterator::current()";"Return current array entry";"mixed";
"3034";"spl";"ArrayIterator::key";"mixed ArrayIterator::key()";"Return current array key";"mixed";
"3035";"spl";"ArrayIterator::next";"void ArrayIterator::next()";"Move to next entry";"void";
"3036";"spl";"ArrayIterator::rewind";"void ArrayIterator::rewind()";"Rewind array back to the start";"void";
"3037";"spl";"ArrayIterator::seek";"void ArrayIterator::seek(int position)";"Seek to position";"void";
"3038";"spl";"ArrayIterator::valid";"bool ArrayIterator::valid()";"Check whether array contains more entries";"bool";
"3039";"spl";"ArrayObject::append";"void ArrayObject::append(mixed newval)";"Appends the value";"void";
"3040";"spl";"ArrayObject::__construct";"void ArrayObject::__construct(mixed input)";"Construct a new array object";"void";
"3041";"spl";"ArrayObject::count";"int ArrayObject::count()";"Return the number of elements in the Iterator";"int";
"3042";"spl";"ArrayObject::getIterator";"ArrayIterator ArrayObject::getIterator()";"Create a new iterator from an ArrayObject instance";"ArrayIterator";
"3043";"spl";"ArrayObject::offsetExists";"bool ArrayObject::offsetExists(mixed index)";"Returns whether the requested $index exists";"bool";
"3044";"spl";"ArrayObject::offsetGet";"bool ArrayObject::offsetGet(mixed index)";"Returns the value at the specified $index";"bool";
"3045";"spl";"ArrayObject::offsetSet";"void ArrayObject::offsetSet(mixed index, mixed newval)";"Sets the value at the specified $index to $newval";"void";
"3046";"spl";"ArrayObject::offsetUnset";"void ArrayObject::offsetUnset(mixed index)";"Unsets the value at the specified $index";"void";
"3047";"spl";"CachingIterator::hasNext";"boolean CachingIterator::hasNext()";"Cehck whether the inner iterator has a valid next element";"boolean";
"3048";"spl";"CachingIterator::next";"void CachingIterator::next()";"Move the iterator forward";"void";
"3049";"spl";"CachingIterator::rewind";"void CachingIterator::rewind()";"Rewind the iterator";"void";
"3050";"spl";"CachingIterator::__toString";"string CachingIterator::__toString()";"Retrun the string representation of the current element";"string";
"3051";"spl";"CachingIterator::valid";"boolean CachingIterator::valid()";"Check whether the current element is valid";"boolean";
"3052";"spl";"CachingRecursiveIterator::hasChildren";"bolean CachingRecursiveIterator::hasChildren()";"Check whether the current element of the inner iterator has children";"bolean";
"3053";"spl";"DirectoryIterator::__construct";"void DirectoryIterator::__construct(string path)";"Constructs a new dir iterator from a path.";"void";
"3054";"spl";"DirectoryIterator::current";"DirectoryIterator DirectoryIterator::current()";"Return this (needed for Iterator interface)";"DirectoryIterator";
"3055";"spl";"DirectoryIterator::fileATime";"int DirectoryIterator::fileATime()";"Get last access time of file";"int";
"3056";"spl";"DirectoryIterator::fileCTime";"int DirectoryIterator::fileCTime()";"Get inode modification time of file";"int";
"3057";"spl";"DirectoryIterator::fileGroup";"int DirectoryIterator::fileGroup()";"Get file group";"int";
"3058";"spl";"DirectoryIterator::fileInode";"int DirectoryIterator::fileInode()";"Get file inode";"int";
"3059";"spl";"DirectoryIterator::fileMTime";"int DirectoryIterator::fileMTime()";"Get last modification time of file";"int";
"3060";"spl";"DirectoryIterator::fileOwner";"int DirectoryIterator::fileOwner()";"Get file owner";"int";
"3061";"spl";"DirectoryIterator::filePerms";"int DirectoryIterator::filePerms()";"Get file permissions";"int";
"3062";"spl";"DirectoryIterator::fileSize";"int DirectoryIterator::fileSize()";"Get file size";"int";
"3063";"spl";"DirectoryIterator::fileType";"string DirectoryIterator::fileType()";"Get file type";"string";
"3064";"spl";"DirectoryIterator::getChildren";"RecursiveDirectoryIterator DirectoryIterator::getChildren()";"Returns an iterator for the current entry if it is a directory";"RecursiveDirectoryIterator";
"3065";"spl";"DirectoryIterator::getFilename";"string DirectoryIterator::getFilename()";"Return filename of current dir entry";"string";
"3066";"spl";"DirectoryIterator::getPath";"string DirectoryIterator::getPath()";"Return directory path";"string";
"3067";"spl";"DirectoryIterator::getPathname";"string DirectoryIterator::getPathname()";"Return path and filename of current dir entry";"string";
"3068";"spl";"DirectoryIterator::isDir";"bool DirectoryIterator::isDir()";"Returns true if file is directory";"bool";
"3069";"spl";"DirectoryIterator::isExecutable";"bool DirectoryIterator::isExecutable()";"Returns true if file is executable";"bool";
"3070";"spl";"DirectoryIterator::isFile";"bool DirectoryIterator::isFile()";"Returns true if file is a regular file";"bool";
"3071";"spl";"DirectoryIterator::isLink";"bool DirectoryIterator::isLink()";"Returns true if file is symbolic link";"bool";
"3072";"spl";"DirectoryIterator::isReadable";"bool DirectoryIterator::isReadable()";"Returns true if file can be read";"bool";
"3073";"spl";"DirectoryIterator::isWritable";"bool DirectoryIterator::isWritable()";"Returns true if file can be written";"bool";
"3074";"spl";"DirectoryIterator::key";"string DirectoryIterator::key()";"Return current dir entry";"string";
"3075";"spl";"DirectoryIterator::next";"void DirectoryIterator::next()";"Move to next entry";"void";
"3076";"spl";"DirectoryIterator::rewind";"void DirectoryIterator::rewind()";"Rewind dir back to the start";"void";
"3077";"spl";"DirectoryIterator::valid";"string DirectoryIterator::valid()";"Check whether dir contains more entries";"string";
"3078";"spl";"FilterIterator::current";"mixed FilterIterator::current()";"Get the current element value";"mixed";
"3079";"spl";"FilterIterator::getInnerIterator";"Iterator FilterIterator::getInnerIterator()";"Get the inner iterator";"Iterator";
"3080";"spl";"FilterIterator::key";"mixed FilterIterator::key()";"Get the current key";"mixed";
"3081";"spl";"FilterIterator::next";"void FilterIterator::next()";"Move the iterator forward";"void";
"3082";"spl";"FilterIterator::rewind";"void FilterIterator::rewind()";"Rewind the iterator";"void";
"3083";"spl";"FilterIterator::valid";"boolean FilterIterator::valid()";"Check whether the current element is valid";"boolean";
"3084";"spl";"LimitIterator::getPosition";"int LimitIterator::getPosition()";"Return the current position";"int";
"3085";"spl";"LimitIterator::next";"void LimitIterator::next()";"Move the iterator forward";"void";
"3086";"spl";"LimitIterator::rewind";"void LimitIterator::rewind()";"Rewind the iterator to the specified starting offset";"void";
"3087";"spl";"LimitIterator::seek";"void LimitIterator::seek(int position)";"Seek to the given position";"void";
"3088";"spl";"LimitIterator::valid";"boolean LimitIterator::valid()";"Check whether the current element is valid";"boolean";
"3089";"spl";"ParentIterator::next";"void ParentIterator::next()";"Move the iterator forward";"void";
"3090";"spl";"ParentIterator::rewind";"void ParentIterator::rewind()";"Rewind the iterator";"void";
"3091";"spl";"RecursiveDirectoryIterator::getChildren";"object RecursiveDirectoryIterator::getChildren()";"Returns an iterator for the current entry if it is a directory";"object";
"3092";"spl";"RecursiveDirectoryIterator::key";"string RecursiveDirectoryIterator::key()";"Return path and filename of current dir entry";"string";
"3093";"spl";"RecursiveDirectoryIterator::next";"void RecursiveDirectoryIterator::next()";"Move to next entry";"void";
"3094";"spl";"RecursiveDirectoryIterator::rewind";"void RecursiveDirectoryIterator::rewind()";"Rewind dir back to the start";"void";
"3095";"spl";"RecursiveIteratorIterator::current";"mixed RecursiveIteratorIterator::current()";"Access the current element value";"mixed";
"3096";"spl";"RecursiveIteratorIterator::getDepth";"int RecursiveIteratorIterator::getDepth()";"Get the current depth of the recursive iteration";"int";
"3097";"spl";"RecursiveIteratorIterator::getSubIterator";"RecursiveIterator RecursiveIteratorIterator::getSubIterator()";"The current active sub iterator";"RecursiveIterator";
"3098";"spl";"RecursiveIteratorIterator::key";"mixed RecursiveIteratorIterator::key()";"Access the current key";"mixed";
"3099";"spl";"RecursiveIteratorIterator::next";"void RecursiveIteratorIterator::next()";"Move forward to the next element";"void";
"3100";"spl";"RecursiveIteratorIterator::rewind";"void RecursiveIteratorIterator::rewind()";"Rewind the iterator to the first element of the top level inner iterator.";"void";
"3101";"spl";"RecursiveIteratorIterator::valid";"bolean RecursiveIteratorIterator::valid()";"Check whether the current position is valid";"bolean";
"3102";"spl";"SimpleXMLIterator::current";"mixed SimpleXMLIterator::current()";"Return current SimpleXML entry";"mixed";
"3103";"spl";"SimpleXMLIterator::getChildren";"object SimpleXMLIterator::getChildren()";"Returns an iterator for the current entry if it is a SimpleXML object";"object";
"3104";"spl";"SimpleXMLIterator::hasChildren";"bool SimpleXMLIterator::hasChildren()";"Returns whether current entry is a SimpleXML object";"bool";
"3105";"spl";"SimpleXMLIterator::key";"mixed SimpleXMLIterator::key()";"Return current SimpleXML key";"mixed";
"3106";"spl";"SimpleXMLIterator::next";"void SimpleXMLIterator::next()";"Move to next entry";"void";
"3107";"spl";"SimpleXMLIterator::rewind";"void SimpleXMLIterator::rewind()";"Rewind SimpleXML back to the start";"void";
"3108";"spl";"SimpleXMLIterator::valid";"bool SimpleXMLIterator::valid()";"Check whether SimpleXML contains more entries";"bool";
"3109";"Streams";"stream_context_create";"resource stream_context_create(array options)";"Create a streams context";"resource";
"3110";"Streams";"stream_context_get_options";"array stream_context_get_options(resource stream|context)";"Retrieve options for a stream/wrapper/context";"array";
"3111";"Streams";"stream_context_set_option";"bool stream_context_set_option(resource context|stream, string wrapper, string option, mixed value)";"Sets an option for a stream/wrapper/context";"bool";
"3112";"Streams";"stream_context_set_params";"bool stream_context_set_params(resource stream|context, array params)";"Set parameters for a stream/wrapper/context";"bool";
"3113";"Streams";"stream_copy_to_stream";"int stream_copy_to_stream(resource source, resource dest[, int maxlength])";"Copies data from one stream to another";"int";
"3114";"Streams";"stream_filter_append";"bool stream_filter_append(resource stream, string filtername[, int read_write[, mixed params]])";"Attach a filter to a stream.";"bool";
"3115";"Streams";"stream_filter_prepend";"bool stream_filter_prepend(resource stream, string filtername[, int read_write[, mixed params]])";"Attach a filter to a stream.";"bool";
"3116";"Streams";"stream_filter_register";"bool stream_filter_register(string filtername, string classname)int filter(resource in, resource out, int &consumed, bool closing)void onCreate()void onClose()";"Register a stream filter implemented as a PHP class derived from php_user_filter";"bool";
"3117";"Streams";"stream_get_contents";"string stream_get_contents(resource handle[, int maxlength])";"Reads remainder of a stream into a string";"string";
"3118";"Streams";"stream_get_filters";"array stream_get_filters()";"Retrieve list of registered filters";"array";
"3119";"Streams";"stream_get_line";"string stream_get_line(resource handle, int length, string ending)";"Gets line from stream resource up to a given delimiter";"string";
"3120";"Streams";"stream_get_meta_data";"array stream_get_meta_data(resource stream)";"Retrieves header/meta data from streams/file pointers";"array";
"3121";"Streams";"stream_get_transports";"array stream_get_transports()";"Retrieve list of registered socket transports";"array";
"3122";"Streams";"stream_get_wrappers";"array stream_get_wrappers()";"Retrieve list of registered streams";"array";
"3123";"Streams";"stream_register_wrapper";;"Alias of stream_wrapper_register";;
"3124";"Streams";"stream_select";"int stream_select(array &read, array &write, array &except, int tv_sec[, int tv_usec])";"Runs the equivalent of the select() system call on the given arrays of streams with a timeout specified by tv_sec and tv_usec";"int";
"3125";"Streams";"stream_set_blocking";"bool stream_set_blocking(resource stream, int mode)";"Set blocking/non-blocking mode on a stream";"bool";
"3126";"Streams";"stream_set_timeout";"bool stream_set_timeout(resource stream, int seconds[, int microseconds])";"Set timeout period on a stream";"bool";
"3127";"Streams";"stream_set_write_buffer";"int stream_set_write_buffer(resource stream, int buffer)";"Sets file buffering on the given stream";"int";
"3128";"Streams";"stream_socket_accept";"resource stream_socket_accept(resource server_socket[, int timeout[, string &peername]])";"Accept a connection on a socket created by stream_socket_server";"resource";
"3129";"Streams";"stream_socket_client";"resource stream_socket_client(string remote_socket[, int &errno[, string &errstr[, float timeout[, int flags[, resource context]]]]])";"Open Internet or Unix domain socket connection";"resource";
"3130";"Streams";"stream_socket_get_name";"string stream_socket_get_name(resource handle, bool want_peer)";"Retrieve the name of the local or remote sockets";"string";
"3131";"Streams";"stream_socket_recvfrom";"string stream_socket_recvfrom(resource socket, int length[, int flags[, string &address]])";"Receives data from a socket, connected or not";"string";
"3132";"Streams";"stream_socket_sendto";"int stream_socket_sendto(resource socket, string data[, int flags[, string address]])";"Sends a message to a socket, whether it is connected or not";"int";
"3133";"Streams";"stream_socket_server";"resource stream_socket_server(string local_socket[, int &errno[, string &errstr[, int flags[, resource context]]]])";"Create an Internet or Unix domain server socket";"resource";
"3134";"Streams";"stream_wrapper_register";"bool stream_wrapper_register(string protocol, string classname)bool stream_open(string path, string mode, int options, string opened_path)void stream_close()string stream_read(int count)int stream_wri";"Register a URL wrapper implemented as a PHP class";"bool";
"3135";"Strings";"addcslashes";"string addcslashes(string str, string charlist)";"Quote string with slashes in a C style";"string";
"3136";"Strings";"addslashes";"string addslashes(string str)";"Quote string with slashes";"string";
"3137";"Strings";"bin2hex";"string bin2hex(string str)";"Convert binary data into hexadecimal representation";"string";
"3138";"Strings";"chop";;"Alias of rtrim";;
"3139";"Strings";"chr";"string chr(int ascii)";"Return a specific character";"string";
"3140";"Strings";"chunk_split";"string chunk_split(string body[, int chunklen[, string end]])";"Split a string into smaller chunks";"string";
"3141";"Strings";"convert_cyr_string";"string convert_cyr_string(string str, string from, string to)";"Convert from one Cyrillic character set to another";"string";
"3142";"Strings";"convert_uudecode";"string convert_uudecode(string data)";"Decode a uuencoded string";"string";
"3143";"Strings";"convert_uuencode";"string convert_uuencode(string data)";"Uuencode a string";"string";
"3144";"Strings";"count_chars";"mixed count_chars(string string[, int mode])";"Return information about characters used in a string";"mixed";
"3145";"Strings";"crc32";"int crc32(string str)";"Calculates the crc32 polynomial of a string";"int";
"3146";"Strings";"crypt";"string crypt(string str[, string salt])";"One-way string encryption (hashing)";"string";
"3147";"Strings";"echo";"void echo(string arg1[, string argn...])";"Output one or more strings";"void";
"3148";"Strings";"explode";"array explode(string separator, string string[, int limit])";"Split a string by string";"array";
"3149";"Strings";"fprintf";"int fprintf(resource handle, string format[, mixed args])";"Write a formatted string to a stream";"int";
"3150";"Strings";"get_html_translation_table";"array get_html_translation_table(int table[, int quote_style])";"Returns the translation table used by htmlspecialchars and htmlentities";"array";
"3151";"Strings";"hebrev";"string hebrev(string hebrew_text[, int max_chars_per_line])";"Convert logical Hebrew text to visual text";"string";
"3152";"Strings";"hebrevc";"string hebrevc(string hebrew_text[, int max_chars_per_line])";"Convert logical Hebrew text to visual text with newline conversion";"string";
"3153";"Strings";"html_entity_decode";"string html_entity_decode(string string[, int quote_style[, string charset]])";"Convert all HTML entities to their applicable characters";"string";
"3154";"Strings";"htmlentities";"string htmlentities(string string[, int quote_style[, string charset]])";"Convert all applicable characters to HTML entities";"string";
"3155";"Strings";"htmlspecialchars";"string htmlspecialchars(string string[, int quote_style[, string charset]])";"Convert special characters to HTML entities";"string";
"3156";"Strings";"implode";"string implode(string glue, array pieces)";"Join array elements with a string";"string";
"3157";"Strings";"join";;"Alias of implode";;
"3158";"Strings";"levenshtein";"int levenshtein(string str1, string str2)int levenshtein(string str1, string str2, int cost_ins, int cost_rep, int cost_del)int levenshtein(string str1, string str2, function cost)";"Calculate Levenshtein distance between two strings";"int";
"3159";"Strings";"localeconv";"array localeconv()";"Get numeric formatting information";"array";
"3160";"Strings";"ltrim";"string ltrim(string str[, string charlist])";"Strip whitespace from the beginning of a string";"string";
"3161";"Strings";"md5_file";"string md5_file(string filename[, bool raw_output])";"Calculates the md5 hash of a given filename";"string";
"3162";"Strings";"md5";"string md5(string str[, bool raw_output])";"Calculate the md5 hash of a string";"string";
"3163";"Strings";"metaphone";"string metaphone(string str)";"Calculate the metaphone key of a string";"string";
"3164";"Strings";"money_format";"string money_format(string format, float number)";"Formats a number as a currency string";"string";
"3165";"Strings";"nl_langinfo";"string nl_langinfo(int item)";"Query language and locale information";"string";
"3166";"Strings";"nl2br";"string nl2br(string string)";"Inserts HTML line breaks before all newlines in a string";"string";
"3167";"Strings";"number_format";"string number_format(float number[, int decimals])string number_format(float number, int decimals, string dec_point, string thousands_sep)";"Format a number with grouped thousands";"string";
"3168";"Strings";"ord";"int ord(string string)";"Return ASCII value of character";"int";
"3169";"Strings";"parse_str";"void parse_str(string str[, array arr)";"Parses the string into variables";"void";
"3170";"Strings";"print";"int print(string arg)";"Output a string";"int";
"3171";"Strings";"printf";"void printf(string format[, mixed args])";"Output a formatted string";"void";
"3172";"Strings";"quoted_printable_decode";"string quoted_printable_decode(string str)";"Convert a quoted-printable string to an 8 bit string";"string";
"3173";"Strings";"quotemeta";"string quotemeta(string str)";"Quote meta characters";"string";
"3174";"Strings";"rtrim";"string rtrim(string str[, string charlist])";"Strip whitespace from the end of a string";"string";
"3175";"Strings";"setlocale";"string setlocale(mixed category, string locale[, string ...])string setlocale(mixed category, array locale)";"Set locale information";"string";
"3176";"Strings";"sha1_file";"string sha1_file(string filename[, bool raw_output])";"Calculate the sha1 hash of a file";"string";
"3177";"Strings";"sha1";"string sha1(string str[, bool raw_output])";"Calculate the sha1 hash of a string";"string";
"3178";"Strings";"similar_text";"int similar_text(string first, string second[, float percent])";"Calculate the similarity between two strings";"int";
"3179";"Strings";"soundex";"string soundex(string str)";"Calculate the soundex key of a string";"string";
"3180";"Strings";"sprintf";"string sprintf(string format[, mixed args])";"Return a formatted string";"string";
"3181";"Strings";"sscanf";"mixed sscanf(string str, string format[, string var1])";"Parses input from a string according to a format";"mixed";
"3182";"Strings";"str_ireplace";"mixed str_ireplace(mixed search, mixed replace, mixed subject[, int &count])";"Case-insensitive version of str_replace.";"mixed";
"3183";"Strings";"str_pad";"string str_pad(string input, int pad_length[, string pad_string[, int pad_type]])";"Pad a string to a certain length with another string";"string";
"3184";"Strings";"str_repeat";"string str_repeat(string input, int multiplier)";"Repeat a string";"string";
"3185";"Strings";"str_replace";"mixed str_replace(mixed search, mixed replace, mixed subject[, int &count])";"Replace all occurrences of the search string with the replacement string";"mixed";
"3186";"Strings";"str_rot13";"string str_rot13(string str)";"Perform the rot13 transform on a string";"string";
"3187";"Strings";"str_shuffle";"string str_shuffle(string str)";"Randomly shuffles a string";"string";
"3188";"Strings";"str_split";"array str_split(string string[, int split_length])";"Convert a string to an array";"array";
"3189";"Strings";"str_word_count";"mixed str_word_count(string string[, int format])";"Return information about words used in a string";"mixed";
"3190";"Strings";"strcasecmp";"int strcasecmp(string str1, string str2)";"Binary safe case-insensitive string comparison";"int";
"3191";"Strings";"strchr";;"Alias of strstr";;
"3192";"Strings";"strcmp";"int strcmp(string str1, string str2)";"Binary safe string comparison";"int";
"3193";"Strings";"strcoll";"int strcoll(string str1, string str2)";"Locale based string comparison";"int";
"3194";"Strings";"strcspn";"int strcspn(string str1, string str2)";"Find length of initial segment not matching mask";"int";
"3195";"Strings";"strip_tags";"string strip_tags(string str[, string allowable_tags])";"Strip HTML and PHP tags from a string";"string";
"3196";"Strings";"stripcslashes";"string stripcslashes(string str)";"Un-quote string quoted with addcslashes";"string";
"3197";"Strings";"stripos";"int stripos(string haystack, string needle[, int offset])";"Find position of first occurrence of a case-insensitive string";"int";
"3198";"Strings";"stripslashes";"string stripslashes(string str)";"Un-quote string quoted with addslashes";"string";
"3199";"Strings";"stristr";"string stristr(string haystack, string needle)";"Case-insensitive strstr";"string";
"3200";"Strings";"strlen";"int strlen(string string)";"Get string length";"int";
"3201";"Strings";"strnatcasecmp";"int strnatcasecmp(string str1, string str2)";"Case insensitive string comparisons using a natural order algorithm";"int";
"3202";"Strings";"strnatcmp";"int strnatcmp(string str1, string str2)";"String comparisons using a natural order algorithm";"int";
"3203";"Strings";"strncasecmp";"int strncasecmp(string str1, string str2, int len)";"Binary safe case-insensitive string comparison of the first n characters";"int";
"3204";"Strings";"strncmp";"int strncmp(string str1, string str2, int len)";"Binary safe string comparison of the first n characters";"int";
"3205";"Strings";"strpbrk";"array strpbrk(string haystack, string char_list)";"Search a string for any of a set of characters";"array";
"3206";"Strings";"strpos";"int strpos(string haystack, string needle[, int offset])";"Find position of first occurrence of a string";"int";
"3207";"Strings";"strrchr";"string strrchr(string haystack, char needle)";"Find the last occurrence of a character in a string";"string";
"3208";"Strings";"strrev";"string strrev(string string)";"Reverse a string";"string";
"3209";"Strings";"strripos";"int strripos(string haystack, string needle[, int offset])";"Find position of last occurrence of a case-insensitive string in a string";"int";
"3210";"Strings";"strrpos";"int strrpos(string haystack, string needle[, int offset])";"Find position of last occurrence of a char in a string";"int";
"3211";"Strings";"strspn";"int strspn(string str1, string str2)";"Find length of initial segment matching mask";"int";
"3212";"Strings";"strstr";"string strstr(string haystack, string needle)";"Find first occurrence of a string";"string";
"3213";"Strings";"strtok";"string strtok(string arg1, string arg2)";"Tokenize string";"string";
"3214";"Strings";"strtolower";"string strtolower(string str)";"Make a string lowercase";"string";
"3215";"Strings";"strtoupper";"string strtoupper(string string)";"Make a string uppercase";"string";
"3216";"Strings";"strtr";"string strtr(string str, string from, string to)string strtr(string str, array replace_pairs)";"Translate certain characters";"string";
"3217";"Strings";"substr_compare";"int substr_compare(string main_str, string str, int offset[, int length[, bool case_sensitivity]])";"Binary safe optionally case insensitive comparison of 2 strings from an offset, up to length characters";"int";
"3218";"Strings";"substr_count";"int substr_count(string haystack, string needle)";"Count the number of substring occurrences";"int";
"3219";"Strings";"substr_replace";"string substr_replace(string string, string replacement, int start[, int length])";"Replace text within a portion of a string";"string";
"3220";"Strings";"substr";"string substr(string string, int start[, int length])";"Return part of a string";"string";
"3221";"Strings";"trim";"string trim(string str[, string charlist])";"Strip whitespace from the beginning and end of a string";"string";
"3222";"Strings";"ucwords";"string ucwords(string str)";"Uppercase the first character of each word in a string";"string";
"3223";"Strings";"vprintf";"void vprintf(string format, array args)";"Output a formatted string";"void";
"3224";"Strings";"vsprintf";"string vsprintf(string format, array args)";"Return a formatted string";"string";
"3225";"Strings";"wordwrap";"string wordwrap(string str[, int width[, string break[, boolean cut]]])";"Wraps a string to a given number of characters using a string break character.";"string";
"3226";"Sybase";"sybase_affected_rows";"int sybase_affected_rows([resource link_identifier])";"Gets number of affected rows in last query";"int";
"3227";"Sybase";"sybase_close";"bool sybase_close([resource link_identifier])";"Closes a Sybase connection";"bool";
"3228";"Sybase";"sybase_connect";"resource sybase_connect([string servername[, string username[, string password[, string charset[, string appname]]]]])";"Opens a Sybase server connection";"resource";
"3229";"Sybase";"sybase_data_seek";"bool sybase_data_seek(resource result_identifier, int row_number)";"Moves internal row pointer";"bool";
"3230";"Sybase";"sybase_deadlock_retry_count";"void sybase_deadlock_retry_count(int retry_count)";"Sets the deadlock retry count";"void";
"3231";"Sybase";"sybase_fetch_array";"array sybase_fetch_array(resource result)";"Fetch row as array";"array";
"3232";"Sybase";"sybase_fetch_assoc";"array sybase_fetch_assoc(resource result)";"Fetch a result row as an associative array";"array";
"3233";"Sybase";"sybase_fetch_field";"object sybase_fetch_field(resource result[, int field_offset])";"Get field information from a result";"object";
"3234";"Sybase";"sybase_fetch_object";"object sybase_fetch_object(resource result[, mixed object])";"Fetch a row as an object";"object";
"3235";"Sybase";"sybase_fetch_row";"array sybase_fetch_row(resource result)";"Get a result row as an enumerated array";"array";
"3236";"Sybase";"sybase_field_seek";"bool sybase_field_seek(resource result, int field_offset)";"Sets field offset";"bool";
"3237";"Sybase";"sybase_free_result";"bool sybase_free_result(resource result)";"Frees result memory";"bool";
"3238";"Sybase";"sybase_get_last_message";"string sybase_get_last_message()";"Returns the last message from the server";"string";
"3239";"Sybase";"sybase_min_client_severity";"void sybase_min_client_severity(int severity)";"Sets minimum client severity";"void";
"3240";"Sybase";"sybase_min_error_severity";"void sybase_min_error_severity(int severity)";"Sets minimum error severity";"void";
"3241";"Sybase";"sybase_min_message_severity";"void sybase_min_message_severity(int severity)";"Sets minimum message severity";"void";
"3242";"Sybase";"sybase_min_server_severity";"void sybase_min_server_severity(int severity)";"Sets minimum server severity";"void";
"3243";"Sybase";"sybase_num_fields";"int sybase_num_fields(resource result)";"Gets the number of fields in a result set";"int";
"3244";"Sybase";"sybase_num_rows";"int sybase_num_rows(resource result)";"Get number of rows in a result set";"int";
"3245";"Sybase";"sybase_pconnect";"resource sybase_pconnect([string servername[, string username[, string password[, string charset[, string appname]]]]])";"Open persistent Sybase connection";"resource";
"3246";"Sybase";"sybase_query";"resource sybase_query(string query, resource link_identifier)";"Sends a Sybase query";"resource";
"3247";"Sybase";"sybase_result";"string sybase_result(resource result, int row, mixed field)";"Get result data";"string";
"3248";"Sybase";"sybase_select_db";"bool sybase_select_db(string database_name[, resource link_identifier])";"Selects a Sybase database";"bool";
"3249";"Sybase";"sybase_set_message_handler";"bool sybase_set_message_handler(callback handler[, resource connection])";"Sets the handler called when a server message is raised";"bool";
"3250";"Sybase";"sybase_unbuffered_query";"resource sybase_unbuffered_query(string query, resource link_identifier[, bool store_result])";"Send a Sybase query and do not block";"resource";
"3251";"TCP Wrappers";"tcpwrap_check";"bool tcpwrap_check(string daemon, string address[, string user[, bool nodns]])";"tcpwrap check";"bool";
"3252";"tidy";"ob_tidyhandler";"string ob_tidyhandler(string input[, int mode])";"ob_start callback function to repair the buffer";"string";
"3253";"tidy";"tidy_access_count";"int tidy_access_count(resource tidy)";"Returns the Number of Tidy accessibility warnings encountered for specified document.";"int";
"3254";"tidy";"tidy_clean_repair";"bool tidy_clean_repair(resource tidy)";"Execute configured cleanup and repair operations on parsed markup";"bool";
"3255";"tidy";"tidy_config_count";"int tidy_config_count(resource tidy)";"Returns the Number of Tidy configuration errors encountered for specified document.";"int";
"3256";"tidy";"tidy_diagnose";"bool tidy_diagnose(resource tidy)";"Run configured diagnostics on parsed and repaired markup.";"bool";
"3257";"tidy";"tidy_error_count";"int tidy_error_count(resource tidy)";"Returns the Number of Tidy errors encountered for specified document.";"int";
"3258";"tidy";"tidy_get_body";"object tidy_get_body(resource tidy)";"Returns a TidyNode Object starting from the <body> tag of the tidy parse tree";"object";
"3259";"tidy";"tidy_get_config";"array tidy_get_config(resource tidy)";"Get current Tidy configuration";"array";
"3260";"tidy";"tidy_get_error_buffer";"string tidy_get_error_buffer(resource tidy)";"Return warnings and errors which occurred parsing the specified document";"string";
"3261";"tidy";"tidy_get_head";"object tidy_get_head(resource tidy)";"Returns a TidyNode Object starting from the <head> tag of the tidy parse tree";"object";
"3262";"tidy";"tidy_get_html_ver";"int tidy_get_html_ver(resource tidy)";"Get the Detected HTML version for the specified document.";"int";
"3263";"tidy";"tidy_get_html";"object tidy_get_html(resource tidy)";"Returns a TidyNode Object starting from the <html> tag of the tidy parse tree";"object";
"3264";"tidy";"tidy_get_output";"string tidy_get_output(resource tidy)";"Return a string representing the parsed tidy markup";"string";
"3265";"tidy";"tidy_get_release";"string tidy_get_release()";"Get release date (version) for Tidy library";"string";
"3266";"tidy";"tidy_get_root";"object tidy_get_root()";"Returns a TidyNode Object representing the root of the tidy parse tree";"object";
"3267";"tidy";"tidy_get_status";"int tidy_get_status(resource tidy)";"Get status of specified document.";"int";
"3268";"tidy";"tidy_getopt";"mixed tidy_getopt(string option)";"Returns the value of the specified configuration option for the tidy document.";"mixed";
"3269";"tidy";"tidy_is_xhtml";"bool tidy_is_xhtml(resource tidy)";"Indicates if the document is a XHTML document.";"bool";
"3270";"tidy";"tidy_is_xml";"bool tidy_is_xml(resource tidy)";"Indicates if the document is a generic (non HTML/XHTML) XML document.";"bool";
"3271";"tidy";"tidy_load_config";"void tidy_load_config(string filename, string encoding)";"Load an ASCII Tidy configuration file with the specified encoding";"void";
"3272";"tidy";"tidy_node->attributes";"array tidy_node->attributes()";"Returns an array of attribute objects for node";"array";
"3273";"tidy";"tidy_node->children";"array tidy_node->children()";"Returns an array of child nodes";"array";
"3274";"tidy";"tidy_node->get_attr";"tidy_attr tidy_node->get_attr(int attrib_id)";"Return the attribute with the provided attribute id";"tidy_attr";
"3275";"tidy";"tidy_node->get_nodes";"array tidy_node->get_nodes(int node_id)";"Return an array of nodes under this node with the specified id";"array";
"3276";"tidy";"tidy_node->hasChildren";"bool tidy_node->hasChildren()";"Returns true if this node has children";"bool";
"3277";"tidy";"tidy_node->hasSiblings";"bool tidy_node->hasSiblings()";"Returns true if this node has siblings";"bool";
"3278";"tidy";"tidy_node->isAsp";"bool tidy_node->isAsp()";"Returns true if this node is ASP";"bool";
"3279";"tidy";"tidy_node->isComment";"bool tidy_node->isComment()";"Returns true if this node represents a comment";"bool";
"3280";"tidy";"tidy_node->isHtml";"bool tidy_node->isHtml()";"Returns true if this node is part of a HTML document";"bool";
"3281";"tidy";"tidy_node->isJste";"bool tidy_node->isJste()";"Returns true if this node is JSTE";"bool";
"3282";"tidy";"tidy_node->isPhp";"bool tidy_node->isPhp()";"Returns true if this node is PHP";"bool";
"3283";"tidy";"tidy_node->isText";"bool tidy_node->isText()";"Returns true if this node represents text (no markup)";"bool";
"3284";"tidy";"tidy_node->isXhtml";"bool tidy_node->isXhtml()";"Returns true if this node is part of a XHTML document";"bool";
"3285";"tidy";"tidy_node->isXml";"bool tidy_node->isXml()";"Returns true if this node is part of a XML document";"bool";
"3286";"tidy";"tidy_node->next";"tidy_node tidy_node->next()";"Returns the next sibling to this node";"tidy_node";
"3287";"tidy";"tidy_node->prev";"tidy_node tidy_node->prev()";"Returns the previous sibling to this node";"tidy_node";
"3288";"tidy";"tidy_node->tidy_node";"void tidy_node->tidy_node()";"Constructor.";"void";
"3289";"tidy";"tidy_parse_file";"resource tidy_parse_file(string filename[, mixed config[, string encoding[, bool use_include_path]]])";"Parse markup in file or URI";"resource";
"3290";"tidy";"tidy_parse_string";"resource tidy_parse_string(string input[, mixed config[, string encoding]])";"Parse a document stored in a string";"resource";
"3291";"tidy";"tidy_repair_file";"string tidy_repair_file(string filename[, mixed config[, string encoding[, bool use_include_path]]])";"Repair a file and return it as a string";"string";
"3292";"tidy";"tidy_repair_string";"string tidy_repair_string(string data[, mixed config[, string encoding]])";"Repair a string using an optionally provided configuration file";"string";
"3293";"tidy";"tidy_reset_config";"bool tidy_reset_config()";"Restore Tidy configuration to default values";"bool";
"3294";"tidy";"tidy_save_config";"bool tidy_save_config(string filename)";"Save current settings to named file. Only non-default values are written.";"bool";
"3295";"tidy";"tidy_set_encoding";"bool tidy_set_encoding(string encoding)";"Set the input/output character encoding for parsing markup.";"bool";
"3296";"tidy";"tidy_setopt";"bool tidy_setopt(string option, mixed value)";"Updates the configuration settings for the specified tidy document.";"bool";
"3297";"tidy";"tidy_warning_count";"int tidy_warning_count(resource tidy)";"Returns the Number of Tidy warnings encountered for specified document.";"int";
"3298";"Tokenizer";"token_get_all";"array token_get_all(string source)";"Split given source into PHP tokens";"array";
"3299";"Tokenizer";"token_name";"string token_name(int token)";"Get the symbolic name of a given PHP token";"string";
"3300";"URLs";"base64_decode";"string base64_decode(string encoded_data)";"Decodes data encoded with MIME base64";"string";
"3301";"URLs";"base64_encode";"string base64_encode(string data)";"Encodes data with MIME base64";"string";
"3302";"URLs";"get_headers";"array get_headers(string url[, bool format])";"Fetches all the headers sent by the server in response to a HTTP request";"array";
"3303";"URLs";"get_meta_tags";"array get_meta_tags(string filename[, int use_include_path])";"Extracts all meta tag content attributes from a file and returns an array";"array";
"3304";"URLs";"http_build_query";"string http_build_query(array formdata[, string numeric_prefix])";"Generate URL-encoded query string";"string";
"3305";"URLs";"parse_url";"array parse_url(string url)";"Parse a URL and return its components";"array";
"3306";"URLs";"rawurldecode";"string rawurldecode(string str)";"Decode URL-encoded strings";"string";
"3307";"URLs";"rawurlencode";"string rawurlencode(string str)";"URL-encode according to RFC 1738";"string";
"3308";"URLs";"urldecode";"string urldecode(string str)";"Decodes URL-encoded string";"string";
"3309";"URLs";"urlencode";"string urlencode(string str)";"URL-encodes string";"string";
"3310";"Variables";"doubleval";;"Alias of floatval";;
"3311";"Variables";"empty";"bool empty(mixed var)";"Determine whether a variable is empty";"bool";
"3312";"Variables";"floatval";"float floatval(mixed var)";"Get float value of a variable";"float";
"3313";"Variables";"get_defined_vars";"array get_defined_vars()";"Returns an array of all defined variables";"array";
"3314";"Variables";"get_resource_type";"string get_resource_type(resource handle)";"Returns the resource type";"string";
"3315";"Variables";"gettype";"string gettype(mixed var)";"Get the type of a variable";"string";
"3316";"Variables";"import_request_variables";"bool import_request_variables(string types[, string prefix])";"Import GET/POST/Cookie variables into the global scope";"bool";
"3317";"Variables";"intval";"int intval(mixed var[, int base])";"Get integer value of a variable";"int";
"3318";"Variables";"is_array";"bool is_array(mixed var)";"Finds whether a variable is an array";"bool";
"3319";"Variables";"is_bool";"bool is_bool(mixed var)";"Finds out whether a variable is a boolean";"bool";
"3320";"Variables";"is_callable";"bool is_callable(mixed var[, bool syntax_only[, string callable_name]])";"Verify that the contents of a variable can be called as a function";"bool";
"3321";"Variables";"is_double";;"Alias of is_float";;
"3322";"Variables";"is_float";"bool is_float(mixed var)";"Finds whether a variable is a float";"bool";
"3323";"Variables";"is_int";"bool is_int(mixed var)";"Find whether a variable is an integer";"bool";
"3324";"Variables";"is_integer";;"Alias of is_int";;
"3325";"Variables";"is_long";;"Alias of is_int";;
"3326";"Variables";"is_null";"bool is_null(mixed var)";"Finds whether a variable is NULL";"bool";
"3327";"Variables";"is_numeric";"bool is_numeric(mixed var)";"Finds whether a variable is a number or a numeric string";"bool";
"3328";"Variables";"is_object";"bool is_object(mixed var)";"Finds whether a variable is an object";"bool";
"3329";"Variables";"is_real";;"Alias of is_float";;
"3330";"Variables";"is_resource";"bool is_resource(mixed var)";"Finds whether a variable is a resource";"bool";
"3331";"Variables";"is_scalar";"bool is_scalar(mixed var)";"Finds whether a variable is a scalar";"bool";
"3332";"Variables";"is_string";"bool is_string(mixed var)";"Finds whether a variable is a string";"bool";
"3333";"Variables";"isset";"bool isset(mixed var[, mixed var[,  ...]])";"Determine whether a variable is set";"bool";
"3334";"Variables";"print_r";"bool print_r(mixed expression[, bool return])";"Prints human-readable information about a variable";"bool";
"3335";"Variables";"serialize";"string serialize(mixed value)";"Generates a storable representation of a value";"string";
"3336";"Variables";"settype";"bool settype(mixed var, string type)";"Set the type of a variable";"bool";
"3337";"Variables";"strval";"string strval(mixed var)";"Get string value of a variable";"string";
"3338";"Variables";"unserialize";"mixed unserialize(string str)";"Creates a PHP value from a stored representation";"mixed";
"3339";"Variables";"unset";"void unset(mixed var[, mixed var[, mixed ...]])";"Unset a given variable";"void";
"3340";"Variables";"var_dump";"void var_dump(mixed expression[, mixed expression[,  ...]])";"Dumps information about a variable";"void";
"3341";"Variables";"var_export";"mixed var_export(mixed expression[, bool return])";"Outputs or returns a parsable string representation of a variable";"mixed";
"3342";"vpopmail";"vpopmail_add_alias_domain_ex";"bool vpopmail_add_alias_domain_ex(string olddomain, string newdomain)";"Add alias to an existing virtual domain";"bool";
"3343";"vpopmail";"vpopmail_add_alias_domain";"bool vpopmail_add_alias_domain(string domain, string aliasdomain)";"Add an alias for a virtual domain";"bool";
"3344";"vpopmail";"vpopmail_add_domain_ex";"bool vpopmail_add_domain_ex(string domain, string passwd[, string quota[, string bounce[, bool apop]]])";"Add a new virtual domain";"bool";
"3345";"vpopmail";"vpopmail_add_domain";"bool vpopmail_add_domain(string domain, string dir, int uid, int gid)";"Add a new virtual domain";"bool";
"3346";"vpopmail";"vpopmail_add_user";"bool vpopmail_add_user(string user, string domain, string password[, string gecos[, bool apop]])";"Add a new user to the specified virtual domain";"bool";
"3347";"vpopmail";"vpopmail_alias_add";"bool vpopmail_alias_add(string user, string domain, string alias)";"insert a virtual alias";"bool";
"3348";"vpopmail";"vpopmail_alias_del_domain";"bool vpopmail_alias_del_domain(string domain)";"deletes all virtual aliases of a domain";"bool";
"3349";"vpopmail";"vpopmail_alias_del";"bool vpopmail_alias_del(string user, string domain)";"deletes all virtual aliases of a user";"bool";
"3350";"vpopmail";"vpopmail_alias_get_all";"array vpopmail_alias_get_all(string domain)";"get all lines of an alias for a domain";"array";
"3351";"vpopmail";"vpopmail_alias_get";"array vpopmail_alias_get(string alias, string domain)";"get all lines of an alias for a domain";"array";
"3352";"vpopmail";"vpopmail_auth_user";"bool vpopmail_auth_user(string user, string domain, string password[, string apop])";"Attempt to validate a username/domain/password. Returns true/false";"bool";
"3353";"vpopmail";"vpopmail_del_domain_ex";"bool vpopmail_del_domain_ex(string domain)";"Delete a virtual domain";"bool";
"3354";"vpopmail";"vpopmail_del_domain";"bool vpopmail_del_domain(string domain)";"Delete a virtual domain";"bool";
"3355";"vpopmail";"vpopmail_del_user";"bool vpopmail_del_user(string user, string domain)";"Delete a user from a virtual domain";"bool";
"3356";"vpopmail";"vpopmail_error";"string vpopmail_error()";"Get text message for last vpopmail error. Returns string";"string";
"3357";"W32api";"w32api_deftype";"bool w32api_deftype(string typename, string member1_type, string member1_name[, string ...[, string ...]])";"Defines a type for use with other w32api_functions";"bool";
"3358";"W32api";"w32api_init_dtype";"resource w32api_init_dtype(string typename, mixed value[, mixed ...])";"Creates an instance of the data type typename and fills it with the values passed";"resource";
"3359";"W32api";"w32api_invoke_function";"mixed w32api_invoke_function(string funcname, mixed argument[, mixed ...])";"Invokes function funcname with the arguments passed after the function name";"mixed";
"3360";"W32api";"w32api_register_function";"bool w32api_register_function(string library, string function_name, string return_type)";"Registers function function_name from library with PHP";"bool";
"3361";"W32api";"w32api_set_call_method";"void w32api_set_call_method(int method)";"Sets the calling method used";"void";
"3362";"WDDX";"wddx_add_vars";"bool wddx_add_vars(int packet_id, mixed name_var[, mixed ...])";"Add variables to a WDDX packet with the specified ID";"bool";
"3363";"WDDX";"wddx_deserialize";"mixed wddx_deserialize(string packet)";"Deserializes a WDDX packet";"mixed";
"3364";"WDDX";"wddx_packet_end";"string wddx_packet_end(int packet_id)";"Ends a WDDX packet with the specified ID";"string";
"3365";"WDDX";"wddx_packet_start";"int wddx_packet_start([string comment])";"Starts a new WDDX packet with structure inside it";"int";
"3366";"WDDX";"wddx_serialize_value";"string wddx_serialize_value(mixed var[, string comment])";"Serialize a single value into a WDDX packet";"string";
"3367";"WDDX";"wddx_serialize_vars";"string wddx_serialize_vars(mixed var_name[, mixed ...])";"Serialize variables into a WDDX packet";"string";
"3368";"XML";"utf8_decode";"string utf8_decode(string data)";"Converts a string with ISO-8859-1 characters encoded with UTF-8 to single-byte ISO-8859-1.";"string";
"3369";"XML";"utf8_encode";"string utf8_encode(string data)";"Encodes an ISO-8859-1 string to UTF-8";"string";
"3370";"XML";"xml_error_string";"string xml_error_string(int code)";"Get XML parser error string";"string";
"3371";"XML";"xml_get_current_byte_index";"int xml_get_current_byte_index(resource parser)";"Get current byte index for an XML parser";"int";
"3372";"XML";"xml_get_current_column_number";"int xml_get_current_column_number(resource parser)";"Get current column number for an XML parser";"int";
"3373";"XML";"xml_get_current_line_number";"int xml_get_current_line_number(resource parser)";"Get current line number for an XML parser";"int";
"3374";"XML";"xml_get_error_code";"int xml_get_error_code(resource parser)";"Get XML parser error code";"int";
"3375";"XML";"xml_parse_into_struct";"int xml_parse_into_struct(resource parser, string data, array &values[, array &index])";"Parse XML data into an array structure";"int";
"3376";"XML";"xml_parse";"bool xml_parse(resource parser, string data[, bool is_final])";"Start parsing an XML document";"bool";
"3377";"XML";"xml_parser_create_ns";"resource xml_parser_create_ns([string encoding[, string separator]])";"Create an XML parser with namespace support";"resource";
"3378";"XML";"xml_parser_create";"resource xml_parser_create([string encoding])";"Create an XML parser";"resource";
"3379";"XML";"xml_parser_free";"bool xml_parser_free(resource parser)";"Free an XML parser";"bool";
"3380";"XML";"xml_parser_get_option";"mixed xml_parser_get_option(resource parser, int option)";"Get options from an XML parser";"mixed";
"3381";"XML";"xml_parser_set_option";"bool xml_parser_set_option(resource parser, int option, mixed value)";"Set options in an XML parser";"bool";
"3382";"XML";"xml_set_character_data_handler";"bool xml_set_character_data_handler(resource parser, callback handler)";"Set up character data handler";"bool";
"3383";"XML";"xml_set_default_handler";"bool xml_set_default_handler(resource parser, callback handler)";"Set up default handler";"bool";
"3384";"XML";"xml_set_element_handler";"bool xml_set_element_handler(resource parser, callback start_element_handler, callback end_element_handler)";"Set up start and end element handlers";"bool";
"3385";"XML";"xml_set_end_namespace_decl_handler";"bool xml_set_end_namespace_decl_handler(resource parser, callback handler)";"Set up end namespace declaration handler";"bool";
"3386";"XML";"xml_set_external_entity_ref_handler";"bool xml_set_external_entity_ref_handler(resource parser, callback handler)";"Set up external entity reference handler";"bool";
"3387";"XML";"xml_set_notation_decl_handler";"bool xml_set_notation_decl_handler(resource parser, callback handler)";"Set up notation declaration handler";"bool";
"3388";"XML";"xml_set_object";"void xml_set_object(resource parser, object object)";"Use XML Parser within an object";"void";
"3389";"XML";"xml_set_processing_instruction_handler";"bool xml_set_processing_instruction_handler(resource parser, callback handler)";"Set up processing instruction (PI) handler";"bool";
"3390";"XML";"xml_set_start_namespace_decl_handler";"bool xml_set_start_namespace_decl_handler(resource parser, callback handler)";"Set up start namespace declaration handler";"bool";
"3391";"XML";"xml_set_unparsed_entity_decl_handler";"bool xml_set_unparsed_entity_decl_handler(resource parser, callback handler)";"Set up unparsed entity declaration handler";"bool";
"3392";"XML-RPC";"xmlrpc_decode_request";"array xmlrpc_decode_request(string xml, string &method[, string encoding])";"Decodes XML into native PHP types";"array";
"3393";"XML-RPC";"xmlrpc_decode";"array xmlrpc_decode(string xml[, string encoding])";"Decodes XML into native PHP types";"array";
"3394";"XML-RPC";"xmlrpc_encode_request";"string xmlrpc_encode_request(string method, mixed params)";"Generates XML for a method request";"string";
"3395";"XML-RPC";"xmlrpc_encode";"string xmlrpc_encode(mixed value)";"Generates XML for a PHP value";"string";
"3396";"XML-RPC";"xmlrpc_get_type";"string xmlrpc_get_type(mixed value)";"Gets xmlrpc type for a PHP value. Especially useful for base64 and datetime strings";"string";
"3397";"XML-RPC";"xmlrpc_parse_method_descriptions";"array xmlrpc_parse_method_descriptions(string xml)";"Decodes XML into a list of method descriptions";"array";
"3398";"XML-RPC";"xmlrpc_server_add_introspection_data";"int xmlrpc_server_add_introspection_data(resource server, array desc)";"Adds introspection documentation";"int";
"3399";"XML-RPC";"xmlrpc_server_call_method";"mixed xmlrpc_server_call_method(resource server, string xml, mixed user_data[, array output_options])";"Parses XML requests and call methods";"mixed";
"3400";"XML-RPC";"xmlrpc_server_create";"resource xmlrpc_server_create()";"Creates an xmlrpc server";"resource";
"3401";"XML-RPC";"xmlrpc_server_destroy";"int xmlrpc_server_destroy(resource server)";"Destroys server resources";"int";
"3402";"XML-RPC";"xmlrpc_server_register_introspection_callback";"bool xmlrpc_server_register_introspection_callback(resource server, string function)";"Register a PHP function to generate documentation";"bool";
"3403";"XML-RPC";"xmlrpc_server_register_method";"bool xmlrpc_server_register_method(resource server, string method_name, string function)";"Register a PHP function to resource method matching method_name";"bool";
"3404";"XML-RPC";"xmlrpc_set_type";"bool xmlrpc_set_type(string value, string type)";"Sets xmlrpc type, base64 or datetime, for a PHP string value";"bool";
"3405";"xdiff";"xdiff_file_diff_binary";"bool xdiff_file_diff_binary(string file1, string file2, string dest)";"Make binary diff of two files.";"bool";
"3406";"xdiff";"xdiff_file_diff";"bool xdiff_file_diff(string file1, string file2, string dest[, int context[, bool minimal]])";"Make unified diff of two files.";"bool";
"3407";"xdiff";"xdiff_file_merge3";"mixed xdiff_file_merge3(string file1, string file2, string file3, string dest)";"Merge 3 files into one.";"mixed";
"3408";"xdiff";"xdiff_file_patch_binary";"bool xdiff_file_patch_binary(string file, string patch, string dest)";"Patch a file with a binary diff.";"bool";
"3409";"xdiff";"xdiff_file_patch";"mixed xdiff_file_patch(string file, string patch, string dest[, int flags])";"Patch a file with an unified diff.";"mixed";
"3410";"xdiff";"xdiff_string_diff_binary";"mixed xdiff_string_diff_binary(string str1, string str2)";"Make binary diff of two strings.";"mixed";
"3411";"xdiff";"xdiff_string_diff";"mixed xdiff_string_diff(string str1, string str2[, int context[, bool minimal]])";"Make unified diff of two strings.";"mixed";
"3412";"xdiff";"xdiff_string_merge3";"string xdiff_string_merge3(string str1, string str2, string str3[, string & error])";"Merge 3 strings into one.";"string";
"3413";"xdiff";"xdiff_string_patch_binary";"string xdiff_string_patch_binary(string str, string patch)";"Patch a string with a binary diff.";"string";
"3414";"xdiff";"xdiff_string_patch";"string xdiff_string_patch(string str, string patch[, int flags[, string & error]])";"Patch a string with an unified diff.";"string";
"3415";"XSL";"xsl_xsltprocessor_get_parameter";"bool xsl_xsltprocessor_get_parameter(string namespace, string name)";;"bool";
"3416";"XSL";"xsl_xsltprocessor_has_exslt_support";"bool xsl_xsltprocessor_has_exslt_support()";"Determine if PHP has EXSLT support";"bool";
"3417";"XSL";"xsl_xsltprocessor_import_stylesheet";"bool xsl_xsltprocessor_import_stylesheet(node index)";;"bool";
"3418";"XSL";"xsl_xsltprocessor_register_php_functions";"void xsl_xsltprocessor_register_php_functions()";"Enables the ability to use PHP functions as XSLT functions";"void";
"3419";"XSL";"xsl_xsltprocessor_remove_parameter";"bool xsl_xsltprocessor_remove_parameter(string namespace, string name)";;"bool";
"3420";"XSL";"xsl_xsltprocessor_set_parameter";"bool xsl_xsltprocessor_set_parameter(string namespace, string name, string value)";;"bool";
"3421";"XSL";"xsl_xsltprocessor_transform_to_doc";"bool xsl_xsltprocessor_transform_to_doc(node doc[, bool clone])";;"bool";
"3422";"XSL";"xsl_xsltprocessor_transform_to_uri";"bool xsl_xsltprocessor_transform_to_uri(node doc, string uri[, bool clone])";;"bool";
"3423";"XSL";"xsl_xsltprocessor_transform_to_xml";"bool xsl_xsltprocessor_transform_to_xml(node doc[, bool clone])";;"bool";
"3424";"XSLT";"xslt_backend_info";"string xslt_backend_info()";"Returns the information on the compilation settings of the backend";"string";
"3425";"XSLT";"xslt_backend_name";"string xslt_backend_name()";"Returns the name of the backend";"string";
"3426";"XSLT";"xslt_backend_version";"string xslt_backend_version()";"Returns the version number of Sablotron";"string";
"3427";"XSLT";"xslt_create";"resource xslt_create()";"Create a new XSLT processor";"resource";
"3428";"XSLT";"xslt_errno";"int xslt_errno(resource xh)";"Returns an error number";"int";
"3429";"XSLT";"xslt_error";"mixed xslt_error(resource xh)";"Returns an error string";"mixed";
"3430";"XSLT";"xslt_free";"void xslt_free(resource xh)";"Free XSLT processor";"void";
"3431";"XSLT";"xslt_getopt";"int xslt_getopt(resource processor)";"Get options on a given xsl processor";"int";
"3432";"XSLT";"xslt_process";"mixed xslt_process(resource xh, string xmlcontainer, string xslcontainer[, string resultcontainer[, array arguments[, array parameters]]])";"Perform an XSLT transformation";"mixed";
"3433";"XSLT";"xslt_set_base";"void xslt_set_base(resource xh, string uri)";"Set the base URI for all XSLT transformations";"void";
"3434";"XSLT";"xslt_set_encoding";"void xslt_set_encoding(resource xh, string encoding)";"Set the encoding for the parsing of XML documents";"void";
"3435";"XSLT";"xslt_set_error_handler";"void xslt_set_error_handler(resource xh, mixed handler)";"Set an error handler for a XSLT processor";"void";
"3436";"XSLT";"xslt_set_log";"void xslt_set_log(resource xh, mixed log)";"Set the log file to write log messages to";"void";
"3437";"XSLT";"xslt_set_object";"int xslt_set_object(resource parser, object obj)";"Sets the object in which to resolve callback functions";"int";
"3438";"XSLT";"xslt_set_sax_handler";"void xslt_set_sax_handler(resource xh, array handlers)";"Set SAX handlers for a XSLT processor";"void";
"3439";"XSLT";"xslt_set_sax_handlers";"void xslt_set_sax_handlers(resource processor, array handlers)";"Set the SAX handlers to be called when the XML document gets processed";"void";
"3440";"XSLT";"xslt_set_scheme_handler";"void xslt_set_scheme_handler(resource xh, array handlers)";"Set Scheme handlers for a XSLT processor";"void";
"3441";"XSLT";"xslt_set_scheme_handlers";"void xslt_set_scheme_handlers(resource processor, array handlers)";"Set the scheme handlers for the XSLT processor";"void";
"3442";"XSLT";"xslt_setopt";"int xslt_setopt(resource processor, int newmask)";"Set options on a given xsl processor";"int";
"3443";"YAZ";"yaz_addinfo";"string yaz_addinfo(resource id)";"Returns additional error information";"string";
"3444";"YAZ";"yaz_ccl_conf";"int yaz_ccl_conf(resource id, array config)";"Configure CCL parser";"int";
"3445";"YAZ";"yaz_ccl_parse";"bool yaz_ccl_parse(resource id, string query, array & result)";"Invoke CCL Parser";"bool";
"3446";"YAZ";"yaz_close";"bool yaz_close(resource id)";"Close YAZ connection";"bool";
"3447";"YAZ";"yaz_connect";"resource yaz_connect(string zurl[, mixed options])";"Prepares for a connection to a Z39.50 server.";"resource";
"3448";"YAZ";"yaz_database";"bool yaz_database(resource id, string databases)";"Specifies the databases within a session";"bool";
"3449";"YAZ";"yaz_element";"bool yaz_element(resource id, string elementset)";"Specifies Element-Set Name for retrieval";"bool";
"3450";"YAZ";"yaz_errno";"int yaz_errno(resource id)";"Returns error number";"int";
"3451";"YAZ";"yaz_error";"string yaz_error(resource id)";"Returns error description";"string";
"3452";"YAZ";"yaz_es_result";"array yaz_es_result(resource id)";"Inspects Extended Services Result";"array";
"3453";"YAZ";"yaz_get_option";"string yaz_get_option(resource id, string name)";"Returns value of option for connection";"string";
"3454";"YAZ";"yaz_hits";"int yaz_hits(resource id)";"Returns number of hits for last search";"int";
"3455";"YAZ";"yaz_itemorder";"int yaz_itemorder(resource id, array args)";"Prepares for Z39.50 Item Order with an ILL-Request package";"int";
"3456";"YAZ";"yaz_present";"bool yaz_present(resource id)";"Prepares for retrieval (Z39.50 present).";"bool";
"3457";"YAZ";"yaz_range";"bool yaz_range(resource id, int start, int number)";"Specifies the maximum number of records to retrieve";"bool";
"3458";"YAZ";"yaz_record";"string yaz_record(resource id, int pos, string type)";"Returns a record";"string";
"3459";"YAZ";"yaz_scan_result";"array yaz_scan_result(resource id[, array & result])";"Returns Scan Response result";"array";
"3460";"YAZ";"yaz_scan";"int yaz_scan(resource id, string type, string startterm[, array flags])";"Prepares for a scan";"int";
"3461";"YAZ";"yaz_schema";"int yaz_schema(resource id, string schema)";"Specifies schema for retrieval.";"int";
"3462";"YAZ";"yaz_search";"int yaz_search(resource id, string type, string query)";"Prepares for a search";"int";
"3463";"YAZ";"yaz_set_option";"string yaz_set_option(resource id, string name, string value)";"Sets one or more options for connection";"string";
"3464";"YAZ";"yaz_sort";"int yaz_sort(resource id, string criteria)";"Sets sorting criteria";"int";
"3465";"YAZ";"yaz_syntax";"int yaz_syntax(resource id, string syntax)";"Specifies the preferred record syntax for retrieval.";"int";
"3466";"YAZ";"yaz_wait";"int yaz_wait([array options])";"Wait for Z39.50 requests to complete";"int";
"3467";"YP/NIS";"yp_all";"void yp_all(string domain, string map, string callback)";"Traverse the map and call a function on each entry";"void";
"3468";"YP/NIS";"yp_cat";"array yp_cat(string domain, string map)";"Return an array containing the entire map";"array";
"3469";"YP/NIS";"yp_err_string";"string yp_err_string(int errorcode)";"Returns the error string associated with the given error code";"string";
"3470";"YP/NIS";"yp_errno";"int yp_errno()";"Returns the error code of the previous operation";"int";
"3471";"YP/NIS";"yp_first";"array yp_first(string domain, string map)";"Returns the first key-value pair from the named map";"array";
"3472";"YP/NIS";"yp_master";"string yp_master(string domain, string map)";"Returns the machine name of the master NIS server for a map";"string";
"3473";"YP/NIS";"yp_match";"string yp_match(string domain, string map, string key)";"Returns the matched line";"string";
"3474";"YP/NIS";"yp_next";"array yp_next(string domain, string map, string key)";"Returns the next key-value pair in the named map.";"array";
"3475";"YP/NIS";"yp_order";"int yp_order(string domain, string map)";"Returns the order number for a map";"int";
"3476";"Zip";"zip_close";"void zip_close(resource zip)";"Close a Zip File Archive";"void";
"3477";"Zip";"zip_entry_close";"void zip_entry_close(resource zip_entry)";"Close a Directory Entry";"void";
"3478";"Zip";"zip_entry_compressedsize";"int zip_entry_compressedsize(resource zip_entry)";"Retrieve the Compressed Size of a Directory Entry";"int";
"3479";"Zip";"zip_entry_compressionmethod";"string zip_entry_compressionmethod(resource zip_entry)";"Retrieve the Compression Method of a Directory Entry";"string";
"3480";"Zip";"zip_entry_filesize";"int zip_entry_filesize(resource zip_entry)";"Retrieve the Actual File Size of a Directory Entry";"int";
"3481";"Zip";"zip_entry_name";"string zip_entry_name(resource zip_entry)";"Retrieve the Name of a Directory Entry";"string";
"3482";"Zip";"zip_entry_open";"bool zip_entry_open(resource zip, resource zip_entry[, string mode])";"Open a Directory Entry for Reading";"bool";
"3483";"Zip";"zip_entry_read";"string zip_entry_read(resource zip_entry[, int length])";"Read From an Open Directory Entry";"string";
"3484";"Zip";"zip_open";"resource zip_open(string filename)";"Open a Zip File Archive";"resource";
"3485";"Zip";"zip_read";"resource zip_read(resource zip)";"Read Next Entry in a Zip File Archive";"resource";
"3486";"Zlib";"gzclose";"int gzclose(resource zp)";"Close an open gz-file pointer";"int";
"3487";"Zlib";"gzcompress";"string gzcompress(string data[, int level])";"Compress a string";"string";
"3488";"Zlib";"gzdeflate";"string gzdeflate(string data[, int level])";"Deflate a string";"string";
"3489";"Zlib";"gzencode";"string gzencode(string data[, int level[, int encoding_mode]])";"Create a gzip compressed string";"string";
"3490";"Zlib";"gzeof";"int gzeof(resource zp)";"Test for end-of-file on a gz-file pointer";"int";
"3491";"Zlib";"gzfile";"array gzfile(string filename[, int use_include_path])";"Read entire gz-file into an array";"array";
"3492";"Zlib";"gzgetc";"string gzgetc(resource zp)";"Get character from gz-file pointer";"string";
"3493";"Zlib";"gzgets";"string gzgets(resource zp, int length)";"Get line from file pointer";"string";
"3494";"Zlib";"gzgetss";"string gzgetss(resource zp, int length[, string allowable_tags])";"Get line from gz-file pointer and strip HTML tags";"string";
"3495";"Zlib";"gzinflate";"string gzinflate(string data[, int length])";"Inflate a deflated string";"string";
"3496";"Zlib";"gzopen";"resource gzopen(string filename, string mode[, int use_include_path])";"Open gz-file";"resource";
"3497";"Zlib";"gzpassthru";"int gzpassthru(resource zp)";"Output all remaining data on a gz-file pointer";"int";
"3498";"Zlib";"gzputs";;"Alias of gzwrite";;
"3499";"Zlib";"gzread";"string gzread(resource zp, int length)";"Binary-safe gz-file read";"string";
"3500";"Zlib";"gzrewind";"int gzrewind(resource zp)";"Rewind the position of a gz-file pointer";"int";
"3501";"Zlib";"gzseek";"int gzseek(resource zp, int offset)";"Seek on a gz-file pointer";"int";
"3502";"Zlib";"gztell";"int gztell(resource zp)";"Tell gz-file pointer read/write position";"int";
"3503";"Zlib";"gzuncompress";"string gzuncompress(string data[, int length])";"Uncompress a deflated string";"string";
"3504";"Zlib";"gzwrite";"int gzwrite(resource zp, string string[, int length])";"Binary-safe gz-file write";"int";
"3505";"Zlib";"readgzfile";"int readgzfile(string filename[, int use_include_path])";"Output a gz-file";"int";
"3506";"Zlib";"zlib_get_coding_type";"string zlib_get_coding_type()";"Returns the coding type used for output compression";"string";
